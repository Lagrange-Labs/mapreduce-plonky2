/**

Generated by the following Solidity interface...
```solidity
interface Simple {
    type MappingOperation is uint8;
    struct LargeStruct {
        uint256 field1;
        uint128 field2;
        uint128 field3;
    }
    struct MappingChange {
        uint256 key;
        address value;
        MappingOperation operation;
    }
    struct MappingOfSingleValueMappingsChange {
        uint256 outerKey;
        uint256 innerKey;
        uint256 value;
        MappingOperation operation;
    }
    struct MappingOfStructMappingsChange {
        uint256 outerKey;
        uint256 innerKey;
        uint256 field1;
        uint128 field2;
        uint128 field3;
        MappingOperation operation;
    }
    struct MappingStructChange {
        uint256 key;
        uint256 field1;
        uint128 field2;
        uint128 field3;
        MappingOperation operation;
    }

    function addToArray(uint256 value) external;
    function arr1(uint256) external view returns (uint256);
    function changeMapping(MappingOfStructMappingsChange[] memory changes) external;
    function changeMapping(MappingChange[] memory changes) external;
    function changeMapping(MappingOfSingleValueMappingsChange[] memory changes) external;
    function changeMapping(MappingStructChange[] memory changes) external;
    function m1(uint256) external view returns (address);
    function mappingOfSingleValueMappings(uint256, uint256) external view returns (uint256);
    function mappingOfStructMappings(uint256, uint256) external view returns (uint256 field1, uint128 field2, uint128 field3);
    function s1() external view returns (bool);
    function s2() external view returns (uint256);
    function s3() external view returns (string memory);
    function s4() external view returns (address);
    function setMapping(uint256 key, address value) external;
    function setMappingOfSingleValueMappings(uint256 outerKey, uint256 innerKey, uint256 value) external;
    function setMappingOfStructMappings(uint256 outerKey, uint256 innerKey, uint256 field1, uint128 field2, uint128 field3) external;
    function setMappingStruct(uint256 _key, uint256 _field1, uint128 _field2, uint128 _field3) external;
    function setS2(uint256 newS2) external;
    function setSimpleStruct(LargeStruct memory input) external;
    function setSimples(bool newS1, uint256 newS2, string memory newS3, address newS4) external;
    function simpleStruct() external view returns (uint256 field1, uint128 field2, uint128 field3);
    function structMapping(uint256) external view returns (uint256 field1, uint128 field2, uint128 field3);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "addToArray",
    "inputs": [
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "arr1",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "changeMapping",
    "inputs": [
      {
        "name": "changes",
        "type": "tuple[]",
        "internalType": "struct Simple.MappingOfStructMappingsChange[]",
        "components": [
          {
            "name": "outerKey",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "innerKey",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "field1",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "field2",
            "type": "uint128",
            "internalType": "uint128"
          },
          {
            "name": "field3",
            "type": "uint128",
            "internalType": "uint128"
          },
          {
            "name": "operation",
            "type": "uint8",
            "internalType": "enum Simple.MappingOperation"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "changeMapping",
    "inputs": [
      {
        "name": "changes",
        "type": "tuple[]",
        "internalType": "struct Simple.MappingChange[]",
        "components": [
          {
            "name": "key",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "value",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "operation",
            "type": "uint8",
            "internalType": "enum Simple.MappingOperation"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "changeMapping",
    "inputs": [
      {
        "name": "changes",
        "type": "tuple[]",
        "internalType": "struct Simple.MappingOfSingleValueMappingsChange[]",
        "components": [
          {
            "name": "outerKey",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "innerKey",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "value",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "operation",
            "type": "uint8",
            "internalType": "enum Simple.MappingOperation"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "changeMapping",
    "inputs": [
      {
        "name": "changes",
        "type": "tuple[]",
        "internalType": "struct Simple.MappingStructChange[]",
        "components": [
          {
            "name": "key",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "field1",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "field2",
            "type": "uint128",
            "internalType": "uint128"
          },
          {
            "name": "field3",
            "type": "uint128",
            "internalType": "uint128"
          },
          {
            "name": "operation",
            "type": "uint8",
            "internalType": "enum Simple.MappingOperation"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "m1",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mappingOfSingleValueMappings",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mappingOfStructMappings",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s3",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s4",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setMapping",
    "inputs": [
      {
        "name": "key",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMappingOfSingleValueMappings",
    "inputs": [
      {
        "name": "outerKey",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "innerKey",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMappingOfStructMappings",
    "inputs": [
      {
        "name": "outerKey",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "innerKey",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMappingStruct",
    "inputs": [
      {
        "name": "_key",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "_field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setS2",
    "inputs": [
      {
        "name": "newS2",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSimpleStruct",
    "inputs": [
      {
        "name": "input",
        "type": "tuple",
        "internalType": "struct Simple.LargeStruct",
        "components": [
          {
            "name": "field1",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "field2",
            "type": "uint128",
            "internalType": "uint128"
          },
          {
            "name": "field3",
            "type": "uint128",
            "internalType": "uint128"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSimples",
    "inputs": [
      {
        "name": "newS1",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "newS2",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "newS3",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "newS4",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "simpleStruct",
    "inputs": [],
    "outputs": [
      {
        "name": "field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "structMapping",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Simple {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5061149a8061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061013d575f3560e01c80638026de31116100b4578063a5d666a911610079578063a5d666a91461035d578063c6a7f0fe14610372578063c8af3aa614610385578063d15ec85114610398578063ead18400146103da578063f25d54f5146103fc575f80fd5b80638026de311461027357806385b6489f1461028657806388dfddc6146102f057806396dc9a411461032a578063a314150f14610354575f80fd5b80633e70166e116101055780633e70166e146101d45780633e9060c7146101e75780634cf5a94a146101fa57806351976fc8146102235780636987b1fb146102365780636cc014de14610257575f80fd5b80630200225c1461014157806302e3003a146101565780630c1616c9146101695780631c1343151461017c5780632ae426861461018f575b5f80fd5b61015461014f366004610ce0565b61040f565b005b610154610164366004610de7565b610453565b610154610177366004610eda565b610616565b61015461018a366004610f93565b610753565b6101b761019d366004610fbd565b60046020525f90815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101546101e2366004610fd4565b610780565b6101546101f5366004610fea565b610792565b6101546102083660046110b5565b5f928352600960209081526040808520938552929052912055565b6101546102313660046110de565b610922565b610249610244366004610fbd565b610a96565b6040519081526020016101cb565b5f546102639060ff1681565b60405190151581526020016101cb565b6101546102813660046111b6565b610ab5565b6102cb6102943660046111fd565b600a60209081525f9283526040808420909152908252902080546001909101546001600160801b0380821691600160801b90041683565b604080519384526001600160801b0392831660208501529116908201526060016101cb565b6102cb6102fe366004610fbd565b60086020525f9081526040902080546001909101546001600160801b0380821691600160801b90041683565b6102496103383660046111fd565b600960209081525f928352604080842090915290825290205481565b61024960015481565b610365610b07565b6040516101cb919061121d565b610154610380366004611269565b610b93565b6003546101b7906001600160a01b031681565b6101546103a6366004610fbd565b600580546001810182555f919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b6006546007546102cb91906001600160801b0380821691600160801b90041683565b61015461040a366004610fbd565b600155565b5f805460ff19168515151790556001839055600261042d8382611338565b50600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b5f5b8151811015610612575f8282815181106104715761047161140c565b602002602001015160a00151600281111561048e5761048e6113f8565b036104fd57600a5f8383815181106104a8576104a861140c565b60200260200101515f015181526020019081526020015f205f8383815181106104d3576104d361140c565b60209081029190910181015181015182528101919091526040015f9081208181556001015561060a565b60028282815181106105115761051161140c565b602002602001015160a00151600281111561052e5761052e6113f8565b1480610568575060018282815181106105495761054961140c565b602002602001015160a001516002811115610566576105666113f8565b145b1561060a5761060a8282815181106105825761058261140c565b60200260200101515f015183838151811061059f5761059f61140c565b6020026020010151602001518484815181106105bd576105bd61140c565b6020026020010151604001518585815181106105db576105db61140c565b6020026020010151606001518686815181106105f9576105f961140c565b602002602001015160800151610b93565b600101610455565b5050565b5f5b8151811015610612575f8282815181106106345761063461140c565b6020026020010151604001516002811115610651576106516113f8565b036106985760045f83838151811061066b5761066b61140c565b6020908102919091018101515182528101919091526040015f2080546001600160a01b031916905561074b565b60028282815181106106ac576106ac61140c565b60200260200101516040015160028111156106c9576106c96113f8565b1480610703575060018282815181106106e4576106e461140c565b6020026020010151604001516002811115610701576107016113f8565b145b1561074b5761074b82828151811061071d5761071d61140c565b60200260200101515f015183838151811061073a5761073a61140c565b602002602001015160200151610753565b600101610618565b5f9182526004602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b80600661078d8282611420565b505050565b5f5b8151811015610612575f8282815181106107b0576107b061140c565b60200260200101516060015160028111156107cd576107cd6113f8565b036108335760095f8383815181106107e7576107e761140c565b60200260200101515f015181526020019081526020015f205f8383815181106108125761081261140c565b60200260200101516020015181526020019081526020015f205f905561091a565b60028282815181106108475761084761140c565b6020026020010151606001516002811115610864576108646113f8565b148061089e5750600182828151811061087f5761087f61140c565b602002602001015160600151600281111561089c5761089c6113f8565b145b1561091a5761091a8282815181106108b8576108b861140c565b60200260200101515f01518383815181106108d5576108d561140c565b6020026020010151602001518484815181106108f3576108f361140c565b6020026020010151604001515f928352600960209081526040808520938552929052912055565b600101610794565b5f5b8151811015610612575f8282815181106109405761094061140c565b602002602001015160800151600281111561095d5761095d6113f8565b0361099f5760085f8383815181106109775761097761140c565b6020908102919091018101515182528101919091526040015f90812081815560010155610a8e565b60028282815181106109b3576109b361140c565b60200260200101516080015160028111156109d0576109d06113f8565b1480610a0a575060018282815181106109eb576109eb61140c565b6020026020010151608001516002811115610a0857610a086113f8565b145b15610a8e57610a8e828281518110610a2457610a2461140c565b60200260200101515f0151838381518110610a4157610a4161140c565b602002602001015160200151848481518110610a5f57610a5f61140c565b602002602001015160400151858581518110610a7d57610a7d61140c565b602002602001015160600151610ab5565b600101610924565b60058181548110610aa5575f80fd5b5f91825260209091200154905081565b604080516060810182529384526001600160801b0392831660208086019182529284168583019081525f9687526008909352942092518355925192518116600160801b02921691909117600190910155565b60028054610b14906112bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610b40906112bb565b8015610b8b5780601f10610b6257610100808354040283529160200191610b8b565b820191905f5260205f20905b815481529060010190602001808311610b6e57829003601f168201915b505050505081565b604080516060810182529384526001600160801b0392831660208086019182529284168583019081525f978852600a84528288209688529590925290942091518255925191518316600160801b029190921617600190910155565b634e487b7160e01b5f52604160045260245ffd5b60405160c0810167ffffffffffffffff81118282101715610c2557610c25610bee565b60405290565b6040516060810167ffffffffffffffff81118282101715610c2557610c25610bee565b6040516080810167ffffffffffffffff81118282101715610c2557610c25610bee565b60405160a0810167ffffffffffffffff81118282101715610c2557610c25610bee565b604051601f8201601f1916810167ffffffffffffffff81118282101715610cbd57610cbd610bee565b604052919050565b80356001600160a01b0381168114610cdb575f80fd5b919050565b5f805f8060808587031215610cf3575f80fd5b84358015158114610d02575f80fd5b93506020858101359350604086013567ffffffffffffffff80821115610d26575f80fd5b818801915088601f830112610d39575f80fd5b813581811115610d4b57610d4b610bee565b610d5d601f8201601f19168501610c94565b91508082528984828501011115610d72575f80fd5b80848401858401375f84828401015250809450505050610d9460608601610cc5565b905092959194509250565b5f67ffffffffffffffff821115610db857610db8610bee565b5060051b60200190565b6001600160801b0381168114610dd6575f80fd5b50565b803560038110610cdb575f80fd5b5f6020808385031215610df8575f80fd5b823567ffffffffffffffff811115610e0e575f80fd5b8301601f81018513610e1e575f80fd5b8035610e31610e2c82610d9f565b610c94565b81815260c09182028301840191848201919088841115610e4f575f80fd5b938501935b83851015610ece5780858a031215610e6a575f80fd5b610e72610c02565b85358152868601358782015260408087013590820152606080870135610e9781610dc2565b90820152608086810135610eaa81610dc2565b9082015260a0610ebb878201610dd9565b9082015283529384019391850191610e54565b50979650505050505050565b5f6020808385031215610eeb575f80fd5b823567ffffffffffffffff811115610f01575f80fd5b8301601f81018513610f11575f80fd5b8035610f1f610e2c82610d9f565b81815260609182028301840191848201919088841115610f3d575f80fd5b938501935b83851015610ece5780858a031215610f58575f80fd5b610f60610c2b565b85358152610f6f878701610cc5565b878201526040610f80818801610dd9565b9082015283529384019391850191610f42565b5f8060408385031215610fa4575f80fd5b82359150610fb460208401610cc5565b90509250929050565b5f60208284031215610fcd575f80fd5b5035919050565b5f60608284031215610fe4575f80fd5b50919050565b5f6020808385031215610ffb575f80fd5b823567ffffffffffffffff811115611011575f80fd5b8301601f81018513611021575f80fd5b803561102f610e2c82610d9f565b81815260079190911b8201830190838101908783111561104d575f80fd5b928401925b828410156110aa5760808489031215611069575f80fd5b611071610c4e565b843581528585013586820152604080860135908201526060611094818701610dd9565b9082015282526080939093019290840190611052565b979650505050505050565b5f805f606084860312156110c7575f80fd5b505081359360208301359350604090920135919050565b5f60208083850312156110ef575f80fd5b823567ffffffffffffffff811115611105575f80fd5b8301601f81018513611115575f80fd5b8035611123610e2c82610d9f565b81815260a09182028301840191848201919088841115611141575f80fd5b938501935b83851015610ece5780858a03121561115c575f80fd5b611164610c71565b85358152868601358782015260408087013561117f81610dc2565b9082015260608681013561119281610dc2565b9082015260806111a3878201610dd9565b9082015283529384019391850191611146565b5f805f80608085870312156111c9575f80fd5b843593506020850135925060408501356111e281610dc2565b915060608501356111f281610dc2565b939692955090935050565b5f806040838503121561120e575f80fd5b50508035926020909101359150565b5f602080835283518060208501525f5b818110156112495785810183015185820160400152820161122d565b505f604082860101526040601f19601f8301168501019250505092915050565b5f805f805f60a0868803121561127d575f80fd5b853594506020860135935060408601359250606086013561129d81610dc2565b915060808601356112ad81610dc2565b809150509295509295909350565b600181811c908216806112cf57607f821691505b602082108103610fe457634e487b7160e01b5f52602260045260245ffd5b601f82111561078d57805f5260205f20601f840160051c810160208510156113125750805b601f840160051c820191505b81811015611331575f815560010161131e565b5050505050565b815167ffffffffffffffff81111561135257611352610bee565b6113668161136084546112bb565b846112ed565b602080601f831160018114611399575f84156113825750858301515b5f19600386901b1c1916600185901b1785556113f0565b5f85815260208120601f198616915b828110156113c7578886015182559484019460019091019084016113a8565b50858210156113e457878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b81358155602082013561143281610dc2565b604083013561144081610dc2565b6001600160801b03198160801b166001600160801b0383161760018401555050505056fea2646970667358221220687c6fe6e265aabe62404e89b39f883c05f4922b7a4a138f5273c712c742ef4f64736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[Pa\x14\x9A\x80a\0\x1D_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x01=W_5`\xE0\x1C\x80c\x80&\xDE1\x11a\0\xB4W\x80c\xA5\xD6f\xA9\x11a\0yW\x80c\xA5\xD6f\xA9\x14a\x03]W\x80c\xC6\xA7\xF0\xFE\x14a\x03rW\x80c\xC8\xAF:\xA6\x14a\x03\x85W\x80c\xD1^\xC8Q\x14a\x03\x98W\x80c\xEA\xD1\x84\0\x14a\x03\xDAW\x80c\xF2]T\xF5\x14a\x03\xFCW_\x80\xFD[\x80c\x80&\xDE1\x14a\x02sW\x80c\x85\xB6H\x9F\x14a\x02\x86W\x80c\x88\xDF\xDD\xC6\x14a\x02\xF0W\x80c\x96\xDC\x9AA\x14a\x03*W\x80c\xA3\x14\x15\x0F\x14a\x03TW_\x80\xFD[\x80c>p\x16n\x11a\x01\x05W\x80c>p\x16n\x14a\x01\xD4W\x80c>\x90`\xC7\x14a\x01\xE7W\x80cL\xF5\xA9J\x14a\x01\xFAW\x80cQ\x97o\xC8\x14a\x02#W\x80ci\x87\xB1\xFB\x14a\x026W\x80cl\xC0\x14\xDE\x14a\x02WW_\x80\xFD[\x80c\x02\0\"\\\x14a\x01AW\x80c\x02\xE3\0:\x14a\x01VW\x80c\x0C\x16\x16\xC9\x14a\x01iW\x80c\x1C\x13C\x15\x14a\x01|W\x80c*\xE4&\x86\x14a\x01\x8FW[_\x80\xFD[a\x01Ta\x01O6`\x04a\x0C\xE0V[a\x04\x0FV[\0[a\x01Ta\x01d6`\x04a\r\xE7V[a\x04SV[a\x01Ta\x01w6`\x04a\x0E\xDAV[a\x06\x16V[a\x01Ta\x01\x8A6`\x04a\x0F\x93V[a\x07SV[a\x01\xB7a\x01\x9D6`\x04a\x0F\xBDV[`\x04` R_\x90\x81R`@\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01Ta\x01\xE26`\x04a\x0F\xD4V[a\x07\x80V[a\x01Ta\x01\xF56`\x04a\x0F\xEAV[a\x07\x92V[a\x01Ta\x02\x086`\x04a\x10\xB5V[_\x92\x83R`\t` \x90\x81R`@\x80\x85 \x93\x85R\x92\x90R\x91 UV[a\x01Ta\x0216`\x04a\x10\xDEV[a\t\"V[a\x02Ia\x02D6`\x04a\x0F\xBDV[a\n\x96V[`@Q\x90\x81R` \x01a\x01\xCBV[_Ta\x02c\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01\xCBV[a\x01Ta\x02\x816`\x04a\x11\xB6V[a\n\xB5V[a\x02\xCBa\x02\x946`\x04a\x11\xFDV[`\n` \x90\x81R_\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 \x80T`\x01\x90\x91\x01T`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[`@\x80Q\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x85\x01R\x91\x16\x90\x82\x01R``\x01a\x01\xCBV[a\x02\xCBa\x02\xFE6`\x04a\x0F\xBDV[`\x08` R_\x90\x81R`@\x90 \x80T`\x01\x90\x91\x01T`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[a\x02Ia\x0386`\x04a\x11\xFDV[`\t` \x90\x81R_\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T\x81V[a\x02I`\x01T\x81V[a\x03ea\x0B\x07V[`@Qa\x01\xCB\x91\x90a\x12\x1DV[a\x01Ta\x03\x806`\x04a\x12iV[a\x0B\x93V[`\x03Ta\x01\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01Ta\x03\xA66`\x04a\x0F\xBDV[`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[`\x06T`\x07Ta\x02\xCB\x91\x90`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[a\x01Ta\x04\n6`\x04a\x0F\xBDV[`\x01UV[_\x80T`\xFF\x19\x16\x85\x15\x15\x17\x90U`\x01\x83\x90U`\x02a\x04-\x83\x82a\x138V[P`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPPPV[_[\x81Q\x81\x10\x15a\x06\x12W_\x82\x82\x81Q\x81\x10a\x04qWa\x04qa\x14\x0CV[` \x02` \x01\x01Q`\xA0\x01Q`\x02\x81\x11\x15a\x04\x8EWa\x04\x8Ea\x13\xF8V[\x03a\x04\xFDW`\n_\x83\x83\x81Q\x81\x10a\x04\xA8Wa\x04\xA8a\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x81R` \x01\x90\x81R` \x01_ _\x83\x83\x81Q\x81\x10a\x04\xD3Wa\x04\xD3a\x14\x0CV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01Q\x81\x01Q\x82R\x81\x01\x91\x90\x91R`@\x01_\x90\x81 \x81\x81U`\x01\x01Ua\x06\nV[`\x02\x82\x82\x81Q\x81\x10a\x05\x11Wa\x05\x11a\x14\x0CV[` \x02` \x01\x01Q`\xA0\x01Q`\x02\x81\x11\x15a\x05.Wa\x05.a\x13\xF8V[\x14\x80a\x05hWP`\x01\x82\x82\x81Q\x81\x10a\x05IWa\x05Ia\x14\x0CV[` \x02` \x01\x01Q`\xA0\x01Q`\x02\x81\x11\x15a\x05fWa\x05fa\x13\xF8V[\x14[\x15a\x06\nWa\x06\n\x82\x82\x81Q\x81\x10a\x05\x82Wa\x05\x82a\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x05\x9FWa\x05\x9Fa\x14\x0CV[` \x02` \x01\x01Q` \x01Q\x84\x84\x81Q\x81\x10a\x05\xBDWa\x05\xBDa\x14\x0CV[` \x02` \x01\x01Q`@\x01Q\x85\x85\x81Q\x81\x10a\x05\xDBWa\x05\xDBa\x14\x0CV[` \x02` \x01\x01Q``\x01Q\x86\x86\x81Q\x81\x10a\x05\xF9Wa\x05\xF9a\x14\x0CV[` \x02` \x01\x01Q`\x80\x01Qa\x0B\x93V[`\x01\x01a\x04UV[PPV[_[\x81Q\x81\x10\x15a\x06\x12W_\x82\x82\x81Q\x81\x10a\x064Wa\x064a\x14\x0CV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x06QWa\x06Qa\x13\xF8V[\x03a\x06\x98W`\x04_\x83\x83\x81Q\x81\x10a\x06kWa\x06ka\x14\x0CV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01QQ\x82R\x81\x01\x91\x90\x91R`@\x01_ \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90Ua\x07KV[`\x02\x82\x82\x81Q\x81\x10a\x06\xACWa\x06\xACa\x14\x0CV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x06\xC9Wa\x06\xC9a\x13\xF8V[\x14\x80a\x07\x03WP`\x01\x82\x82\x81Q\x81\x10a\x06\xE4Wa\x06\xE4a\x14\x0CV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x07\x01Wa\x07\x01a\x13\xF8V[\x14[\x15a\x07KWa\x07K\x82\x82\x81Q\x81\x10a\x07\x1DWa\x07\x1Da\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x07:Wa\x07:a\x14\x0CV[` \x02` \x01\x01Q` \x01Qa\x07SV[`\x01\x01a\x06\x18V[_\x91\x82R`\x04` R`@\x90\x91 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90UV[\x80`\x06a\x07\x8D\x82\x82a\x14 V[PPPV[_[\x81Q\x81\x10\x15a\x06\x12W_\x82\x82\x81Q\x81\x10a\x07\xB0Wa\x07\xB0a\x14\x0CV[` \x02` \x01\x01Q``\x01Q`\x02\x81\x11\x15a\x07\xCDWa\x07\xCDa\x13\xF8V[\x03a\x083W`\t_\x83\x83\x81Q\x81\x10a\x07\xE7Wa\x07\xE7a\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x81R` \x01\x90\x81R` \x01_ _\x83\x83\x81Q\x81\x10a\x08\x12Wa\x08\x12a\x14\x0CV[` \x02` \x01\x01Q` \x01Q\x81R` \x01\x90\x81R` \x01_ _\x90Ua\t\x1AV[`\x02\x82\x82\x81Q\x81\x10a\x08GWa\x08Ga\x14\x0CV[` \x02` \x01\x01Q``\x01Q`\x02\x81\x11\x15a\x08dWa\x08da\x13\xF8V[\x14\x80a\x08\x9EWP`\x01\x82\x82\x81Q\x81\x10a\x08\x7FWa\x08\x7Fa\x14\x0CV[` \x02` \x01\x01Q``\x01Q`\x02\x81\x11\x15a\x08\x9CWa\x08\x9Ca\x13\xF8V[\x14[\x15a\t\x1AWa\t\x1A\x82\x82\x81Q\x81\x10a\x08\xB8Wa\x08\xB8a\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x08\xD5Wa\x08\xD5a\x14\x0CV[` \x02` \x01\x01Q` \x01Q\x84\x84\x81Q\x81\x10a\x08\xF3Wa\x08\xF3a\x14\x0CV[` \x02` \x01\x01Q`@\x01Q_\x92\x83R`\t` \x90\x81R`@\x80\x85 \x93\x85R\x92\x90R\x91 UV[`\x01\x01a\x07\x94V[_[\x81Q\x81\x10\x15a\x06\x12W_\x82\x82\x81Q\x81\x10a\t@Wa\t@a\x14\x0CV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\t]Wa\t]a\x13\xF8V[\x03a\t\x9FW`\x08_\x83\x83\x81Q\x81\x10a\twWa\twa\x14\x0CV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01QQ\x82R\x81\x01\x91\x90\x91R`@\x01_\x90\x81 \x81\x81U`\x01\x01Ua\n\x8EV[`\x02\x82\x82\x81Q\x81\x10a\t\xB3Wa\t\xB3a\x14\x0CV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\t\xD0Wa\t\xD0a\x13\xF8V[\x14\x80a\n\nWP`\x01\x82\x82\x81Q\x81\x10a\t\xEBWa\t\xEBa\x14\x0CV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\n\x08Wa\n\x08a\x13\xF8V[\x14[\x15a\n\x8EWa\n\x8E\x82\x82\x81Q\x81\x10a\n$Wa\n$a\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\nAWa\nAa\x14\x0CV[` \x02` \x01\x01Q` \x01Q\x84\x84\x81Q\x81\x10a\n_Wa\n_a\x14\x0CV[` \x02` \x01\x01Q`@\x01Q\x85\x85\x81Q\x81\x10a\n}Wa\n}a\x14\x0CV[` \x02` \x01\x01Q``\x01Qa\n\xB5V[`\x01\x01a\t$V[`\x05\x81\x81T\x81\x10a\n\xA5W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`@\x80Q``\x81\x01\x82R\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x80\x86\x01\x91\x82R\x92\x84\x16\x85\x83\x01\x90\x81R_\x96\x87R`\x08\x90\x93R\x94 \x92Q\x83U\x92Q\x92Q\x81\x16`\x01`\x80\x1B\x02\x92\x16\x91\x90\x91\x17`\x01\x90\x91\x01UV[`\x02\x80Ta\x0B\x14\x90a\x12\xBBV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x0B@\x90a\x12\xBBV[\x80\x15a\x0B\x8BW\x80`\x1F\x10a\x0BbWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x0B\x8BV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x0BnW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[`@\x80Q``\x81\x01\x82R\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x80\x86\x01\x91\x82R\x92\x84\x16\x85\x83\x01\x90\x81R_\x97\x88R`\n\x84R\x82\x88 \x96\x88R\x95\x90\x92R\x90\x94 \x91Q\x82U\x92Q\x91Q\x83\x16`\x01`\x80\x1B\x02\x91\x90\x92\x16\x17`\x01\x90\x91\x01UV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C%Wa\x0C%a\x0B\xEEV[`@R\x90V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C%Wa\x0C%a\x0B\xEEV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C%Wa\x0C%a\x0B\xEEV[`@Q`\xA0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C%Wa\x0C%a\x0B\xEEV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C\xBDWa\x0C\xBDa\x0B\xEEV[`@R\x91\x90PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0C\xDBW_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x0C\xF3W_\x80\xFD[\x845\x80\x15\x15\x81\x14a\r\x02W_\x80\xFD[\x93P` \x85\x81\x015\x93P`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\r&W_\x80\xFD[\x81\x88\x01\x91P\x88`\x1F\x83\x01\x12a\r9W_\x80\xFD[\x815\x81\x81\x11\x15a\rKWa\rKa\x0B\xEEV[a\r]`\x1F\x82\x01`\x1F\x19\x16\x85\x01a\x0C\x94V[\x91P\x80\x82R\x89\x84\x82\x85\x01\x01\x11\x15a\rrW_\x80\xFD[\x80\x84\x84\x01\x85\x84\x017_\x84\x82\x84\x01\x01RP\x80\x94PPPPa\r\x94``\x86\x01a\x0C\xC5V[\x90P\x92\x95\x91\x94P\x92PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\r\xB8Wa\r\xB8a\x0B\xEEV[P`\x05\x1B` \x01\x90V[`\x01`\x01`\x80\x1B\x03\x81\x16\x81\x14a\r\xD6W_\x80\xFD[PV[\x805`\x03\x81\x10a\x0C\xDBW_\x80\xFD[_` \x80\x83\x85\x03\x12\x15a\r\xF8W_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\x0EW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0E\x1EW_\x80\xFD[\x805a\x0E1a\x0E,\x82a\r\x9FV[a\x0C\x94V[\x81\x81R`\xC0\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a\x0EOW_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a\x0E\xCEW\x80\x85\x8A\x03\x12\x15a\x0EjW_\x80\xFD[a\x0Era\x0C\x02V[\x855\x81R\x86\x86\x015\x87\x82\x01R`@\x80\x87\x015\x90\x82\x01R``\x80\x87\x015a\x0E\x97\x81a\r\xC2V[\x90\x82\x01R`\x80\x86\x81\x015a\x0E\xAA\x81a\r\xC2V[\x90\x82\x01R`\xA0a\x0E\xBB\x87\x82\x01a\r\xD9V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a\x0ETV[P\x97\x96PPPPPPPV[_` \x80\x83\x85\x03\x12\x15a\x0E\xEBW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\x01W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0F\x11W_\x80\xFD[\x805a\x0F\x1Fa\x0E,\x82a\r\x9FV[\x81\x81R``\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a\x0F=W_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a\x0E\xCEW\x80\x85\x8A\x03\x12\x15a\x0FXW_\x80\xFD[a\x0F`a\x0C+V[\x855\x81Ra\x0Fo\x87\x87\x01a\x0C\xC5V[\x87\x82\x01R`@a\x0F\x80\x81\x88\x01a\r\xD9V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a\x0FBV[_\x80`@\x83\x85\x03\x12\x15a\x0F\xA4W_\x80\xFD[\x825\x91Pa\x0F\xB4` \x84\x01a\x0C\xC5V[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x0F\xCDW_\x80\xFD[P5\x91\x90PV[_``\x82\x84\x03\x12\x15a\x0F\xE4W_\x80\xFD[P\x91\x90PV[_` \x80\x83\x85\x03\x12\x15a\x0F\xFBW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\x11W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x10!W_\x80\xFD[\x805a\x10/a\x0E,\x82a\r\x9FV[\x81\x81R`\x07\x91\x90\x91\x1B\x82\x01\x83\x01\x90\x83\x81\x01\x90\x87\x83\x11\x15a\x10MW_\x80\xFD[\x92\x84\x01\x92[\x82\x84\x10\x15a\x10\xAAW`\x80\x84\x89\x03\x12\x15a\x10iW_\x80\xFD[a\x10qa\x0CNV[\x845\x81R\x85\x85\x015\x86\x82\x01R`@\x80\x86\x015\x90\x82\x01R``a\x10\x94\x81\x87\x01a\r\xD9V[\x90\x82\x01R\x82R`\x80\x93\x90\x93\x01\x92\x90\x84\x01\x90a\x10RV[\x97\x96PPPPPPPV[_\x80_``\x84\x86\x03\x12\x15a\x10\xC7W_\x80\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[_` \x80\x83\x85\x03\x12\x15a\x10\xEFW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\x05W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x11\x15W_\x80\xFD[\x805a\x11#a\x0E,\x82a\r\x9FV[\x81\x81R`\xA0\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a\x11AW_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a\x0E\xCEW\x80\x85\x8A\x03\x12\x15a\x11\\W_\x80\xFD[a\x11da\x0CqV[\x855\x81R\x86\x86\x015\x87\x82\x01R`@\x80\x87\x015a\x11\x7F\x81a\r\xC2V[\x90\x82\x01R``\x86\x81\x015a\x11\x92\x81a\r\xC2V[\x90\x82\x01R`\x80a\x11\xA3\x87\x82\x01a\r\xD9V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a\x11FV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x11\xC9W_\x80\xFD[\x845\x93P` \x85\x015\x92P`@\x85\x015a\x11\xE2\x81a\r\xC2V[\x91P``\x85\x015a\x11\xF2\x81a\r\xC2V[\x93\x96\x92\x95P\x90\x93PPV[_\x80`@\x83\x85\x03\x12\x15a\x12\x0EW_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_` \x80\x83R\x83Q\x80` \x85\x01R_[\x81\x81\x10\x15a\x12IW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x12-V[P_`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x12}W_\x80\xFD[\x855\x94P` \x86\x015\x93P`@\x86\x015\x92P``\x86\x015a\x12\x9D\x81a\r\xC2V[\x91P`\x80\x86\x015a\x12\xAD\x81a\r\xC2V[\x80\x91PP\x92\x95P\x92\x95\x90\x93PV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x12\xCFW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0F\xE4WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[`\x1F\x82\x11\x15a\x07\x8DW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x13\x12WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x131W_\x81U`\x01\x01a\x13\x1EV[PPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13RWa\x13Ra\x0B\xEEV[a\x13f\x81a\x13`\x84Ta\x12\xBBV[\x84a\x12\xEDV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x13\x99W_\x84\x15a\x13\x82WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x13\xF0V[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x13\xC7W\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x13\xA8V[P\x85\x82\x10\x15a\x13\xE4W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x815\x81U` \x82\x015a\x142\x81a\r\xC2V[`@\x83\x015a\x14@\x81a\r\xC2V[`\x01`\x01`\x80\x1B\x03\x19\x81`\x80\x1B\x16`\x01`\x01`\x80\x1B\x03\x83\x16\x17`\x01\x84\x01UPPPPV\xFE\xA2dipfsX\"\x12 h|o\xE6\xE2e\xAA\xBEb@N\x89\xB3\x9F\x88<\x05\xF4\x92+zJ\x13\x8FRs\xC7\x12\xC7B\xEFOdsolcC\0\x08\x18\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061013d575f3560e01c80638026de31116100b4578063a5d666a911610079578063a5d666a91461035d578063c6a7f0fe14610372578063c8af3aa614610385578063d15ec85114610398578063ead18400146103da578063f25d54f5146103fc575f80fd5b80638026de311461027357806385b6489f1461028657806388dfddc6146102f057806396dc9a411461032a578063a314150f14610354575f80fd5b80633e70166e116101055780633e70166e146101d45780633e9060c7146101e75780634cf5a94a146101fa57806351976fc8146102235780636987b1fb146102365780636cc014de14610257575f80fd5b80630200225c1461014157806302e3003a146101565780630c1616c9146101695780631c1343151461017c5780632ae426861461018f575b5f80fd5b61015461014f366004610ce0565b61040f565b005b610154610164366004610de7565b610453565b610154610177366004610eda565b610616565b61015461018a366004610f93565b610753565b6101b761019d366004610fbd565b60046020525f90815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101546101e2366004610fd4565b610780565b6101546101f5366004610fea565b610792565b6101546102083660046110b5565b5f928352600960209081526040808520938552929052912055565b6101546102313660046110de565b610922565b610249610244366004610fbd565b610a96565b6040519081526020016101cb565b5f546102639060ff1681565b60405190151581526020016101cb565b6101546102813660046111b6565b610ab5565b6102cb6102943660046111fd565b600a60209081525f9283526040808420909152908252902080546001909101546001600160801b0380821691600160801b90041683565b604080519384526001600160801b0392831660208501529116908201526060016101cb565b6102cb6102fe366004610fbd565b60086020525f9081526040902080546001909101546001600160801b0380821691600160801b90041683565b6102496103383660046111fd565b600960209081525f928352604080842090915290825290205481565b61024960015481565b610365610b07565b6040516101cb919061121d565b610154610380366004611269565b610b93565b6003546101b7906001600160a01b031681565b6101546103a6366004610fbd565b600580546001810182555f919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b6006546007546102cb91906001600160801b0380821691600160801b90041683565b61015461040a366004610fbd565b600155565b5f805460ff19168515151790556001839055600261042d8382611338565b50600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b5f5b8151811015610612575f8282815181106104715761047161140c565b602002602001015160a00151600281111561048e5761048e6113f8565b036104fd57600a5f8383815181106104a8576104a861140c565b60200260200101515f015181526020019081526020015f205f8383815181106104d3576104d361140c565b60209081029190910181015181015182528101919091526040015f9081208181556001015561060a565b60028282815181106105115761051161140c565b602002602001015160a00151600281111561052e5761052e6113f8565b1480610568575060018282815181106105495761054961140c565b602002602001015160a001516002811115610566576105666113f8565b145b1561060a5761060a8282815181106105825761058261140c565b60200260200101515f015183838151811061059f5761059f61140c565b6020026020010151602001518484815181106105bd576105bd61140c565b6020026020010151604001518585815181106105db576105db61140c565b6020026020010151606001518686815181106105f9576105f961140c565b602002602001015160800151610b93565b600101610455565b5050565b5f5b8151811015610612575f8282815181106106345761063461140c565b6020026020010151604001516002811115610651576106516113f8565b036106985760045f83838151811061066b5761066b61140c565b6020908102919091018101515182528101919091526040015f2080546001600160a01b031916905561074b565b60028282815181106106ac576106ac61140c565b60200260200101516040015160028111156106c9576106c96113f8565b1480610703575060018282815181106106e4576106e461140c565b6020026020010151604001516002811115610701576107016113f8565b145b1561074b5761074b82828151811061071d5761071d61140c565b60200260200101515f015183838151811061073a5761073a61140c565b602002602001015160200151610753565b600101610618565b5f9182526004602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b80600661078d8282611420565b505050565b5f5b8151811015610612575f8282815181106107b0576107b061140c565b60200260200101516060015160028111156107cd576107cd6113f8565b036108335760095f8383815181106107e7576107e761140c565b60200260200101515f015181526020019081526020015f205f8383815181106108125761081261140c565b60200260200101516020015181526020019081526020015f205f905561091a565b60028282815181106108475761084761140c565b6020026020010151606001516002811115610864576108646113f8565b148061089e5750600182828151811061087f5761087f61140c565b602002602001015160600151600281111561089c5761089c6113f8565b145b1561091a5761091a8282815181106108b8576108b861140c565b60200260200101515f01518383815181106108d5576108d561140c565b6020026020010151602001518484815181106108f3576108f361140c565b6020026020010151604001515f928352600960209081526040808520938552929052912055565b600101610794565b5f5b8151811015610612575f8282815181106109405761094061140c565b602002602001015160800151600281111561095d5761095d6113f8565b0361099f5760085f8383815181106109775761097761140c565b6020908102919091018101515182528101919091526040015f90812081815560010155610a8e565b60028282815181106109b3576109b361140c565b60200260200101516080015160028111156109d0576109d06113f8565b1480610a0a575060018282815181106109eb576109eb61140c565b6020026020010151608001516002811115610a0857610a086113f8565b145b15610a8e57610a8e828281518110610a2457610a2461140c565b60200260200101515f0151838381518110610a4157610a4161140c565b602002602001015160200151848481518110610a5f57610a5f61140c565b602002602001015160400151858581518110610a7d57610a7d61140c565b602002602001015160600151610ab5565b600101610924565b60058181548110610aa5575f80fd5b5f91825260209091200154905081565b604080516060810182529384526001600160801b0392831660208086019182529284168583019081525f9687526008909352942092518355925192518116600160801b02921691909117600190910155565b60028054610b14906112bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610b40906112bb565b8015610b8b5780601f10610b6257610100808354040283529160200191610b8b565b820191905f5260205f20905b815481529060010190602001808311610b6e57829003601f168201915b505050505081565b604080516060810182529384526001600160801b0392831660208086019182529284168583019081525f978852600a84528288209688529590925290942091518255925191518316600160801b029190921617600190910155565b634e487b7160e01b5f52604160045260245ffd5b60405160c0810167ffffffffffffffff81118282101715610c2557610c25610bee565b60405290565b6040516060810167ffffffffffffffff81118282101715610c2557610c25610bee565b6040516080810167ffffffffffffffff81118282101715610c2557610c25610bee565b60405160a0810167ffffffffffffffff81118282101715610c2557610c25610bee565b604051601f8201601f1916810167ffffffffffffffff81118282101715610cbd57610cbd610bee565b604052919050565b80356001600160a01b0381168114610cdb575f80fd5b919050565b5f805f8060808587031215610cf3575f80fd5b84358015158114610d02575f80fd5b93506020858101359350604086013567ffffffffffffffff80821115610d26575f80fd5b818801915088601f830112610d39575f80fd5b813581811115610d4b57610d4b610bee565b610d5d601f8201601f19168501610c94565b91508082528984828501011115610d72575f80fd5b80848401858401375f84828401015250809450505050610d9460608601610cc5565b905092959194509250565b5f67ffffffffffffffff821115610db857610db8610bee565b5060051b60200190565b6001600160801b0381168114610dd6575f80fd5b50565b803560038110610cdb575f80fd5b5f6020808385031215610df8575f80fd5b823567ffffffffffffffff811115610e0e575f80fd5b8301601f81018513610e1e575f80fd5b8035610e31610e2c82610d9f565b610c94565b81815260c09182028301840191848201919088841115610e4f575f80fd5b938501935b83851015610ece5780858a031215610e6a575f80fd5b610e72610c02565b85358152868601358782015260408087013590820152606080870135610e9781610dc2565b90820152608086810135610eaa81610dc2565b9082015260a0610ebb878201610dd9565b9082015283529384019391850191610e54565b50979650505050505050565b5f6020808385031215610eeb575f80fd5b823567ffffffffffffffff811115610f01575f80fd5b8301601f81018513610f11575f80fd5b8035610f1f610e2c82610d9f565b81815260609182028301840191848201919088841115610f3d575f80fd5b938501935b83851015610ece5780858a031215610f58575f80fd5b610f60610c2b565b85358152610f6f878701610cc5565b878201526040610f80818801610dd9565b9082015283529384019391850191610f42565b5f8060408385031215610fa4575f80fd5b82359150610fb460208401610cc5565b90509250929050565b5f60208284031215610fcd575f80fd5b5035919050565b5f60608284031215610fe4575f80fd5b50919050565b5f6020808385031215610ffb575f80fd5b823567ffffffffffffffff811115611011575f80fd5b8301601f81018513611021575f80fd5b803561102f610e2c82610d9f565b81815260079190911b8201830190838101908783111561104d575f80fd5b928401925b828410156110aa5760808489031215611069575f80fd5b611071610c4e565b843581528585013586820152604080860135908201526060611094818701610dd9565b9082015282526080939093019290840190611052565b979650505050505050565b5f805f606084860312156110c7575f80fd5b505081359360208301359350604090920135919050565b5f60208083850312156110ef575f80fd5b823567ffffffffffffffff811115611105575f80fd5b8301601f81018513611115575f80fd5b8035611123610e2c82610d9f565b81815260a09182028301840191848201919088841115611141575f80fd5b938501935b83851015610ece5780858a03121561115c575f80fd5b611164610c71565b85358152868601358782015260408087013561117f81610dc2565b9082015260608681013561119281610dc2565b9082015260806111a3878201610dd9565b9082015283529384019391850191611146565b5f805f80608085870312156111c9575f80fd5b843593506020850135925060408501356111e281610dc2565b915060608501356111f281610dc2565b939692955090935050565b5f806040838503121561120e575f80fd5b50508035926020909101359150565b5f602080835283518060208501525f5b818110156112495785810183015185820160400152820161122d565b505f604082860101526040601f19601f8301168501019250505092915050565b5f805f805f60a0868803121561127d575f80fd5b853594506020860135935060408601359250606086013561129d81610dc2565b915060808601356112ad81610dc2565b809150509295509295909350565b600181811c908216806112cf57607f821691505b602082108103610fe457634e487b7160e01b5f52602260045260245ffd5b601f82111561078d57805f5260205f20601f840160051c810160208510156113125750805b601f840160051c820191505b81811015611331575f815560010161131e565b5050505050565b815167ffffffffffffffff81111561135257611352610bee565b6113668161136084546112bb565b846112ed565b602080601f831160018114611399575f84156113825750858301515b5f19600386901b1c1916600185901b1785556113f0565b5f85815260208120601f198616915b828110156113c7578886015182559484019460019091019084016113a8565b50858210156113e457878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b81358155602082013561143281610dc2565b604083013561144081610dc2565b6001600160801b03198160801b166001600160801b0383161760018401555050505056fea2646970667358221220687c6fe6e265aabe62404e89b39f883c05f4922b7a4a138f5273c712c742ef4f64736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x01=W_5`\xE0\x1C\x80c\x80&\xDE1\x11a\0\xB4W\x80c\xA5\xD6f\xA9\x11a\0yW\x80c\xA5\xD6f\xA9\x14a\x03]W\x80c\xC6\xA7\xF0\xFE\x14a\x03rW\x80c\xC8\xAF:\xA6\x14a\x03\x85W\x80c\xD1^\xC8Q\x14a\x03\x98W\x80c\xEA\xD1\x84\0\x14a\x03\xDAW\x80c\xF2]T\xF5\x14a\x03\xFCW_\x80\xFD[\x80c\x80&\xDE1\x14a\x02sW\x80c\x85\xB6H\x9F\x14a\x02\x86W\x80c\x88\xDF\xDD\xC6\x14a\x02\xF0W\x80c\x96\xDC\x9AA\x14a\x03*W\x80c\xA3\x14\x15\x0F\x14a\x03TW_\x80\xFD[\x80c>p\x16n\x11a\x01\x05W\x80c>p\x16n\x14a\x01\xD4W\x80c>\x90`\xC7\x14a\x01\xE7W\x80cL\xF5\xA9J\x14a\x01\xFAW\x80cQ\x97o\xC8\x14a\x02#W\x80ci\x87\xB1\xFB\x14a\x026W\x80cl\xC0\x14\xDE\x14a\x02WW_\x80\xFD[\x80c\x02\0\"\\\x14a\x01AW\x80c\x02\xE3\0:\x14a\x01VW\x80c\x0C\x16\x16\xC9\x14a\x01iW\x80c\x1C\x13C\x15\x14a\x01|W\x80c*\xE4&\x86\x14a\x01\x8FW[_\x80\xFD[a\x01Ta\x01O6`\x04a\x0C\xE0V[a\x04\x0FV[\0[a\x01Ta\x01d6`\x04a\r\xE7V[a\x04SV[a\x01Ta\x01w6`\x04a\x0E\xDAV[a\x06\x16V[a\x01Ta\x01\x8A6`\x04a\x0F\x93V[a\x07SV[a\x01\xB7a\x01\x9D6`\x04a\x0F\xBDV[`\x04` R_\x90\x81R`@\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01Ta\x01\xE26`\x04a\x0F\xD4V[a\x07\x80V[a\x01Ta\x01\xF56`\x04a\x0F\xEAV[a\x07\x92V[a\x01Ta\x02\x086`\x04a\x10\xB5V[_\x92\x83R`\t` \x90\x81R`@\x80\x85 \x93\x85R\x92\x90R\x91 UV[a\x01Ta\x0216`\x04a\x10\xDEV[a\t\"V[a\x02Ia\x02D6`\x04a\x0F\xBDV[a\n\x96V[`@Q\x90\x81R` \x01a\x01\xCBV[_Ta\x02c\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01\xCBV[a\x01Ta\x02\x816`\x04a\x11\xB6V[a\n\xB5V[a\x02\xCBa\x02\x946`\x04a\x11\xFDV[`\n` \x90\x81R_\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 \x80T`\x01\x90\x91\x01T`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[`@\x80Q\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x85\x01R\x91\x16\x90\x82\x01R``\x01a\x01\xCBV[a\x02\xCBa\x02\xFE6`\x04a\x0F\xBDV[`\x08` R_\x90\x81R`@\x90 \x80T`\x01\x90\x91\x01T`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[a\x02Ia\x0386`\x04a\x11\xFDV[`\t` \x90\x81R_\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T\x81V[a\x02I`\x01T\x81V[a\x03ea\x0B\x07V[`@Qa\x01\xCB\x91\x90a\x12\x1DV[a\x01Ta\x03\x806`\x04a\x12iV[a\x0B\x93V[`\x03Ta\x01\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01Ta\x03\xA66`\x04a\x0F\xBDV[`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[`\x06T`\x07Ta\x02\xCB\x91\x90`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[a\x01Ta\x04\n6`\x04a\x0F\xBDV[`\x01UV[_\x80T`\xFF\x19\x16\x85\x15\x15\x17\x90U`\x01\x83\x90U`\x02a\x04-\x83\x82a\x138V[P`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPPPV[_[\x81Q\x81\x10\x15a\x06\x12W_\x82\x82\x81Q\x81\x10a\x04qWa\x04qa\x14\x0CV[` \x02` \x01\x01Q`\xA0\x01Q`\x02\x81\x11\x15a\x04\x8EWa\x04\x8Ea\x13\xF8V[\x03a\x04\xFDW`\n_\x83\x83\x81Q\x81\x10a\x04\xA8Wa\x04\xA8a\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x81R` \x01\x90\x81R` \x01_ _\x83\x83\x81Q\x81\x10a\x04\xD3Wa\x04\xD3a\x14\x0CV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01Q\x81\x01Q\x82R\x81\x01\x91\x90\x91R`@\x01_\x90\x81 \x81\x81U`\x01\x01Ua\x06\nV[`\x02\x82\x82\x81Q\x81\x10a\x05\x11Wa\x05\x11a\x14\x0CV[` \x02` \x01\x01Q`\xA0\x01Q`\x02\x81\x11\x15a\x05.Wa\x05.a\x13\xF8V[\x14\x80a\x05hWP`\x01\x82\x82\x81Q\x81\x10a\x05IWa\x05Ia\x14\x0CV[` \x02` \x01\x01Q`\xA0\x01Q`\x02\x81\x11\x15a\x05fWa\x05fa\x13\xF8V[\x14[\x15a\x06\nWa\x06\n\x82\x82\x81Q\x81\x10a\x05\x82Wa\x05\x82a\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x05\x9FWa\x05\x9Fa\x14\x0CV[` \x02` \x01\x01Q` \x01Q\x84\x84\x81Q\x81\x10a\x05\xBDWa\x05\xBDa\x14\x0CV[` \x02` \x01\x01Q`@\x01Q\x85\x85\x81Q\x81\x10a\x05\xDBWa\x05\xDBa\x14\x0CV[` \x02` \x01\x01Q``\x01Q\x86\x86\x81Q\x81\x10a\x05\xF9Wa\x05\xF9a\x14\x0CV[` \x02` \x01\x01Q`\x80\x01Qa\x0B\x93V[`\x01\x01a\x04UV[PPV[_[\x81Q\x81\x10\x15a\x06\x12W_\x82\x82\x81Q\x81\x10a\x064Wa\x064a\x14\x0CV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x06QWa\x06Qa\x13\xF8V[\x03a\x06\x98W`\x04_\x83\x83\x81Q\x81\x10a\x06kWa\x06ka\x14\x0CV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01QQ\x82R\x81\x01\x91\x90\x91R`@\x01_ \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90Ua\x07KV[`\x02\x82\x82\x81Q\x81\x10a\x06\xACWa\x06\xACa\x14\x0CV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x06\xC9Wa\x06\xC9a\x13\xF8V[\x14\x80a\x07\x03WP`\x01\x82\x82\x81Q\x81\x10a\x06\xE4Wa\x06\xE4a\x14\x0CV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x07\x01Wa\x07\x01a\x13\xF8V[\x14[\x15a\x07KWa\x07K\x82\x82\x81Q\x81\x10a\x07\x1DWa\x07\x1Da\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x07:Wa\x07:a\x14\x0CV[` \x02` \x01\x01Q` \x01Qa\x07SV[`\x01\x01a\x06\x18V[_\x91\x82R`\x04` R`@\x90\x91 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90UV[\x80`\x06a\x07\x8D\x82\x82a\x14 V[PPPV[_[\x81Q\x81\x10\x15a\x06\x12W_\x82\x82\x81Q\x81\x10a\x07\xB0Wa\x07\xB0a\x14\x0CV[` \x02` \x01\x01Q``\x01Q`\x02\x81\x11\x15a\x07\xCDWa\x07\xCDa\x13\xF8V[\x03a\x083W`\t_\x83\x83\x81Q\x81\x10a\x07\xE7Wa\x07\xE7a\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x81R` \x01\x90\x81R` \x01_ _\x83\x83\x81Q\x81\x10a\x08\x12Wa\x08\x12a\x14\x0CV[` \x02` \x01\x01Q` \x01Q\x81R` \x01\x90\x81R` \x01_ _\x90Ua\t\x1AV[`\x02\x82\x82\x81Q\x81\x10a\x08GWa\x08Ga\x14\x0CV[` \x02` \x01\x01Q``\x01Q`\x02\x81\x11\x15a\x08dWa\x08da\x13\xF8V[\x14\x80a\x08\x9EWP`\x01\x82\x82\x81Q\x81\x10a\x08\x7FWa\x08\x7Fa\x14\x0CV[` \x02` \x01\x01Q``\x01Q`\x02\x81\x11\x15a\x08\x9CWa\x08\x9Ca\x13\xF8V[\x14[\x15a\t\x1AWa\t\x1A\x82\x82\x81Q\x81\x10a\x08\xB8Wa\x08\xB8a\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x08\xD5Wa\x08\xD5a\x14\x0CV[` \x02` \x01\x01Q` \x01Q\x84\x84\x81Q\x81\x10a\x08\xF3Wa\x08\xF3a\x14\x0CV[` \x02` \x01\x01Q`@\x01Q_\x92\x83R`\t` \x90\x81R`@\x80\x85 \x93\x85R\x92\x90R\x91 UV[`\x01\x01a\x07\x94V[_[\x81Q\x81\x10\x15a\x06\x12W_\x82\x82\x81Q\x81\x10a\t@Wa\t@a\x14\x0CV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\t]Wa\t]a\x13\xF8V[\x03a\t\x9FW`\x08_\x83\x83\x81Q\x81\x10a\twWa\twa\x14\x0CV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01QQ\x82R\x81\x01\x91\x90\x91R`@\x01_\x90\x81 \x81\x81U`\x01\x01Ua\n\x8EV[`\x02\x82\x82\x81Q\x81\x10a\t\xB3Wa\t\xB3a\x14\x0CV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\t\xD0Wa\t\xD0a\x13\xF8V[\x14\x80a\n\nWP`\x01\x82\x82\x81Q\x81\x10a\t\xEBWa\t\xEBa\x14\x0CV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\n\x08Wa\n\x08a\x13\xF8V[\x14[\x15a\n\x8EWa\n\x8E\x82\x82\x81Q\x81\x10a\n$Wa\n$a\x14\x0CV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\nAWa\nAa\x14\x0CV[` \x02` \x01\x01Q` \x01Q\x84\x84\x81Q\x81\x10a\n_Wa\n_a\x14\x0CV[` \x02` \x01\x01Q`@\x01Q\x85\x85\x81Q\x81\x10a\n}Wa\n}a\x14\x0CV[` \x02` \x01\x01Q``\x01Qa\n\xB5V[`\x01\x01a\t$V[`\x05\x81\x81T\x81\x10a\n\xA5W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`@\x80Q``\x81\x01\x82R\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x80\x86\x01\x91\x82R\x92\x84\x16\x85\x83\x01\x90\x81R_\x96\x87R`\x08\x90\x93R\x94 \x92Q\x83U\x92Q\x92Q\x81\x16`\x01`\x80\x1B\x02\x92\x16\x91\x90\x91\x17`\x01\x90\x91\x01UV[`\x02\x80Ta\x0B\x14\x90a\x12\xBBV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x0B@\x90a\x12\xBBV[\x80\x15a\x0B\x8BW\x80`\x1F\x10a\x0BbWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x0B\x8BV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x0BnW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[`@\x80Q``\x81\x01\x82R\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x80\x86\x01\x91\x82R\x92\x84\x16\x85\x83\x01\x90\x81R_\x97\x88R`\n\x84R\x82\x88 \x96\x88R\x95\x90\x92R\x90\x94 \x91Q\x82U\x92Q\x91Q\x83\x16`\x01`\x80\x1B\x02\x91\x90\x92\x16\x17`\x01\x90\x91\x01UV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C%Wa\x0C%a\x0B\xEEV[`@R\x90V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C%Wa\x0C%a\x0B\xEEV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C%Wa\x0C%a\x0B\xEEV[`@Q`\xA0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C%Wa\x0C%a\x0B\xEEV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C\xBDWa\x0C\xBDa\x0B\xEEV[`@R\x91\x90PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0C\xDBW_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x0C\xF3W_\x80\xFD[\x845\x80\x15\x15\x81\x14a\r\x02W_\x80\xFD[\x93P` \x85\x81\x015\x93P`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\r&W_\x80\xFD[\x81\x88\x01\x91P\x88`\x1F\x83\x01\x12a\r9W_\x80\xFD[\x815\x81\x81\x11\x15a\rKWa\rKa\x0B\xEEV[a\r]`\x1F\x82\x01`\x1F\x19\x16\x85\x01a\x0C\x94V[\x91P\x80\x82R\x89\x84\x82\x85\x01\x01\x11\x15a\rrW_\x80\xFD[\x80\x84\x84\x01\x85\x84\x017_\x84\x82\x84\x01\x01RP\x80\x94PPPPa\r\x94``\x86\x01a\x0C\xC5V[\x90P\x92\x95\x91\x94P\x92PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\r\xB8Wa\r\xB8a\x0B\xEEV[P`\x05\x1B` \x01\x90V[`\x01`\x01`\x80\x1B\x03\x81\x16\x81\x14a\r\xD6W_\x80\xFD[PV[\x805`\x03\x81\x10a\x0C\xDBW_\x80\xFD[_` \x80\x83\x85\x03\x12\x15a\r\xF8W_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\x0EW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0E\x1EW_\x80\xFD[\x805a\x0E1a\x0E,\x82a\r\x9FV[a\x0C\x94V[\x81\x81R`\xC0\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a\x0EOW_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a\x0E\xCEW\x80\x85\x8A\x03\x12\x15a\x0EjW_\x80\xFD[a\x0Era\x0C\x02V[\x855\x81R\x86\x86\x015\x87\x82\x01R`@\x80\x87\x015\x90\x82\x01R``\x80\x87\x015a\x0E\x97\x81a\r\xC2V[\x90\x82\x01R`\x80\x86\x81\x015a\x0E\xAA\x81a\r\xC2V[\x90\x82\x01R`\xA0a\x0E\xBB\x87\x82\x01a\r\xD9V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a\x0ETV[P\x97\x96PPPPPPPV[_` \x80\x83\x85\x03\x12\x15a\x0E\xEBW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\x01W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0F\x11W_\x80\xFD[\x805a\x0F\x1Fa\x0E,\x82a\r\x9FV[\x81\x81R``\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a\x0F=W_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a\x0E\xCEW\x80\x85\x8A\x03\x12\x15a\x0FXW_\x80\xFD[a\x0F`a\x0C+V[\x855\x81Ra\x0Fo\x87\x87\x01a\x0C\xC5V[\x87\x82\x01R`@a\x0F\x80\x81\x88\x01a\r\xD9V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a\x0FBV[_\x80`@\x83\x85\x03\x12\x15a\x0F\xA4W_\x80\xFD[\x825\x91Pa\x0F\xB4` \x84\x01a\x0C\xC5V[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x0F\xCDW_\x80\xFD[P5\x91\x90PV[_``\x82\x84\x03\x12\x15a\x0F\xE4W_\x80\xFD[P\x91\x90PV[_` \x80\x83\x85\x03\x12\x15a\x0F\xFBW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\x11W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x10!W_\x80\xFD[\x805a\x10/a\x0E,\x82a\r\x9FV[\x81\x81R`\x07\x91\x90\x91\x1B\x82\x01\x83\x01\x90\x83\x81\x01\x90\x87\x83\x11\x15a\x10MW_\x80\xFD[\x92\x84\x01\x92[\x82\x84\x10\x15a\x10\xAAW`\x80\x84\x89\x03\x12\x15a\x10iW_\x80\xFD[a\x10qa\x0CNV[\x845\x81R\x85\x85\x015\x86\x82\x01R`@\x80\x86\x015\x90\x82\x01R``a\x10\x94\x81\x87\x01a\r\xD9V[\x90\x82\x01R\x82R`\x80\x93\x90\x93\x01\x92\x90\x84\x01\x90a\x10RV[\x97\x96PPPPPPPV[_\x80_``\x84\x86\x03\x12\x15a\x10\xC7W_\x80\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[_` \x80\x83\x85\x03\x12\x15a\x10\xEFW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\x05W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x11\x15W_\x80\xFD[\x805a\x11#a\x0E,\x82a\r\x9FV[\x81\x81R`\xA0\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a\x11AW_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a\x0E\xCEW\x80\x85\x8A\x03\x12\x15a\x11\\W_\x80\xFD[a\x11da\x0CqV[\x855\x81R\x86\x86\x015\x87\x82\x01R`@\x80\x87\x015a\x11\x7F\x81a\r\xC2V[\x90\x82\x01R``\x86\x81\x015a\x11\x92\x81a\r\xC2V[\x90\x82\x01R`\x80a\x11\xA3\x87\x82\x01a\r\xD9V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a\x11FV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x11\xC9W_\x80\xFD[\x845\x93P` \x85\x015\x92P`@\x85\x015a\x11\xE2\x81a\r\xC2V[\x91P``\x85\x015a\x11\xF2\x81a\r\xC2V[\x93\x96\x92\x95P\x90\x93PPV[_\x80`@\x83\x85\x03\x12\x15a\x12\x0EW_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_` \x80\x83R\x83Q\x80` \x85\x01R_[\x81\x81\x10\x15a\x12IW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x12-V[P_`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x12}W_\x80\xFD[\x855\x94P` \x86\x015\x93P`@\x86\x015\x92P``\x86\x015a\x12\x9D\x81a\r\xC2V[\x91P`\x80\x86\x015a\x12\xAD\x81a\r\xC2V[\x80\x91PP\x92\x95P\x92\x95\x90\x93PV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x12\xCFW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0F\xE4WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[`\x1F\x82\x11\x15a\x07\x8DW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x13\x12WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x131W_\x81U`\x01\x01a\x13\x1EV[PPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13RWa\x13Ra\x0B\xEEV[a\x13f\x81a\x13`\x84Ta\x12\xBBV[\x84a\x12\xEDV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x13\x99W_\x84\x15a\x13\x82WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x13\xF0V[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x13\xC7W\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x13\xA8V[P\x85\x82\x10\x15a\x13\xE4W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x815\x81U` \x82\x015a\x142\x81a\r\xC2V[`@\x83\x015a\x14@\x81a\r\xC2V[`\x01`\x01`\x80\x1B\x03\x19\x81`\x80\x1B\x16`\x01`\x01`\x80\x1B\x03\x83\x16\x17`\x01\x84\x01UPPPPV\xFE\xA2dipfsX\"\x12 h|o\xE6\xE2e\xAA\xBEb@N\x89\xB3\x9F\x88<\x05\xF4\x92+zJ\x13\x8FRs\xC7\x12\xC7B\xEFOdsolcC\0\x08\x18\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MappingOperation(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MappingOperation> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::Token<'_>
            {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(self).0
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::abi_encoded_size(
                    self,
                )
            }
        }
        #[automatically_derived]
        impl MappingOperation {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MappingOperation {
            type RustType = u8;
            type Token<'a> =
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> =
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MappingOperation {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::EventTopic>::encode_topic(
                    rust,
                )
            }
        }
    };
    /**```solidity
    struct LargeStruct { uint256 field1; uint128 field2; uint128 field3; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct LargeStruct {
        pub field1: alloy::sol_types::private::primitives::aliases::U256,
        pub field2: u128,
        pub field3: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<128>,
            alloy::sol_types::sol_data::Uint<128>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            u128,
            u128,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<LargeStruct> for UnderlyingRustTuple<'_> {
            fn from(value: LargeStruct) -> Self {
                (value.field1, value.field2, value.field3)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for LargeStruct {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    field1: tuple.0,
                    field2: tuple.1,
                    field3: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for LargeStruct {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for LargeStruct {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.field1,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.field2,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.field3,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for LargeStruct {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for LargeStruct {
            const NAME: &'static str = "LargeStruct";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "LargeStruct(uint256 field1,uint128 field2,uint128 field3)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field1)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field2)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field3)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for LargeStruct {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field1,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field2,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field3,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field1,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field2,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field3,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**```solidity
    struct MappingChange { uint256 key; address value; MappingOperation operation; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MappingChange {
        pub key: alloy::sol_types::private::primitives::aliases::U256,
        pub value: alloy::sol_types::private::Address,
        pub operation: <MappingOperation as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            MappingOperation,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            <MappingOperation as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MappingChange> for UnderlyingRustTuple<'_> {
            fn from(value: MappingChange) -> Self {
                (value.key, value.value, value.operation)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MappingChange {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    key: tuple.0,
                    value: tuple.1,
                    operation: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MappingChange {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MappingChange {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                    <MappingOperation as alloy_sol_types::SolType>::tokenize(&self.operation),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MappingChange {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MappingChange {
            const NAME: &'static str = "MappingChange";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MappingChange(uint256 key,address value,uint8 operation)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.key)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.value,
                        )
                        .0,
                    <MappingOperation as alloy_sol_types::SolType>::eip712_data_word(
                            &self.operation,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MappingChange {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.key)
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.value,
                    )
                    + <MappingOperation as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.operation,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.key, out);
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.value,
                    out,
                );
                <MappingOperation as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.operation,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**```solidity
    struct MappingOfSingleValueMappingsChange { uint256 outerKey; uint256 innerKey; uint256 value; MappingOperation operation; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MappingOfSingleValueMappingsChange {
        pub outerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub innerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub operation: <MappingOperation as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            MappingOperation,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            <MappingOperation as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MappingOfSingleValueMappingsChange> for UnderlyingRustTuple<'_> {
            fn from(value: MappingOfSingleValueMappingsChange) -> Self {
                (value.outerKey, value.innerKey, value.value, value.operation)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MappingOfSingleValueMappingsChange {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    outerKey: tuple.0,
                    innerKey: tuple.1,
                    value: tuple.2,
                    operation: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MappingOfSingleValueMappingsChange {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MappingOfSingleValueMappingsChange {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.outerKey,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.innerKey,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                    <MappingOperation as alloy_sol_types::SolType>::tokenize(&self.operation),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MappingOfSingleValueMappingsChange {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MappingOfSingleValueMappingsChange {
            const NAME: &'static str = "MappingOfSingleValueMappingsChange";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MappingOfSingleValueMappingsChange(uint256 outerKey,uint256 innerKey,uint256 value,uint8 operation)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.outerKey)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.innerKey)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.value)
                        .0,
                    <MappingOperation as alloy_sol_types::SolType>::eip712_data_word(
                            &self.operation,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MappingOfSingleValueMappingsChange {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.outerKey,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.innerKey,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.value)
                    + <MappingOperation as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.operation,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.outerKey,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.innerKey,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.value,
                    out,
                );
                <MappingOperation as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.operation,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**```solidity
    struct MappingOfStructMappingsChange { uint256 outerKey; uint256 innerKey; uint256 field1; uint128 field2; uint128 field3; MappingOperation operation; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MappingOfStructMappingsChange {
        pub outerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub innerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub field1: alloy::sol_types::private::primitives::aliases::U256,
        pub field2: u128,
        pub field3: u128,
        pub operation: <MappingOperation as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<128>,
            alloy::sol_types::sol_data::Uint<128>,
            MappingOperation,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            u128,
            u128,
            <MappingOperation as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MappingOfStructMappingsChange> for UnderlyingRustTuple<'_> {
            fn from(value: MappingOfStructMappingsChange) -> Self {
                (
                    value.outerKey,
                    value.innerKey,
                    value.field1,
                    value.field2,
                    value.field3,
                    value.operation,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MappingOfStructMappingsChange {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    outerKey: tuple.0,
                    innerKey: tuple.1,
                    field1: tuple.2,
                    field2: tuple.3,
                    field3: tuple.4,
                    operation: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MappingOfStructMappingsChange {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MappingOfStructMappingsChange {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.outerKey,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.innerKey,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.field1,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.field2,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.field3,
                    ),
                    <MappingOperation as alloy_sol_types::SolType>::tokenize(&self.operation),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MappingOfStructMappingsChange {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MappingOfStructMappingsChange {
            const NAME: &'static str = "MappingOfStructMappingsChange";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MappingOfStructMappingsChange(uint256 outerKey,uint256 innerKey,uint256 field1,uint128 field2,uint128 field3,uint8 operation)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.outerKey)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.innerKey)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field1)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field2)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field3)
                        .0,
                    <MappingOperation as alloy_sol_types::SolType>::eip712_data_word(
                            &self.operation,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MappingOfStructMappingsChange {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.outerKey,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.innerKey,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field1,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field2,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field3,
                    )
                    + <MappingOperation as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.operation,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.outerKey,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.innerKey,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field1,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field2,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field3,
                    out,
                );
                <MappingOperation as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.operation,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**```solidity
    struct MappingStructChange { uint256 key; uint256 field1; uint128 field2; uint128 field3; MappingOperation operation; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MappingStructChange {
        pub key: alloy::sol_types::private::primitives::aliases::U256,
        pub field1: alloy::sol_types::private::primitives::aliases::U256,
        pub field2: u128,
        pub field3: u128,
        pub operation: <MappingOperation as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<128>,
            alloy::sol_types::sol_data::Uint<128>,
            MappingOperation,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            u128,
            u128,
            <MappingOperation as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MappingStructChange> for UnderlyingRustTuple<'_> {
            fn from(value: MappingStructChange) -> Self {
                (
                    value.key,
                    value.field1,
                    value.field2,
                    value.field3,
                    value.operation,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MappingStructChange {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    key: tuple.0,
                    field1: tuple.1,
                    field2: tuple.2,
                    field3: tuple.3,
                    operation: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MappingStructChange {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MappingStructChange {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.field1,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.field2,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.field3,
                    ),
                    <MappingOperation as alloy_sol_types::SolType>::tokenize(&self.operation),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MappingStructChange {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MappingStructChange {
            const NAME: &'static str = "MappingStructChange";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MappingStructChange(uint256 key,uint256 field1,uint128 field2,uint128 field3,uint8 operation)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.key)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field1)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field2)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field3)
                        .0,
                    <MappingOperation as alloy_sol_types::SolType>::eip712_data_word(
                            &self.operation,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MappingStructChange {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.key)
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field1,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field2,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field3,
                    )
                    + <MappingOperation as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.operation,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.key, out);
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field1,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field2,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field3,
                    out,
                );
                <MappingOperation as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.operation,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**Function with signature `addToArray(uint256)` and selector `0xd15ec851`.
    ```solidity
    function addToArray(uint256 value) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToArrayCall {
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`addToArray(uint256)`](addToArrayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToArrayReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToArrayCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToArrayCall) -> Self {
                    (value.value,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToArrayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { value: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToArrayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addToArrayReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToArrayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToArrayCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToArrayReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToArray(uint256)";
            const SELECTOR: [u8; 4] = [209u8, 94u8, 200u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `arr1(uint256)` and selector `0x6987b1fb`.
    ```solidity
    function arr1(uint256) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct arr1Call {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`arr1(uint256)`](arr1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct arr1Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arr1Call> for UnderlyingRustTuple<'_> {
                fn from(value: arr1Call) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arr1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arr1Return> for UnderlyingRustTuple<'_> {
                fn from(value: arr1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arr1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for arr1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = arr1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "arr1(uint256)";
            const SELECTOR: [u8; 4] = [105u8, 135u8, 177u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `changeMapping((uint256,uint256,uint256,uint128,uint128,uint8)[])` and selector `0x02e3003a`.
    ```solidity
    function changeMapping(MappingOfStructMappingsChange[] memory changes) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeMapping_0Call {
        pub changes: alloy::sol_types::private::Vec<
            <MappingOfStructMappingsChange as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`changeMapping((uint256,uint256,uint256,uint128,uint128,uint8)[])`](changeMapping_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeMapping_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<MappingOfStructMappingsChange>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <MappingOfStructMappingsChange as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMapping_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: changeMapping_0Call) -> Self {
                    (value.changes,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMapping_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { changes: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMapping_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: changeMapping_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMapping_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for changeMapping_0Call {
            type Parameters<'a> =
                (alloy::sol_types::sol_data::Array<MappingOfStructMappingsChange>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = changeMapping_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "changeMapping((uint256,uint256,uint256,uint128,uint128,uint8)[])";
            const SELECTOR: [u8; 4] = [2u8, 227u8, 0u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Array<
                    MappingOfStructMappingsChange,
                > as alloy_sol_types::SolType>::tokenize(
                    &self.changes
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `changeMapping((uint256,address,uint8)[])` and selector `0x0c1616c9`.
    ```solidity
    function changeMapping(MappingChange[] memory changes) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeMapping_1Call {
        pub changes:
            alloy::sol_types::private::Vec<<MappingChange as alloy::sol_types::SolType>::RustType>,
    }
    ///Container type for the return parameters of the [`changeMapping((uint256,address,uint8)[])`](changeMapping_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeMapping_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<MappingChange>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <MappingChange as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMapping_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: changeMapping_1Call) -> Self {
                    (value.changes,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMapping_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { changes: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMapping_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: changeMapping_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMapping_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for changeMapping_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<MappingChange>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = changeMapping_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "changeMapping((uint256,address,uint8)[])";
            const SELECTOR: [u8; 4] = [12u8, 22u8, 22u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        MappingChange,
                    > as alloy_sol_types::SolType>::tokenize(&self.changes),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `changeMapping((uint256,uint256,uint256,uint8)[])` and selector `0x3e9060c7`.
    ```solidity
    function changeMapping(MappingOfSingleValueMappingsChange[] memory changes) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeMapping_2Call {
        pub changes: alloy::sol_types::private::Vec<
            <MappingOfSingleValueMappingsChange as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`changeMapping((uint256,uint256,uint256,uint8)[])`](changeMapping_2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeMapping_2Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<MappingOfSingleValueMappingsChange>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <MappingOfSingleValueMappingsChange as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMapping_2Call> for UnderlyingRustTuple<'_> {
                fn from(value: changeMapping_2Call) -> Self {
                    (value.changes,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMapping_2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { changes: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMapping_2Return> for UnderlyingRustTuple<'_> {
                fn from(value: changeMapping_2Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMapping_2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for changeMapping_2Call {
            type Parameters<'a> =
                (alloy::sol_types::sol_data::Array<MappingOfSingleValueMappingsChange>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = changeMapping_2Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "changeMapping((uint256,uint256,uint256,uint8)[])";
            const SELECTOR: [u8; 4] = [62u8, 144u8, 96u8, 199u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Array<
                    MappingOfSingleValueMappingsChange,
                > as alloy_sol_types::SolType>::tokenize(
                    &self.changes
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `changeMapping((uint256,uint256,uint128,uint128,uint8)[])` and selector `0x51976fc8`.
    ```solidity
    function changeMapping(MappingStructChange[] memory changes) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeMapping_3Call {
        pub changes: alloy::sol_types::private::Vec<
            <MappingStructChange as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`changeMapping((uint256,uint256,uint128,uint128,uint8)[])`](changeMapping_3Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct changeMapping_3Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<MappingStructChange>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <MappingStructChange as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMapping_3Call> for UnderlyingRustTuple<'_> {
                fn from(value: changeMapping_3Call) -> Self {
                    (value.changes,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMapping_3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { changes: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMapping_3Return> for UnderlyingRustTuple<'_> {
                fn from(value: changeMapping_3Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMapping_3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for changeMapping_3Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<MappingStructChange>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = changeMapping_3Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "changeMapping((uint256,uint256,uint128,uint128,uint8)[])";
            const SELECTOR: [u8; 4] = [81u8, 151u8, 111u8, 200u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        MappingStructChange,
                    > as alloy_sol_types::SolType>::tokenize(&self.changes),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `m1(uint256)` and selector `0x2ae42686`.
    ```solidity
    function m1(uint256) external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct m1Call {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`m1(uint256)`](m1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct m1Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<m1Call> for UnderlyingRustTuple<'_> {
                fn from(value: m1Call) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for m1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<m1Return> for UnderlyingRustTuple<'_> {
                fn from(value: m1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for m1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for m1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = m1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "m1(uint256)";
            const SELECTOR: [u8; 4] = [42u8, 228u8, 38u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `mappingOfSingleValueMappings(uint256,uint256)` and selector `0x96dc9a41`.
    ```solidity
    function mappingOfSingleValueMappings(uint256, uint256) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mappingOfSingleValueMappingsCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`mappingOfSingleValueMappings(uint256,uint256)`](mappingOfSingleValueMappingsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mappingOfSingleValueMappingsReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mappingOfSingleValueMappingsCall> for UnderlyingRustTuple<'_> {
                fn from(value: mappingOfSingleValueMappingsCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mappingOfSingleValueMappingsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mappingOfSingleValueMappingsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mappingOfSingleValueMappingsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mappingOfSingleValueMappingsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mappingOfSingleValueMappingsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = mappingOfSingleValueMappingsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mappingOfSingleValueMappings(uint256,uint256)";
            const SELECTOR: [u8; 4] = [150u8, 220u8, 154u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `mappingOfStructMappings(uint256,uint256)` and selector `0x85b6489f`.
    ```solidity
    function mappingOfStructMappings(uint256, uint256) external view returns (uint256 field1, uint128 field2, uint128 field3);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mappingOfStructMappingsCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`mappingOfStructMappings(uint256,uint256)`](mappingOfStructMappingsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mappingOfStructMappingsReturn {
        pub field1: alloy::sol_types::private::primitives::aliases::U256,
        pub field2: u128,
        pub field3: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mappingOfStructMappingsCall> for UnderlyingRustTuple<'_> {
                fn from(value: mappingOfStructMappingsCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mappingOfStructMappingsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                u128,
                u128,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mappingOfStructMappingsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mappingOfStructMappingsReturn) -> Self {
                    (value.field1, value.field2, value.field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mappingOfStructMappingsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        field1: tuple.0,
                        field2: tuple.1,
                        field3: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mappingOfStructMappingsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = mappingOfStructMappingsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mappingOfStructMappings(uint256,uint256)";
            const SELECTOR: [u8; 4] = [133u8, 182u8, 72u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s1()` and selector `0x6cc014de`.
    ```solidity
    function s1() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct s1Call {}
    ///Container type for the return parameters of the [`s1()`](s1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct s1Return {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s1Call> for UnderlyingRustTuple<'_> {
                fn from(value: s1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s1Return> for UnderlyingRustTuple<'_> {
                fn from(value: s1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s1()";
            const SELECTOR: [u8; 4] = [108u8, 192u8, 20u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s2()` and selector `0xa314150f`.
    ```solidity
    function s2() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct s2Call {}
    ///Container type for the return parameters of the [`s2()`](s2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct s2Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s2Call> for UnderlyingRustTuple<'_> {
                fn from(value: s2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s2Return> for UnderlyingRustTuple<'_> {
                fn from(value: s2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s2()";
            const SELECTOR: [u8; 4] = [163u8, 20u8, 21u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s3()` and selector `0xa5d666a9`.
    ```solidity
    function s3() external view returns (string memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct s3Call {}
    ///Container type for the return parameters of the [`s3()`](s3Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct s3Return {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s3Call> for UnderlyingRustTuple<'_> {
                fn from(value: s3Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s3Return> for UnderlyingRustTuple<'_> {
                fn from(value: s3Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s3Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s3()";
            const SELECTOR: [u8; 4] = [165u8, 214u8, 102u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s4()` and selector `0xc8af3aa6`.
    ```solidity
    function s4() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct s4Call {}
    ///Container type for the return parameters of the [`s4()`](s4Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct s4Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s4Call> for UnderlyingRustTuple<'_> {
                fn from(value: s4Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s4Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s4Return> for UnderlyingRustTuple<'_> {
                fn from(value: s4Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s4Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s4Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s4Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s4()";
            const SELECTOR: [u8; 4] = [200u8, 175u8, 58u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setMapping(uint256,address)` and selector `0x1c134315`.
    ```solidity
    function setMapping(uint256 key, address value) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMappingCall {
        pub key: alloy::sol_types::private::primitives::aliases::U256,
        pub value: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setMapping(uint256,address)`](setMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMappingReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingCall> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingCall) -> Self {
                    (value.key, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        key: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMappingCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMappingReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMapping(uint256,address)";
            const SELECTOR: [u8; 4] = [28u8, 19u8, 67u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setMappingOfSingleValueMappings(uint256,uint256,uint256)` and selector `0x4cf5a94a`.
    ```solidity
    function setMappingOfSingleValueMappings(uint256 outerKey, uint256 innerKey, uint256 value) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMappingOfSingleValueMappingsCall {
        pub outerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub innerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setMappingOfSingleValueMappings(uint256,uint256,uint256)`](setMappingOfSingleValueMappingsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMappingOfSingleValueMappingsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingOfSingleValueMappingsCall> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingOfSingleValueMappingsCall) -> Self {
                    (value.outerKey, value.innerKey, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingOfSingleValueMappingsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        outerKey: tuple.0,
                        innerKey: tuple.1,
                        value: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingOfSingleValueMappingsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingOfSingleValueMappingsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingOfSingleValueMappingsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMappingOfSingleValueMappingsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMappingOfSingleValueMappingsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "setMappingOfSingleValueMappings(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [76u8, 245u8, 169u8, 74u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.outerKey,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.innerKey,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setMappingOfStructMappings(uint256,uint256,uint256,uint128,uint128)` and selector `0xc6a7f0fe`.
    ```solidity
    function setMappingOfStructMappings(uint256 outerKey, uint256 innerKey, uint256 field1, uint128 field2, uint128 field3) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMappingOfStructMappingsCall {
        pub outerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub innerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub field1: alloy::sol_types::private::primitives::aliases::U256,
        pub field2: u128,
        pub field3: u128,
    }
    ///Container type for the return parameters of the [`setMappingOfStructMappings(uint256,uint256,uint256,uint128,uint128)`](setMappingOfStructMappingsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMappingOfStructMappingsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                u128,
                u128,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingOfStructMappingsCall> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingOfStructMappingsCall) -> Self {
                    (
                        value.outerKey,
                        value.innerKey,
                        value.field1,
                        value.field2,
                        value.field3,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingOfStructMappingsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        outerKey: tuple.0,
                        innerKey: tuple.1,
                        field1: tuple.2,
                        field2: tuple.3,
                        field3: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingOfStructMappingsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingOfStructMappingsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingOfStructMappingsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMappingOfStructMappingsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMappingOfStructMappingsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "setMappingOfStructMappings(uint256,uint256,uint256,uint128,uint128)";
            const SELECTOR: [u8; 4] = [198u8, 167u8, 240u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.outerKey,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.innerKey,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.field1,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.field2,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.field3,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setMappingStruct(uint256,uint256,uint128,uint128)` and selector `0x8026de31`.
    ```solidity
    function setMappingStruct(uint256 _key, uint256 _field1, uint128 _field2, uint128 _field3) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMappingStructCall {
        pub _key: alloy::sol_types::private::primitives::aliases::U256,
        pub _field1: alloy::sol_types::private::primitives::aliases::U256,
        pub _field2: u128,
        pub _field3: u128,
    }
    ///Container type for the return parameters of the [`setMappingStruct(uint256,uint256,uint128,uint128)`](setMappingStructCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMappingStructReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                u128,
                u128,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingStructCall> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingStructCall) -> Self {
                    (value._key, value._field1, value._field2, value._field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingStructCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _key: tuple.0,
                        _field1: tuple.1,
                        _field2: tuple.2,
                        _field3: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingStructReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingStructReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingStructReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMappingStructCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMappingStructReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMappingStruct(uint256,uint256,uint128,uint128)";
            const SELECTOR: [u8; 4] = [128u8, 38u8, 222u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._key,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._field1,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self._field2,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self._field3,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setS2(uint256)` and selector `0xf25d54f5`.
    ```solidity
    function setS2(uint256 newS2) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setS2Call {
        pub newS2: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setS2(uint256)`](setS2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setS2Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setS2Call> for UnderlyingRustTuple<'_> {
                fn from(value: setS2Call) -> Self {
                    (value.newS2,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setS2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newS2: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setS2Return> for UnderlyingRustTuple<'_> {
                fn from(value: setS2Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setS2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setS2Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setS2Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setS2(uint256)";
            const SELECTOR: [u8; 4] = [242u8, 93u8, 84u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newS2,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setSimpleStruct((uint256,uint128,uint128))` and selector `0x3e70166e`.
    ```solidity
    function setSimpleStruct(LargeStruct memory input) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSimpleStructCall {
        pub input: <LargeStruct as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`setSimpleStruct((uint256,uint128,uint128))`](setSimpleStructCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSimpleStructReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (LargeStruct,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (<LargeStruct as alloy::sol_types::SolType>::RustType,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimpleStructCall> for UnderlyingRustTuple<'_> {
                fn from(value: setSimpleStructCall) -> Self {
                    (value.input,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimpleStructCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { input: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimpleStructReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setSimpleStructReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimpleStructReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSimpleStructCall {
            type Parameters<'a> = (LargeStruct,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSimpleStructReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSimpleStruct((uint256,uint128,uint128))";
            const SELECTOR: [u8; 4] = [62u8, 112u8, 22u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<LargeStruct as alloy_sol_types::SolType>::tokenize(
                    &self.input,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setSimples(bool,uint256,string,address)` and selector `0x0200225c`.
    ```solidity
    function setSimples(bool newS1, uint256 newS2, string memory newS3, address newS4) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSimplesCall {
        pub newS1: bool,
        pub newS2: alloy::sol_types::private::primitives::aliases::U256,
        pub newS3: alloy::sol_types::private::String,
        pub newS4: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setSimples(bool,uint256,string,address)`](setSimplesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSimplesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimplesCall> for UnderlyingRustTuple<'_> {
                fn from(value: setSimplesCall) -> Self {
                    (value.newS1, value.newS2, value.newS3, value.newS4)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimplesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newS1: tuple.0,
                        newS2: tuple.1,
                        newS3: tuple.2,
                        newS4: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimplesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setSimplesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimplesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSimplesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSimplesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSimples(bool,uint256,string,address)";
            const SELECTOR: [u8; 4] = [2u8, 0u8, 34u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.newS1,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newS2,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newS3,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newS4,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `simpleStruct()` and selector `0xead18400`.
    ```solidity
    function simpleStruct() external view returns (uint256 field1, uint128 field2, uint128 field3);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simpleStructCall {}
    ///Container type for the return parameters of the [`simpleStruct()`](simpleStructCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct simpleStructReturn {
        pub field1: alloy::sol_types::private::primitives::aliases::U256,
        pub field2: u128,
        pub field3: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simpleStructCall> for UnderlyingRustTuple<'_> {
                fn from(value: simpleStructCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for simpleStructCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                u128,
                u128,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simpleStructReturn> for UnderlyingRustTuple<'_> {
                fn from(value: simpleStructReturn) -> Self {
                    (value.field1, value.field2, value.field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for simpleStructReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        field1: tuple.0,
                        field2: tuple.1,
                        field3: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simpleStructCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = simpleStructReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simpleStruct()";
            const SELECTOR: [u8; 4] = [234u8, 209u8, 132u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `structMapping(uint256)` and selector `0x88dfddc6`.
    ```solidity
    function structMapping(uint256) external view returns (uint256 field1, uint128 field2, uint128 field3);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct structMappingCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`structMapping(uint256)`](structMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct structMappingReturn {
        pub field1: alloy::sol_types::private::primitives::aliases::U256,
        pub field2: u128,
        pub field3: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<structMappingCall> for UnderlyingRustTuple<'_> {
                fn from(value: structMappingCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for structMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                u128,
                u128,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<structMappingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: structMappingReturn) -> Self {
                    (value.field1, value.field2, value.field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for structMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        field1: tuple.0,
                        field2: tuple.1,
                        field3: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for structMappingCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = structMappingReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "structMapping(uint256)";
            const SELECTOR: [u8; 4] = [136u8, 223u8, 221u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`Simple`](self) function calls.
    pub enum SimpleCalls {
        addToArray(addToArrayCall),
        arr1(arr1Call),
        changeMapping_0(changeMapping_0Call),
        changeMapping_1(changeMapping_1Call),
        changeMapping_2(changeMapping_2Call),
        changeMapping_3(changeMapping_3Call),
        m1(m1Call),
        mappingOfSingleValueMappings(mappingOfSingleValueMappingsCall),
        mappingOfStructMappings(mappingOfStructMappingsCall),
        s1(s1Call),
        s2(s2Call),
        s3(s3Call),
        s4(s4Call),
        setMapping(setMappingCall),
        setMappingOfSingleValueMappings(setMappingOfSingleValueMappingsCall),
        setMappingOfStructMappings(setMappingOfStructMappingsCall),
        setMappingStruct(setMappingStructCall),
        setS2(setS2Call),
        setSimpleStruct(setSimpleStructCall),
        setSimples(setSimplesCall),
        simpleStruct(simpleStructCall),
        structMapping(structMappingCall),
    }
    #[automatically_derived]
    impl SimpleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [2u8, 0u8, 34u8, 92u8],
            [2u8, 227u8, 0u8, 58u8],
            [12u8, 22u8, 22u8, 201u8],
            [28u8, 19u8, 67u8, 21u8],
            [42u8, 228u8, 38u8, 134u8],
            [62u8, 112u8, 22u8, 110u8],
            [62u8, 144u8, 96u8, 199u8],
            [76u8, 245u8, 169u8, 74u8],
            [81u8, 151u8, 111u8, 200u8],
            [105u8, 135u8, 177u8, 251u8],
            [108u8, 192u8, 20u8, 222u8],
            [128u8, 38u8, 222u8, 49u8],
            [133u8, 182u8, 72u8, 159u8],
            [136u8, 223u8, 221u8, 198u8],
            [150u8, 220u8, 154u8, 65u8],
            [163u8, 20u8, 21u8, 15u8],
            [165u8, 214u8, 102u8, 169u8],
            [198u8, 167u8, 240u8, 254u8],
            [200u8, 175u8, 58u8, 166u8],
            [209u8, 94u8, 200u8, 81u8],
            [234u8, 209u8, 132u8, 0u8],
            [242u8, 93u8, 84u8, 245u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SimpleCalls {
        const NAME: &'static str = "SimpleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 22usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addToArray(_) => <addToArrayCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::arr1(_) => <arr1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::changeMapping_0(_) => {
                    <changeMapping_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::changeMapping_1(_) => {
                    <changeMapping_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::changeMapping_2(_) => {
                    <changeMapping_2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::changeMapping_3(_) => {
                    <changeMapping_3Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::m1(_) => <m1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::mappingOfSingleValueMappings(_) => {
                    <mappingOfSingleValueMappingsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::mappingOfStructMappings(_) => {
                    <mappingOfStructMappingsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::s1(_) => <s1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s2(_) => <s2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s3(_) => <s3Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s4(_) => <s4Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::setMapping(_) => <setMappingCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setMappingOfSingleValueMappings(_) => {
                    <setMappingOfSingleValueMappingsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMappingOfStructMappings(_) => {
                    <setMappingOfStructMappingsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMappingStruct(_) => {
                    <setMappingStructCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setS2(_) => <setS2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::setSimpleStruct(_) => {
                    <setSimpleStructCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSimples(_) => <setSimplesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::simpleStruct(_) => <simpleStructCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::structMapping(_) => <structMappingCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8], bool) -> alloy_sol_types::Result<SimpleCalls>] = &[
                {
                    fn setSimples(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setSimplesCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::setSimples)
                    }
                    setSimples
                },
                {
                    fn changeMapping_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <changeMapping_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::changeMapping_0)
                    }
                    changeMapping_0
                },
                {
                    fn changeMapping_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <changeMapping_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::changeMapping_1)
                    }
                    changeMapping_1
                },
                {
                    fn setMapping(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::setMapping)
                    }
                    setMapping
                },
                {
                    fn m1(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <m1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::m1)
                    }
                    m1
                },
                {
                    fn setSimpleStruct(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setSimpleStructCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::setSimpleStruct)
                    }
                    setSimpleStruct
                },
                {
                    fn changeMapping_2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <changeMapping_2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::changeMapping_2)
                    }
                    changeMapping_2
                },
                {
                    fn setMappingOfSingleValueMappings(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setMappingOfSingleValueMappingsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::setMappingOfSingleValueMappings)
                    }
                    setMappingOfSingleValueMappings
                },
                {
                    fn changeMapping_3(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <changeMapping_3Call as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::changeMapping_3)
                    }
                    changeMapping_3
                },
                {
                    fn arr1(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <arr1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::arr1)
                    }
                    arr1
                },
                {
                    fn s1(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s1)
                    }
                    s1
                },
                {
                    fn setMappingStruct(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setMappingStructCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::setMappingStruct)
                    }
                    setMappingStruct
                },
                {
                    fn mappingOfStructMappings(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <mappingOfStructMappingsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::mappingOfStructMappings)
                    }
                    mappingOfStructMappings
                },
                {
                    fn structMapping(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <structMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::structMapping)
                    }
                    structMapping
                },
                {
                    fn mappingOfSingleValueMappings(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <mappingOfSingleValueMappingsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::mappingOfSingleValueMappings)
                    }
                    mappingOfSingleValueMappings
                },
                {
                    fn s2(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s2Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s2)
                    }
                    s2
                },
                {
                    fn s3(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s3Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s3)
                    }
                    s3
                },
                {
                    fn setMappingOfStructMappings(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setMappingOfStructMappingsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::setMappingOfStructMappings)
                    }
                    setMappingOfStructMappings
                },
                {
                    fn s4(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s4Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s4)
                    }
                    s4
                },
                {
                    fn addToArray(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <addToArrayCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::addToArray)
                    }
                    addToArray
                },
                {
                    fn simpleStruct(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <simpleStructCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::simpleStruct)
                    }
                    simpleStruct
                },
                {
                    fn setS2(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <setS2Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::setS2)
                    }
                    setS2
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addToArray(inner) => {
                    <addToArrayCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::arr1(inner) => {
                    <arr1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::changeMapping_0(inner) => {
                    <changeMapping_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::changeMapping_1(inner) => {
                    <changeMapping_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::changeMapping_2(inner) => {
                    <changeMapping_2Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::changeMapping_3(inner) => {
                    <changeMapping_3Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::m1(inner) => {
                    <m1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::mappingOfSingleValueMappings(inner) => {
                    <mappingOfSingleValueMappingsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::mappingOfStructMappings(inner) => {
                    <mappingOfStructMappingsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::s1(inner) => {
                    <s1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::s2(inner) => {
                    <s2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::s3(inner) => {
                    <s3Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::s4(inner) => {
                    <s4Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setMapping(inner) => {
                    <setMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setMappingOfSingleValueMappings(inner) => {
                    <setMappingOfSingleValueMappingsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMappingOfStructMappings(inner) => {
                    <setMappingOfStructMappingsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMappingStruct(inner) => {
                    <setMappingStructCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setS2(inner) => {
                    <setS2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setSimpleStruct(inner) => {
                    <setSimpleStructCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setSimples(inner) => {
                    <setSimplesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::simpleStruct(inner) => {
                    <simpleStructCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::structMapping(inner) => {
                    <structMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addToArray(inner) => {
                    <addToArrayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::arr1(inner) => {
                    <arr1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::changeMapping_0(inner) => {
                    <changeMapping_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::changeMapping_1(inner) => {
                    <changeMapping_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::changeMapping_2(inner) => {
                    <changeMapping_2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::changeMapping_3(inner) => {
                    <changeMapping_3Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::m1(inner) => {
                    <m1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::mappingOfSingleValueMappings(inner) => {
                    <mappingOfSingleValueMappingsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::mappingOfStructMappings(inner) => {
                    <mappingOfStructMappingsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::s1(inner) => {
                    <s1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::s2(inner) => {
                    <s2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::s3(inner) => {
                    <s3Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::s4(inner) => {
                    <s4Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setMapping(inner) => {
                    <setMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMappingOfSingleValueMappings(inner) => {
                    <setMappingOfSingleValueMappingsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMappingOfStructMappings(inner) => {
                    <setMappingOfStructMappingsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMappingStruct(inner) => {
                    <setMappingStructCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setS2(inner) => {
                    <setS2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setSimpleStruct(inner) => {
                    <setSimpleStructCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setSimples(inner) => {
                    <setSimplesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::simpleStruct(inner) => {
                    <simpleStructCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::structMapping(inner) => {
                    <structMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Simple`](self) contract instance.

    See the [wrapper's documentation](`SimpleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SimpleInstance<T, P, N> {
        SimpleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<SimpleInstance<T, P, N>>> {
        SimpleInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SimpleInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Simple`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`Simple`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SimpleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SimpleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SimpleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SimpleInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`Simple`](self) contract instance.

        See the [wrapper's documentation](`SimpleInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(provider: P) -> alloy_contract::Result<SimpleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SimpleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SimpleInstance<T, P, N> {
            SimpleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SimpleInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addToArray`] function.
        pub fn addToArray(
            &self,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToArrayCall, N> {
            self.call_builder(&addToArrayCall { value })
        }
        ///Creates a new call builder for the [`arr1`] function.
        pub fn arr1(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, arr1Call, N> {
            self.call_builder(&arr1Call { _0 })
        }
        ///Creates a new call builder for the [`changeMapping_0`] function.
        pub fn changeMapping_0(
            &self,
            changes: alloy::sol_types::private::Vec<
                <MappingOfStructMappingsChange as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, changeMapping_0Call, N> {
            self.call_builder(&changeMapping_0Call { changes })
        }
        ///Creates a new call builder for the [`changeMapping_1`] function.
        pub fn changeMapping_1(
            &self,
            changes: alloy::sol_types::private::Vec<
                <MappingChange as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, changeMapping_1Call, N> {
            self.call_builder(&changeMapping_1Call { changes })
        }
        ///Creates a new call builder for the [`changeMapping_2`] function.
        pub fn changeMapping_2(
            &self,
            changes: alloy::sol_types::private::Vec<
                <MappingOfSingleValueMappingsChange as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, changeMapping_2Call, N> {
            self.call_builder(&changeMapping_2Call { changes })
        }
        ///Creates a new call builder for the [`changeMapping_3`] function.
        pub fn changeMapping_3(
            &self,
            changes: alloy::sol_types::private::Vec<
                <MappingStructChange as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, changeMapping_3Call, N> {
            self.call_builder(&changeMapping_3Call { changes })
        }
        ///Creates a new call builder for the [`m1`] function.
        pub fn m1(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, m1Call, N> {
            self.call_builder(&m1Call { _0 })
        }
        ///Creates a new call builder for the [`mappingOfSingleValueMappings`] function.
        pub fn mappingOfSingleValueMappings(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, mappingOfSingleValueMappingsCall, N> {
            self.call_builder(&mappingOfSingleValueMappingsCall { _0, _1 })
        }
        ///Creates a new call builder for the [`mappingOfStructMappings`] function.
        pub fn mappingOfStructMappings(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, mappingOfStructMappingsCall, N> {
            self.call_builder(&mappingOfStructMappingsCall { _0, _1 })
        }
        ///Creates a new call builder for the [`s1`] function.
        pub fn s1(&self) -> alloy_contract::SolCallBuilder<T, &P, s1Call, N> {
            self.call_builder(&s1Call {})
        }
        ///Creates a new call builder for the [`s2`] function.
        pub fn s2(&self) -> alloy_contract::SolCallBuilder<T, &P, s2Call, N> {
            self.call_builder(&s2Call {})
        }
        ///Creates a new call builder for the [`s3`] function.
        pub fn s3(&self) -> alloy_contract::SolCallBuilder<T, &P, s3Call, N> {
            self.call_builder(&s3Call {})
        }
        ///Creates a new call builder for the [`s4`] function.
        pub fn s4(&self) -> alloy_contract::SolCallBuilder<T, &P, s4Call, N> {
            self.call_builder(&s4Call {})
        }
        ///Creates a new call builder for the [`setMapping`] function.
        pub fn setMapping(
            &self,
            key: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMappingCall, N> {
            self.call_builder(&setMappingCall { key, value })
        }
        ///Creates a new call builder for the [`setMappingOfSingleValueMappings`] function.
        pub fn setMappingOfSingleValueMappings(
            &self,
            outerKey: alloy::sol_types::private::primitives::aliases::U256,
            innerKey: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMappingOfSingleValueMappingsCall, N> {
            self.call_builder(&setMappingOfSingleValueMappingsCall {
                outerKey,
                innerKey,
                value,
            })
        }
        ///Creates a new call builder for the [`setMappingOfStructMappings`] function.
        pub fn setMappingOfStructMappings(
            &self,
            outerKey: alloy::sol_types::private::primitives::aliases::U256,
            innerKey: alloy::sol_types::private::primitives::aliases::U256,
            field1: alloy::sol_types::private::primitives::aliases::U256,
            field2: u128,
            field3: u128,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMappingOfStructMappingsCall, N> {
            self.call_builder(&setMappingOfStructMappingsCall {
                outerKey,
                innerKey,
                field1,
                field2,
                field3,
            })
        }
        ///Creates a new call builder for the [`setMappingStruct`] function.
        pub fn setMappingStruct(
            &self,
            _key: alloy::sol_types::private::primitives::aliases::U256,
            _field1: alloy::sol_types::private::primitives::aliases::U256,
            _field2: u128,
            _field3: u128,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMappingStructCall, N> {
            self.call_builder(&setMappingStructCall {
                _key,
                _field1,
                _field2,
                _field3,
            })
        }
        ///Creates a new call builder for the [`setS2`] function.
        pub fn setS2(
            &self,
            newS2: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setS2Call, N> {
            self.call_builder(&setS2Call { newS2 })
        }
        ///Creates a new call builder for the [`setSimpleStruct`] function.
        pub fn setSimpleStruct(
            &self,
            input: <LargeStruct as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSimpleStructCall, N> {
            self.call_builder(&setSimpleStructCall { input })
        }
        ///Creates a new call builder for the [`setSimples`] function.
        pub fn setSimples(
            &self,
            newS1: bool,
            newS2: alloy::sol_types::private::primitives::aliases::U256,
            newS3: alloy::sol_types::private::String,
            newS4: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSimplesCall, N> {
            self.call_builder(&setSimplesCall {
                newS1,
                newS2,
                newS3,
                newS4,
            })
        }
        ///Creates a new call builder for the [`simpleStruct`] function.
        pub fn simpleStruct(&self) -> alloy_contract::SolCallBuilder<T, &P, simpleStructCall, N> {
            self.call_builder(&simpleStructCall {})
        }
        ///Creates a new call builder for the [`structMapping`] function.
        pub fn structMapping(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, structMappingCall, N> {
            self.call_builder(&structMappingCall { _0 })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SimpleInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
