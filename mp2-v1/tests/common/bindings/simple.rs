/**

Generated by the following Solidity interface...
```solidity
interface Simple {
    type MappingOperation is uint8;
    struct MappingChange {
        uint256 key;
        address value;
        MappingOperation operation;
    }
    struct MappingStructChange {
        uint256 key;
        uint256 field1;
        uint128 field2;
        uint128 field3;
        MappingOperation operation;
    }

    function addToArray(uint256 value) external;
    function arr1(uint256) external view returns (uint256);
    function changeMapping(MappingChange[] memory changes) external;
    function changeMappingStruct(MappingStructChange[] memory changes) external;
    function m1(uint256) external view returns (address);
    function mappingOfMappings(uint256, uint256) external view returns (uint256 field1, uint128 field2, uint128 field3);
    function s1() external view returns (bool);
    function s2() external view returns (uint256);
    function s3() external view returns (string memory);
    function s4() external view returns (address);
    function setMapping(uint256 key, address value) external;
    function setMappingStruct(uint256 _key, uint256 _field1, uint128 _field2, uint128 _field3) external;
    function setS2(uint256 newS2) external;
    function setSimpleStruct(uint256 _field1, uint128 _field2, uint128 _field3) external;
    function setSimples(bool newS1, uint256 newS2, string memory newS3, address newS4) external;
    function simpleStruct() external view returns (uint256 field1, uint128 field2, uint128 field3);
    function structMapping(uint256) external view returns (uint256 field1, uint128 field2, uint128 field3);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "addToArray",
    "inputs": [
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "arr1",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "changeMapping",
    "inputs": [
      {
        "name": "changes",
        "type": "tuple[]",
        "internalType": "struct Simple.MappingChange[]",
        "components": [
          {
            "name": "key",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "value",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "operation",
            "type": "uint8",
            "internalType": "enum Simple.MappingOperation"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "changeMappingStruct",
    "inputs": [
      {
        "name": "changes",
        "type": "tuple[]",
        "internalType": "struct Simple.MappingStructChange[]",
        "components": [
          {
            "name": "key",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "field1",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "field2",
            "type": "uint128",
            "internalType": "uint128"
          },
          {
            "name": "field3",
            "type": "uint128",
            "internalType": "uint128"
          },
          {
            "name": "operation",
            "type": "uint8",
            "internalType": "enum Simple.MappingOperation"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "m1",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mappingOfMappings",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s3",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s4",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setMapping",
    "inputs": [
      {
        "name": "key",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMappingStruct",
    "inputs": [
      {
        "name": "_key",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "_field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setS2",
    "inputs": [
      {
        "name": "newS2",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSimpleStruct",
    "inputs": [
      {
        "name": "_field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "_field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSimples",
    "inputs": [
      {
        "name": "newS1",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "newS2",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "newS3",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "newS4",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "simpleStruct",
    "inputs": [],
    "outputs": [
      {
        "name": "field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "structMapping",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod Simple {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50610d998061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610106575f3560e01c80638026de311161009e578063c7bf4db51161006e578063c7bf4db5146102c9578063c8af3aa6146102dc578063d15ec851146102ef578063ead1840014610331578063f25d54f514610353575f80fd5b80638026de311461025e57806388dfddc614610271578063a314150f146102ab578063a5d666a9146102b4575f80fd5b80631c134315116100d95780631c134315146101ce5780632ae42686146101e15780636987b1fb146102215780636cc014de14610242575f80fd5b80630200225c1461010a5780630a4d04f71461011f5780630c1616c91461018e5780631417a4f0146101a1575b5f80fd5b61011d610118366004610835565b610366565b005b61016461012d3660046108f4565b600960209081525f9283526040808420909152908252902080546001909101546001600160801b0380821691600160801b90041683565b604080519384526001600160801b0392831660208501529116908201526060015b60405180910390f35b61011d61019c366004610945565b6103aa565b61011d6101af366004610a25565b6006929092556001600160801b03918216600160801b02911617600755565b61011d6101dc366004610a5e565b6104eb565b6102096101ef366004610a88565b60046020525f90815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610185565b61023461022f366004610a88565b610518565b604051908152602001610185565b5f5461024e9060ff1681565b6040519015158152602001610185565b61011d61026c366004610a9f565b610537565b61016461027f366004610a88565b60086020525f9081526040902080546001909101546001600160801b0380821691600160801b90041683565b61023460015481565b6102bc610589565b6040516101859190610ad7565b61011d6102d7366004610b23565b610615565b600354610209906001600160a01b031681565b61011d6102fd366004610a88565b600580546001810182555f919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b60065460075461016491906001600160801b0380821691600160801b90041683565b61011d610361366004610a88565b600155565b5f805460ff1916851515179055600183905560026103848382610c7b565b50600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b5f5b81518110156104e7575f8282815181106103c8576103c8610d4f565b60200260200101516040015160028111156103e5576103e5610d3b565b0361042c5760045f8383815181106103ff576103ff610d4f565b6020908102919091018101515182528101919091526040015f2080546001600160a01b03191690556104df565b600282828151811061044057610440610d4f565b602002602001015160400151600281111561045d5761045d610d3b565b14806104975750600182828151811061047857610478610d4f565b602002602001015160400151600281111561049557610495610d3b565b145b156104df576104df8282815181106104b1576104b1610d4f565b60200260200101515f01518383815181106104ce576104ce610d4f565b6020026020010151602001516104eb565b6001016103ac565b5050565b5f9182526004602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60058181548110610527575f80fd5b5f91825260209091200154905081565b604080516060810182529384526001600160801b0392831660208086019182529284168583019081525f9687526008909352942092518355925192518116600160801b02921691909117600190910155565b6002805461059690610bf7565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290610bf7565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b505050505081565b5f5b81518110156104e7575f82828151811061063357610633610d4f565b602002602001015160800151600281111561065057610650610d3b565b036106925760085f83838151811061066a5761066a610d4f565b6020908102919091018101515182528101919091526040015f90812081815560010155610781565b60028282815181106106a6576106a6610d4f565b60200260200101516080015160028111156106c3576106c3610d3b565b14806106fd575060018282815181106106de576106de610d4f565b60200260200101516080015160028111156106fb576106fb610d3b565b145b156107815761078182828151811061071757610717610d4f565b60200260200101515f015183838151811061073457610734610d4f565b60200260200101516020015184848151811061075257610752610d4f565b60200260200101516040015185858151811061077057610770610d4f565b602002602001015160600151610537565b600101610617565b634e487b7160e01b5f52604160045260245ffd5b6040516060810167ffffffffffffffff811182821017156107c0576107c0610789565b60405290565b60405160a0810167ffffffffffffffff811182821017156107c0576107c0610789565b604051601f8201601f1916810167ffffffffffffffff8111828210171561081257610812610789565b604052919050565b80356001600160a01b0381168114610830575f80fd5b919050565b5f805f8060808587031215610848575f80fd5b84358015158114610857575f80fd5b93506020858101359350604086013567ffffffffffffffff8082111561087b575f80fd5b818801915088601f83011261088e575f80fd5b8135818111156108a0576108a0610789565b6108b2601f8201601f191685016107e9565b915080825289848285010111156108c7575f80fd5b80848401858401375f848284010152508094505050506108e96060860161081a565b905092959194509250565b5f8060408385031215610905575f80fd5b50508035926020909101359150565b5f67ffffffffffffffff82111561092d5761092d610789565b5060051b60200190565b803560038110610830575f80fd5b5f6020808385031215610956575f80fd5b823567ffffffffffffffff81111561096c575f80fd5b8301601f8101851361097c575f80fd5b803561098f61098a82610914565b6107e9565b818152606091820283018401918482019190888411156109ad575f80fd5b938501935b83851015610a035780858a0312156109c8575f80fd5b6109d061079d565b853581526109df87870161081a565b8782015260406109f0818801610937565b90820152835293840193918501916109b2565b50979650505050505050565b80356001600160801b0381168114610830575f80fd5b5f805f60608486031215610a37575f80fd5b83359250610a4760208501610a0f565b9150610a5560408501610a0f565b90509250925092565b5f8060408385031215610a6f575f80fd5b82359150610a7f6020840161081a565b90509250929050565b5f60208284031215610a98575f80fd5b5035919050565b5f805f8060808587031215610ab2575f80fd5b8435935060208501359250610ac960408601610a0f565b91506108e960608601610a0f565b5f602080835283518060208501525f5b81811015610b0357858101830151858201604001528201610ae7565b505f604082860101526040601f19601f8301168501019250505092915050565b5f6020808385031215610b34575f80fd5b823567ffffffffffffffff811115610b4a575f80fd5b8301601f81018513610b5a575f80fd5b8035610b6861098a82610914565b81815260a09182028301840191848201919088841115610b86575f80fd5b938501935b83851015610a035780858a031215610ba1575f80fd5b610ba96107c6565b8535815286860135878201526040610bc2818801610a0f565b908201526060610bd3878201610a0f565b908201526080610be4878201610937565b9082015283529384019391850191610b8b565b600181811c90821680610c0b57607f821691505b602082108103610c2957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610c7657805f5260205f20601f840160051c81016020851015610c545750805b601f840160051c820191505b81811015610c73575f8155600101610c60565b50505b505050565b815167ffffffffffffffff811115610c9557610c95610789565b610ca981610ca38454610bf7565b84610c2f565b602080601f831160018114610cdc575f8415610cc55750858301515b5f19600386901b1c1916600185901b178555610d33565b5f85815260208120601f198616915b82811015610d0a57888601518255948401946001909101908401610ceb565b5085821015610d2757878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffdfea26469706673582212206590d836561d8340d2d83d5cd063d2c751fdea336b0e3302a990dd0600d171d464736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[Pa\r\x99\x80a\0\x1D_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x01\x06W_5`\xE0\x1C\x80c\x80&\xDE1\x11a\0\x9EW\x80c\xC7\xBFM\xB5\x11a\0nW\x80c\xC7\xBFM\xB5\x14a\x02\xC9W\x80c\xC8\xAF:\xA6\x14a\x02\xDCW\x80c\xD1^\xC8Q\x14a\x02\xEFW\x80c\xEA\xD1\x84\0\x14a\x031W\x80c\xF2]T\xF5\x14a\x03SW_\x80\xFD[\x80c\x80&\xDE1\x14a\x02^W\x80c\x88\xDF\xDD\xC6\x14a\x02qW\x80c\xA3\x14\x15\x0F\x14a\x02\xABW\x80c\xA5\xD6f\xA9\x14a\x02\xB4W_\x80\xFD[\x80c\x1C\x13C\x15\x11a\0\xD9W\x80c\x1C\x13C\x15\x14a\x01\xCEW\x80c*\xE4&\x86\x14a\x01\xE1W\x80ci\x87\xB1\xFB\x14a\x02!W\x80cl\xC0\x14\xDE\x14a\x02BW_\x80\xFD[\x80c\x02\0\"\\\x14a\x01\nW\x80c\nM\x04\xF7\x14a\x01\x1FW\x80c\x0C\x16\x16\xC9\x14a\x01\x8EW\x80c\x14\x17\xA4\xF0\x14a\x01\xA1W[_\x80\xFD[a\x01\x1Da\x01\x186`\x04a\x085V[a\x03fV[\0[a\x01da\x01-6`\x04a\x08\xF4V[`\t` \x90\x81R_\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 \x80T`\x01\x90\x91\x01T`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[`@\x80Q\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x85\x01R\x91\x16\x90\x82\x01R``\x01[`@Q\x80\x91\x03\x90\xF3[a\x01\x1Da\x01\x9C6`\x04a\tEV[a\x03\xAAV[a\x01\x1Da\x01\xAF6`\x04a\n%V[`\x06\x92\x90\x92U`\x01`\x01`\x80\x1B\x03\x91\x82\x16`\x01`\x80\x1B\x02\x91\x16\x17`\x07UV[a\x01\x1Da\x01\xDC6`\x04a\n^V[a\x04\xEBV[a\x02\ta\x01\xEF6`\x04a\n\x88V[`\x04` R_\x90\x81R`@\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x85V[a\x024a\x02/6`\x04a\n\x88V[a\x05\x18V[`@Q\x90\x81R` \x01a\x01\x85V[_Ta\x02N\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01\x85V[a\x01\x1Da\x02l6`\x04a\n\x9FV[a\x057V[a\x01da\x02\x7F6`\x04a\n\x88V[`\x08` R_\x90\x81R`@\x90 \x80T`\x01\x90\x91\x01T`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[a\x024`\x01T\x81V[a\x02\xBCa\x05\x89V[`@Qa\x01\x85\x91\x90a\n\xD7V[a\x01\x1Da\x02\xD76`\x04a\x0B#V[a\x06\x15V[`\x03Ta\x02\t\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01\x1Da\x02\xFD6`\x04a\n\x88V[`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[`\x06T`\x07Ta\x01d\x91\x90`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[a\x01\x1Da\x03a6`\x04a\n\x88V[`\x01UV[_\x80T`\xFF\x19\x16\x85\x15\x15\x17\x90U`\x01\x83\x90U`\x02a\x03\x84\x83\x82a\x0C{V[P`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPPPV[_[\x81Q\x81\x10\x15a\x04\xE7W_\x82\x82\x81Q\x81\x10a\x03\xC8Wa\x03\xC8a\rOV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x03\xE5Wa\x03\xE5a\r;V[\x03a\x04,W`\x04_\x83\x83\x81Q\x81\x10a\x03\xFFWa\x03\xFFa\rOV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01QQ\x82R\x81\x01\x91\x90\x91R`@\x01_ \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90Ua\x04\xDFV[`\x02\x82\x82\x81Q\x81\x10a\x04@Wa\x04@a\rOV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x04]Wa\x04]a\r;V[\x14\x80a\x04\x97WP`\x01\x82\x82\x81Q\x81\x10a\x04xWa\x04xa\rOV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x04\x95Wa\x04\x95a\r;V[\x14[\x15a\x04\xDFWa\x04\xDF\x82\x82\x81Q\x81\x10a\x04\xB1Wa\x04\xB1a\rOV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x04\xCEWa\x04\xCEa\rOV[` \x02` \x01\x01Q` \x01Qa\x04\xEBV[`\x01\x01a\x03\xACV[PPV[_\x91\x82R`\x04` R`@\x90\x91 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x05\x81\x81T\x81\x10a\x05'W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`@\x80Q``\x81\x01\x82R\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x80\x86\x01\x91\x82R\x92\x84\x16\x85\x83\x01\x90\x81R_\x96\x87R`\x08\x90\x93R\x94 \x92Q\x83U\x92Q\x92Q\x81\x16`\x01`\x80\x1B\x02\x92\x16\x91\x90\x91\x17`\x01\x90\x91\x01UV[`\x02\x80Ta\x05\x96\x90a\x0B\xF7V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05\xC2\x90a\x0B\xF7V[\x80\x15a\x06\rW\x80`\x1F\x10a\x05\xE4Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x06\rV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\xF0W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[_[\x81Q\x81\x10\x15a\x04\xE7W_\x82\x82\x81Q\x81\x10a\x063Wa\x063a\rOV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\x06PWa\x06Pa\r;V[\x03a\x06\x92W`\x08_\x83\x83\x81Q\x81\x10a\x06jWa\x06ja\rOV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01QQ\x82R\x81\x01\x91\x90\x91R`@\x01_\x90\x81 \x81\x81U`\x01\x01Ua\x07\x81V[`\x02\x82\x82\x81Q\x81\x10a\x06\xA6Wa\x06\xA6a\rOV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\x06\xC3Wa\x06\xC3a\r;V[\x14\x80a\x06\xFDWP`\x01\x82\x82\x81Q\x81\x10a\x06\xDEWa\x06\xDEa\rOV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\x06\xFBWa\x06\xFBa\r;V[\x14[\x15a\x07\x81Wa\x07\x81\x82\x82\x81Q\x81\x10a\x07\x17Wa\x07\x17a\rOV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x074Wa\x074a\rOV[` \x02` \x01\x01Q` \x01Q\x84\x84\x81Q\x81\x10a\x07RWa\x07Ra\rOV[` \x02` \x01\x01Q`@\x01Q\x85\x85\x81Q\x81\x10a\x07pWa\x07pa\rOV[` \x02` \x01\x01Q``\x01Qa\x057V[`\x01\x01a\x06\x17V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x07\xC0Wa\x07\xC0a\x07\x89V[`@R\x90V[`@Q`\xA0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x07\xC0Wa\x07\xC0a\x07\x89V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x08\x12Wa\x08\x12a\x07\x89V[`@R\x91\x90PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x080W_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x08HW_\x80\xFD[\x845\x80\x15\x15\x81\x14a\x08WW_\x80\xFD[\x93P` \x85\x81\x015\x93P`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x08{W_\x80\xFD[\x81\x88\x01\x91P\x88`\x1F\x83\x01\x12a\x08\x8EW_\x80\xFD[\x815\x81\x81\x11\x15a\x08\xA0Wa\x08\xA0a\x07\x89V[a\x08\xB2`\x1F\x82\x01`\x1F\x19\x16\x85\x01a\x07\xE9V[\x91P\x80\x82R\x89\x84\x82\x85\x01\x01\x11\x15a\x08\xC7W_\x80\xFD[\x80\x84\x84\x01\x85\x84\x017_\x84\x82\x84\x01\x01RP\x80\x94PPPPa\x08\xE9``\x86\x01a\x08\x1AV[\x90P\x92\x95\x91\x94P\x92PV[_\x80`@\x83\x85\x03\x12\x15a\t\x05W_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\t-Wa\t-a\x07\x89V[P`\x05\x1B` \x01\x90V[\x805`\x03\x81\x10a\x080W_\x80\xFD[_` \x80\x83\x85\x03\x12\x15a\tVW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\tlW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\t|W_\x80\xFD[\x805a\t\x8Fa\t\x8A\x82a\t\x14V[a\x07\xE9V[\x81\x81R``\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a\t\xADW_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a\n\x03W\x80\x85\x8A\x03\x12\x15a\t\xC8W_\x80\xFD[a\t\xD0a\x07\x9DV[\x855\x81Ra\t\xDF\x87\x87\x01a\x08\x1AV[\x87\x82\x01R`@a\t\xF0\x81\x88\x01a\t7V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a\t\xB2V[P\x97\x96PPPPPPPV[\x805`\x01`\x01`\x80\x1B\x03\x81\x16\x81\x14a\x080W_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15a\n7W_\x80\xFD[\x835\x92Pa\nG` \x85\x01a\n\x0FV[\x91Pa\nU`@\x85\x01a\n\x0FV[\x90P\x92P\x92P\x92V[_\x80`@\x83\x85\x03\x12\x15a\noW_\x80\xFD[\x825\x91Pa\n\x7F` \x84\x01a\x08\x1AV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\n\x98W_\x80\xFD[P5\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\n\xB2W_\x80\xFD[\x845\x93P` \x85\x015\x92Pa\n\xC9`@\x86\x01a\n\x0FV[\x91Pa\x08\xE9``\x86\x01a\n\x0FV[_` \x80\x83R\x83Q\x80` \x85\x01R_[\x81\x81\x10\x15a\x0B\x03W\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\n\xE7V[P_`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[_` \x80\x83\x85\x03\x12\x15a\x0B4W_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0BJW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0BZW_\x80\xFD[\x805a\x0Bha\t\x8A\x82a\t\x14V[\x81\x81R`\xA0\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a\x0B\x86W_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a\n\x03W\x80\x85\x8A\x03\x12\x15a\x0B\xA1W_\x80\xFD[a\x0B\xA9a\x07\xC6V[\x855\x81R\x86\x86\x015\x87\x82\x01R`@a\x0B\xC2\x81\x88\x01a\n\x0FV[\x90\x82\x01R``a\x0B\xD3\x87\x82\x01a\n\x0FV[\x90\x82\x01R`\x80a\x0B\xE4\x87\x82\x01a\t7V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a\x0B\x8BV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x0C\x0BW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0C)WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x0CvW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x0CTWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x0CsW_\x81U`\x01\x01a\x0C`V[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\x95Wa\x0C\x95a\x07\x89V[a\x0C\xA9\x81a\x0C\xA3\x84Ta\x0B\xF7V[\x84a\x0C/V[` \x80`\x1F\x83\x11`\x01\x81\x14a\x0C\xDCW_\x84\x15a\x0C\xC5WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\r3V[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\r\nW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x0C\xEBV[P\x85\x82\x10\x15a\r'W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 e\x90\xD86V\x1D\x83@\xD2\xD8=\\\xD0c\xD2\xC7Q\xFD\xEA3k\x0E3\x02\xA9\x90\xDD\x06\0\xD1q\xD4dsolcC\0\x08\x18\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610106575f3560e01c80638026de311161009e578063c7bf4db51161006e578063c7bf4db5146102c9578063c8af3aa6146102dc578063d15ec851146102ef578063ead1840014610331578063f25d54f514610353575f80fd5b80638026de311461025e57806388dfddc614610271578063a314150f146102ab578063a5d666a9146102b4575f80fd5b80631c134315116100d95780631c134315146101ce5780632ae42686146101e15780636987b1fb146102215780636cc014de14610242575f80fd5b80630200225c1461010a5780630a4d04f71461011f5780630c1616c91461018e5780631417a4f0146101a1575b5f80fd5b61011d610118366004610835565b610366565b005b61016461012d3660046108f4565b600960209081525f9283526040808420909152908252902080546001909101546001600160801b0380821691600160801b90041683565b604080519384526001600160801b0392831660208501529116908201526060015b60405180910390f35b61011d61019c366004610945565b6103aa565b61011d6101af366004610a25565b6006929092556001600160801b03918216600160801b02911617600755565b61011d6101dc366004610a5e565b6104eb565b6102096101ef366004610a88565b60046020525f90815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610185565b61023461022f366004610a88565b610518565b604051908152602001610185565b5f5461024e9060ff1681565b6040519015158152602001610185565b61011d61026c366004610a9f565b610537565b61016461027f366004610a88565b60086020525f9081526040902080546001909101546001600160801b0380821691600160801b90041683565b61023460015481565b6102bc610589565b6040516101859190610ad7565b61011d6102d7366004610b23565b610615565b600354610209906001600160a01b031681565b61011d6102fd366004610a88565b600580546001810182555f919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b60065460075461016491906001600160801b0380821691600160801b90041683565b61011d610361366004610a88565b600155565b5f805460ff1916851515179055600183905560026103848382610c7b565b50600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b5f5b81518110156104e7575f8282815181106103c8576103c8610d4f565b60200260200101516040015160028111156103e5576103e5610d3b565b0361042c5760045f8383815181106103ff576103ff610d4f565b6020908102919091018101515182528101919091526040015f2080546001600160a01b03191690556104df565b600282828151811061044057610440610d4f565b602002602001015160400151600281111561045d5761045d610d3b565b14806104975750600182828151811061047857610478610d4f565b602002602001015160400151600281111561049557610495610d3b565b145b156104df576104df8282815181106104b1576104b1610d4f565b60200260200101515f01518383815181106104ce576104ce610d4f565b6020026020010151602001516104eb565b6001016103ac565b5050565b5f9182526004602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60058181548110610527575f80fd5b5f91825260209091200154905081565b604080516060810182529384526001600160801b0392831660208086019182529284168583019081525f9687526008909352942092518355925192518116600160801b02921691909117600190910155565b6002805461059690610bf7565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290610bf7565b801561060d5780601f106105e45761010080835404028352916020019161060d565b820191905f5260205f20905b8154815290600101906020018083116105f057829003601f168201915b505050505081565b5f5b81518110156104e7575f82828151811061063357610633610d4f565b602002602001015160800151600281111561065057610650610d3b565b036106925760085f83838151811061066a5761066a610d4f565b6020908102919091018101515182528101919091526040015f90812081815560010155610781565b60028282815181106106a6576106a6610d4f565b60200260200101516080015160028111156106c3576106c3610d3b565b14806106fd575060018282815181106106de576106de610d4f565b60200260200101516080015160028111156106fb576106fb610d3b565b145b156107815761078182828151811061071757610717610d4f565b60200260200101515f015183838151811061073457610734610d4f565b60200260200101516020015184848151811061075257610752610d4f565b60200260200101516040015185858151811061077057610770610d4f565b602002602001015160600151610537565b600101610617565b634e487b7160e01b5f52604160045260245ffd5b6040516060810167ffffffffffffffff811182821017156107c0576107c0610789565b60405290565b60405160a0810167ffffffffffffffff811182821017156107c0576107c0610789565b604051601f8201601f1916810167ffffffffffffffff8111828210171561081257610812610789565b604052919050565b80356001600160a01b0381168114610830575f80fd5b919050565b5f805f8060808587031215610848575f80fd5b84358015158114610857575f80fd5b93506020858101359350604086013567ffffffffffffffff8082111561087b575f80fd5b818801915088601f83011261088e575f80fd5b8135818111156108a0576108a0610789565b6108b2601f8201601f191685016107e9565b915080825289848285010111156108c7575f80fd5b80848401858401375f848284010152508094505050506108e96060860161081a565b905092959194509250565b5f8060408385031215610905575f80fd5b50508035926020909101359150565b5f67ffffffffffffffff82111561092d5761092d610789565b5060051b60200190565b803560038110610830575f80fd5b5f6020808385031215610956575f80fd5b823567ffffffffffffffff81111561096c575f80fd5b8301601f8101851361097c575f80fd5b803561098f61098a82610914565b6107e9565b818152606091820283018401918482019190888411156109ad575f80fd5b938501935b83851015610a035780858a0312156109c8575f80fd5b6109d061079d565b853581526109df87870161081a565b8782015260406109f0818801610937565b90820152835293840193918501916109b2565b50979650505050505050565b80356001600160801b0381168114610830575f80fd5b5f805f60608486031215610a37575f80fd5b83359250610a4760208501610a0f565b9150610a5560408501610a0f565b90509250925092565b5f8060408385031215610a6f575f80fd5b82359150610a7f6020840161081a565b90509250929050565b5f60208284031215610a98575f80fd5b5035919050565b5f805f8060808587031215610ab2575f80fd5b8435935060208501359250610ac960408601610a0f565b91506108e960608601610a0f565b5f602080835283518060208501525f5b81811015610b0357858101830151858201604001528201610ae7565b505f604082860101526040601f19601f8301168501019250505092915050565b5f6020808385031215610b34575f80fd5b823567ffffffffffffffff811115610b4a575f80fd5b8301601f81018513610b5a575f80fd5b8035610b6861098a82610914565b81815260a09182028301840191848201919088841115610b86575f80fd5b938501935b83851015610a035780858a031215610ba1575f80fd5b610ba96107c6565b8535815286860135878201526040610bc2818801610a0f565b908201526060610bd3878201610a0f565b908201526080610be4878201610937565b9082015283529384019391850191610b8b565b600181811c90821680610c0b57607f821691505b602082108103610c2957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610c7657805f5260205f20601f840160051c81016020851015610c545750805b601f840160051c820191505b81811015610c73575f8155600101610c60565b50505b505050565b815167ffffffffffffffff811115610c9557610c95610789565b610ca981610ca38454610bf7565b84610c2f565b602080601f831160018114610cdc575f8415610cc55750858301515b5f19600386901b1c1916600185901b178555610d33565b5f85815260208120601f198616915b82811015610d0a57888601518255948401946001909101908401610ceb565b5085821015610d2757878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffdfea26469706673582212206590d836561d8340d2d83d5cd063d2c751fdea336b0e3302a990dd0600d171d464736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x01\x06W_5`\xE0\x1C\x80c\x80&\xDE1\x11a\0\x9EW\x80c\xC7\xBFM\xB5\x11a\0nW\x80c\xC7\xBFM\xB5\x14a\x02\xC9W\x80c\xC8\xAF:\xA6\x14a\x02\xDCW\x80c\xD1^\xC8Q\x14a\x02\xEFW\x80c\xEA\xD1\x84\0\x14a\x031W\x80c\xF2]T\xF5\x14a\x03SW_\x80\xFD[\x80c\x80&\xDE1\x14a\x02^W\x80c\x88\xDF\xDD\xC6\x14a\x02qW\x80c\xA3\x14\x15\x0F\x14a\x02\xABW\x80c\xA5\xD6f\xA9\x14a\x02\xB4W_\x80\xFD[\x80c\x1C\x13C\x15\x11a\0\xD9W\x80c\x1C\x13C\x15\x14a\x01\xCEW\x80c*\xE4&\x86\x14a\x01\xE1W\x80ci\x87\xB1\xFB\x14a\x02!W\x80cl\xC0\x14\xDE\x14a\x02BW_\x80\xFD[\x80c\x02\0\"\\\x14a\x01\nW\x80c\nM\x04\xF7\x14a\x01\x1FW\x80c\x0C\x16\x16\xC9\x14a\x01\x8EW\x80c\x14\x17\xA4\xF0\x14a\x01\xA1W[_\x80\xFD[a\x01\x1Da\x01\x186`\x04a\x085V[a\x03fV[\0[a\x01da\x01-6`\x04a\x08\xF4V[`\t` \x90\x81R_\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 \x80T`\x01\x90\x91\x01T`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[`@\x80Q\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x85\x01R\x91\x16\x90\x82\x01R``\x01[`@Q\x80\x91\x03\x90\xF3[a\x01\x1Da\x01\x9C6`\x04a\tEV[a\x03\xAAV[a\x01\x1Da\x01\xAF6`\x04a\n%V[`\x06\x92\x90\x92U`\x01`\x01`\x80\x1B\x03\x91\x82\x16`\x01`\x80\x1B\x02\x91\x16\x17`\x07UV[a\x01\x1Da\x01\xDC6`\x04a\n^V[a\x04\xEBV[a\x02\ta\x01\xEF6`\x04a\n\x88V[`\x04` R_\x90\x81R`@\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x85V[a\x024a\x02/6`\x04a\n\x88V[a\x05\x18V[`@Q\x90\x81R` \x01a\x01\x85V[_Ta\x02N\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01\x85V[a\x01\x1Da\x02l6`\x04a\n\x9FV[a\x057V[a\x01da\x02\x7F6`\x04a\n\x88V[`\x08` R_\x90\x81R`@\x90 \x80T`\x01\x90\x91\x01T`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[a\x024`\x01T\x81V[a\x02\xBCa\x05\x89V[`@Qa\x01\x85\x91\x90a\n\xD7V[a\x01\x1Da\x02\xD76`\x04a\x0B#V[a\x06\x15V[`\x03Ta\x02\t\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01\x1Da\x02\xFD6`\x04a\n\x88V[`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[`\x06T`\x07Ta\x01d\x91\x90`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[a\x01\x1Da\x03a6`\x04a\n\x88V[`\x01UV[_\x80T`\xFF\x19\x16\x85\x15\x15\x17\x90U`\x01\x83\x90U`\x02a\x03\x84\x83\x82a\x0C{V[P`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPPPV[_[\x81Q\x81\x10\x15a\x04\xE7W_\x82\x82\x81Q\x81\x10a\x03\xC8Wa\x03\xC8a\rOV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x03\xE5Wa\x03\xE5a\r;V[\x03a\x04,W`\x04_\x83\x83\x81Q\x81\x10a\x03\xFFWa\x03\xFFa\rOV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01QQ\x82R\x81\x01\x91\x90\x91R`@\x01_ \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90Ua\x04\xDFV[`\x02\x82\x82\x81Q\x81\x10a\x04@Wa\x04@a\rOV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x04]Wa\x04]a\r;V[\x14\x80a\x04\x97WP`\x01\x82\x82\x81Q\x81\x10a\x04xWa\x04xa\rOV[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x04\x95Wa\x04\x95a\r;V[\x14[\x15a\x04\xDFWa\x04\xDF\x82\x82\x81Q\x81\x10a\x04\xB1Wa\x04\xB1a\rOV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x04\xCEWa\x04\xCEa\rOV[` \x02` \x01\x01Q` \x01Qa\x04\xEBV[`\x01\x01a\x03\xACV[PPV[_\x91\x82R`\x04` R`@\x90\x91 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x05\x81\x81T\x81\x10a\x05'W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`@\x80Q``\x81\x01\x82R\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x80\x86\x01\x91\x82R\x92\x84\x16\x85\x83\x01\x90\x81R_\x96\x87R`\x08\x90\x93R\x94 \x92Q\x83U\x92Q\x92Q\x81\x16`\x01`\x80\x1B\x02\x92\x16\x91\x90\x91\x17`\x01\x90\x91\x01UV[`\x02\x80Ta\x05\x96\x90a\x0B\xF7V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05\xC2\x90a\x0B\xF7V[\x80\x15a\x06\rW\x80`\x1F\x10a\x05\xE4Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x06\rV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\xF0W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[_[\x81Q\x81\x10\x15a\x04\xE7W_\x82\x82\x81Q\x81\x10a\x063Wa\x063a\rOV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\x06PWa\x06Pa\r;V[\x03a\x06\x92W`\x08_\x83\x83\x81Q\x81\x10a\x06jWa\x06ja\rOV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01QQ\x82R\x81\x01\x91\x90\x91R`@\x01_\x90\x81 \x81\x81U`\x01\x01Ua\x07\x81V[`\x02\x82\x82\x81Q\x81\x10a\x06\xA6Wa\x06\xA6a\rOV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\x06\xC3Wa\x06\xC3a\r;V[\x14\x80a\x06\xFDWP`\x01\x82\x82\x81Q\x81\x10a\x06\xDEWa\x06\xDEa\rOV[` \x02` \x01\x01Q`\x80\x01Q`\x02\x81\x11\x15a\x06\xFBWa\x06\xFBa\r;V[\x14[\x15a\x07\x81Wa\x07\x81\x82\x82\x81Q\x81\x10a\x07\x17Wa\x07\x17a\rOV[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x074Wa\x074a\rOV[` \x02` \x01\x01Q` \x01Q\x84\x84\x81Q\x81\x10a\x07RWa\x07Ra\rOV[` \x02` \x01\x01Q`@\x01Q\x85\x85\x81Q\x81\x10a\x07pWa\x07pa\rOV[` \x02` \x01\x01Q``\x01Qa\x057V[`\x01\x01a\x06\x17V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x07\xC0Wa\x07\xC0a\x07\x89V[`@R\x90V[`@Q`\xA0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x07\xC0Wa\x07\xC0a\x07\x89V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x08\x12Wa\x08\x12a\x07\x89V[`@R\x91\x90PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x080W_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x08HW_\x80\xFD[\x845\x80\x15\x15\x81\x14a\x08WW_\x80\xFD[\x93P` \x85\x81\x015\x93P`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x08{W_\x80\xFD[\x81\x88\x01\x91P\x88`\x1F\x83\x01\x12a\x08\x8EW_\x80\xFD[\x815\x81\x81\x11\x15a\x08\xA0Wa\x08\xA0a\x07\x89V[a\x08\xB2`\x1F\x82\x01`\x1F\x19\x16\x85\x01a\x07\xE9V[\x91P\x80\x82R\x89\x84\x82\x85\x01\x01\x11\x15a\x08\xC7W_\x80\xFD[\x80\x84\x84\x01\x85\x84\x017_\x84\x82\x84\x01\x01RP\x80\x94PPPPa\x08\xE9``\x86\x01a\x08\x1AV[\x90P\x92\x95\x91\x94P\x92PV[_\x80`@\x83\x85\x03\x12\x15a\t\x05W_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\t-Wa\t-a\x07\x89V[P`\x05\x1B` \x01\x90V[\x805`\x03\x81\x10a\x080W_\x80\xFD[_` \x80\x83\x85\x03\x12\x15a\tVW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\tlW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\t|W_\x80\xFD[\x805a\t\x8Fa\t\x8A\x82a\t\x14V[a\x07\xE9V[\x81\x81R``\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a\t\xADW_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a\n\x03W\x80\x85\x8A\x03\x12\x15a\t\xC8W_\x80\xFD[a\t\xD0a\x07\x9DV[\x855\x81Ra\t\xDF\x87\x87\x01a\x08\x1AV[\x87\x82\x01R`@a\t\xF0\x81\x88\x01a\t7V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a\t\xB2V[P\x97\x96PPPPPPPV[\x805`\x01`\x01`\x80\x1B\x03\x81\x16\x81\x14a\x080W_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15a\n7W_\x80\xFD[\x835\x92Pa\nG` \x85\x01a\n\x0FV[\x91Pa\nU`@\x85\x01a\n\x0FV[\x90P\x92P\x92P\x92V[_\x80`@\x83\x85\x03\x12\x15a\noW_\x80\xFD[\x825\x91Pa\n\x7F` \x84\x01a\x08\x1AV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\n\x98W_\x80\xFD[P5\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\n\xB2W_\x80\xFD[\x845\x93P` \x85\x015\x92Pa\n\xC9`@\x86\x01a\n\x0FV[\x91Pa\x08\xE9``\x86\x01a\n\x0FV[_` \x80\x83R\x83Q\x80` \x85\x01R_[\x81\x81\x10\x15a\x0B\x03W\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\n\xE7V[P_`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[_` \x80\x83\x85\x03\x12\x15a\x0B4W_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0BJW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0BZW_\x80\xFD[\x805a\x0Bha\t\x8A\x82a\t\x14V[\x81\x81R`\xA0\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a\x0B\x86W_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a\n\x03W\x80\x85\x8A\x03\x12\x15a\x0B\xA1W_\x80\xFD[a\x0B\xA9a\x07\xC6V[\x855\x81R\x86\x86\x015\x87\x82\x01R`@a\x0B\xC2\x81\x88\x01a\n\x0FV[\x90\x82\x01R``a\x0B\xD3\x87\x82\x01a\n\x0FV[\x90\x82\x01R`\x80a\x0B\xE4\x87\x82\x01a\t7V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a\x0B\x8BV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x0C\x0BW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0C)WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x0CvW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x0CTWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x0CsW_\x81U`\x01\x01a\x0C`V[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\x95Wa\x0C\x95a\x07\x89V[a\x0C\xA9\x81a\x0C\xA3\x84Ta\x0B\xF7V[\x84a\x0C/V[` \x80`\x1F\x83\x11`\x01\x81\x14a\x0C\xDCW_\x84\x15a\x0C\xC5WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\r3V[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\r\nW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x0C\xEBV[P\x85\x82\x10\x15a\r'W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 e\x90\xD86V\x1D\x83@\xD2\xD8=\\\xD0c\xD2\xC7Q\xFD\xEA3k\x0E3\x02\xA9\x90\xDD\x06\0\xD1q\xD4dsolcC\0\x08\x18\x003",
    );
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MappingOperation(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MappingOperation> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::Token<'_>
            {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(self).0
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::abi_encoded_size(
                    self,
                )
            }
        }
        #[automatically_derived]
        impl MappingOperation {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MappingOperation {
            type RustType = u8;
            type Token<'a> =
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> =
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MappingOperation {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::EventTopic>::encode_topic(
                    rust,
                )
            }
        }
    };
    /**```solidity
    struct MappingChange { uint256 key; address value; MappingOperation operation; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MappingChange {
        pub key: alloy::sol_types::private::U256,
        pub value: alloy::sol_types::private::Address,
        pub operation: <MappingOperation as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            MappingOperation,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::U256,
            alloy::sol_types::private::Address,
            <MappingOperation as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MappingChange> for UnderlyingRustTuple<'_> {
            fn from(value: MappingChange) -> Self {
                (value.key, value.value, value.operation)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MappingChange {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    key: tuple.0,
                    value: tuple.1,
                    operation: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MappingChange {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MappingChange {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                    <MappingOperation as alloy_sol_types::SolType>::tokenize(&self.operation),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MappingChange {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MappingChange {
            const NAME: &'static str = "MappingChange";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MappingChange(uint256 key,address value,uint8 operation)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.key)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.value,
                        )
                        .0,
                    <MappingOperation as alloy_sol_types::SolType>::eip712_data_word(
                            &self.operation,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MappingChange {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.key)
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.value,
                    )
                    + <MappingOperation as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.operation,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.key, out);
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.value,
                    out,
                );
                <MappingOperation as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.operation,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**```solidity
    struct MappingStructChange { uint256 key; uint256 field1; uint128 field2; uint128 field3; MappingOperation operation; }
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MappingStructChange {
        pub key: alloy::sol_types::private::U256,
        pub field1: alloy::sol_types::private::U256,
        pub field2: u128,
        pub field3: u128,
        pub operation: <MappingOperation as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<128>,
            alloy::sol_types::sol_data::Uint<128>,
            MappingOperation,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::U256,
            alloy::sol_types::private::U256,
            u128,
            u128,
            <MappingOperation as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MappingStructChange> for UnderlyingRustTuple<'_> {
            fn from(value: MappingStructChange) -> Self {
                (
                    value.key,
                    value.field1,
                    value.field2,
                    value.field3,
                    value.operation,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MappingStructChange {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    key: tuple.0,
                    field1: tuple.1,
                    field2: tuple.2,
                    field3: tuple.3,
                    operation: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MappingStructChange {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MappingStructChange {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.field1,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.field2,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.field3,
                    ),
                    <MappingOperation as alloy_sol_types::SolType>::tokenize(&self.operation),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_encode_packed_to(
                    &tuple, out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple =
                    <UnderlyingRustTuple<'_> as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::abi_packed_encoded_size(
                    &tuple,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MappingStructChange {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> =
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MappingStructChange {
            const NAME: &'static str = "MappingStructChange";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MappingStructChange(uint256 key,uint256 field1,uint128 field2,uint128 field3,uint8 operation)",
                )
            }
            #[inline]
            fn eip712_components(
            ) -> alloy_sol_types::private::Vec<alloy_sol_types::private::Cow<'static, str>>
            {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.key)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field1)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field2)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.field3)
                        .0,
                    <MappingOperation as alloy_sol_types::SolType>::eip712_data_word(
                            &self.operation,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MappingStructChange {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.key)
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field1,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field2,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.field3,
                    )
                    + <MappingOperation as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.operation,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(<Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust));
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.key, out);
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field1,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field2,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    128,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.field3,
                    out,
                );
                <MappingOperation as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.operation,
                    out,
                );
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, &mut out);
                alloy_sol_types::abi::token::WordToken(alloy_sol_types::private::keccak256(out))
            }
        }
    };
    /**Function with signature `addToArray(uint256)` and selector `0xd15ec851`.
    ```solidity
    function addToArray(uint256 value) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addToArrayCall {
        pub value: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`addToArray(uint256)`](addToArrayCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addToArrayReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToArrayCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToArrayCall) -> Self {
                    (value.value,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToArrayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { value: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToArrayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addToArrayReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToArrayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToArrayCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToArrayReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToArray(uint256)";
            const SELECTOR: [u8; 4] = [209u8, 94u8, 200u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `arr1(uint256)` and selector `0x6987b1fb`.
    ```solidity
    function arr1(uint256) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct arr1Call {
        pub _0: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`arr1(uint256)`](arr1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct arr1Return {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arr1Call> for UnderlyingRustTuple<'_> {
                fn from(value: arr1Call) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arr1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arr1Return> for UnderlyingRustTuple<'_> {
                fn from(value: arr1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arr1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for arr1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = arr1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "arr1(uint256)";
            const SELECTOR: [u8; 4] = [105u8, 135u8, 177u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `changeMapping((uint256,address,uint8)[])` and selector `0x0c1616c9`.
    ```solidity
    function changeMapping(MappingChange[] memory changes) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct changeMappingCall {
        pub changes:
            alloy::sol_types::private::Vec<<MappingChange as alloy::sol_types::SolType>::RustType>,
    }
    ///Container type for the return parameters of the [`changeMapping((uint256,address,uint8)[])`](changeMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct changeMappingReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<MappingChange>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <MappingChange as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMappingCall> for UnderlyingRustTuple<'_> {
                fn from(value: changeMappingCall) -> Self {
                    (value.changes,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { changes: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMappingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: changeMappingReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for changeMappingCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<MappingChange>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = changeMappingReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "changeMapping((uint256,address,uint8)[])";
            const SELECTOR: [u8; 4] = [12u8, 22u8, 22u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        MappingChange,
                    > as alloy_sol_types::SolType>::tokenize(&self.changes),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `changeMappingStruct((uint256,uint256,uint128,uint128,uint8)[])` and selector `0xc7bf4db5`.
    ```solidity
    function changeMappingStruct(MappingStructChange[] memory changes) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct changeMappingStructCall {
        pub changes: alloy::sol_types::private::Vec<
            <MappingStructChange as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`changeMappingStruct((uint256,uint256,uint128,uint128,uint8)[])`](changeMappingStructCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct changeMappingStructReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<MappingStructChange>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <MappingStructChange as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMappingStructCall> for UnderlyingRustTuple<'_> {
                fn from(value: changeMappingStructCall) -> Self {
                    (value.changes,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMappingStructCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { changes: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMappingStructReturn> for UnderlyingRustTuple<'_> {
                fn from(value: changeMappingStructReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMappingStructReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for changeMappingStructCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<MappingStructChange>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = changeMappingStructReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "changeMappingStruct((uint256,uint256,uint128,uint128,uint8)[])";
            const SELECTOR: [u8; 4] = [199u8, 191u8, 77u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        MappingStructChange,
                    > as alloy_sol_types::SolType>::tokenize(&self.changes),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `m1(uint256)` and selector `0x2ae42686`.
    ```solidity
    function m1(uint256) external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct m1Call {
        pub _0: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`m1(uint256)`](m1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct m1Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<m1Call> for UnderlyingRustTuple<'_> {
                fn from(value: m1Call) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for m1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<m1Return> for UnderlyingRustTuple<'_> {
                fn from(value: m1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for m1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for m1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = m1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "m1(uint256)";
            const SELECTOR: [u8; 4] = [42u8, 228u8, 38u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `mappingOfMappings(uint256,uint256)` and selector `0x0a4d04f7`.
    ```solidity
    function mappingOfMappings(uint256, uint256) external view returns (uint256 field1, uint128 field2, uint128 field3);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct mappingOfMappingsCall {
        pub _0: alloy::sol_types::private::U256,
        pub _1: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`mappingOfMappings(uint256,uint256)`](mappingOfMappingsCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct mappingOfMappingsReturn {
        pub field1: alloy::sol_types::private::U256,
        pub field2: u128,
        pub field3: u128,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::U256,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mappingOfMappingsCall> for UnderlyingRustTuple<'_> {
                fn from(value: mappingOfMappingsCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mappingOfMappingsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256, u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mappingOfMappingsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mappingOfMappingsReturn) -> Self {
                    (value.field1, value.field2, value.field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mappingOfMappingsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        field1: tuple.0,
                        field2: tuple.1,
                        field3: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mappingOfMappingsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = mappingOfMappingsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mappingOfMappings(uint256,uint256)";
            const SELECTOR: [u8; 4] = [10u8, 77u8, 4u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s1()` and selector `0x6cc014de`.
    ```solidity
    function s1() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s1Call {}
    ///Container type for the return parameters of the [`s1()`](s1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s1Return {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s1Call> for UnderlyingRustTuple<'_> {
                fn from(value: s1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s1Return> for UnderlyingRustTuple<'_> {
                fn from(value: s1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s1()";
            const SELECTOR: [u8; 4] = [108u8, 192u8, 20u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s2()` and selector `0xa314150f`.
    ```solidity
    function s2() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s2Call {}
    ///Container type for the return parameters of the [`s2()`](s2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s2Return {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s2Call> for UnderlyingRustTuple<'_> {
                fn from(value: s2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s2Return> for UnderlyingRustTuple<'_> {
                fn from(value: s2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s2()";
            const SELECTOR: [u8; 4] = [163u8, 20u8, 21u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s3()` and selector `0xa5d666a9`.
    ```solidity
    function s3() external view returns (string memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s3Call {}
    ///Container type for the return parameters of the [`s3()`](s3Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s3Return {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s3Call> for UnderlyingRustTuple<'_> {
                fn from(value: s3Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s3Return> for UnderlyingRustTuple<'_> {
                fn from(value: s3Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s3Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s3()";
            const SELECTOR: [u8; 4] = [165u8, 214u8, 102u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s4()` and selector `0xc8af3aa6`.
    ```solidity
    function s4() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s4Call {}
    ///Container type for the return parameters of the [`s4()`](s4Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s4Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s4Call> for UnderlyingRustTuple<'_> {
                fn from(value: s4Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s4Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s4Return> for UnderlyingRustTuple<'_> {
                fn from(value: s4Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s4Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s4Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s4Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s4()";
            const SELECTOR: [u8; 4] = [200u8, 175u8, 58u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setMapping(uint256,address)` and selector `0x1c134315`.
    ```solidity
    function setMapping(uint256 key, address value) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setMappingCall {
        pub key: alloy::sol_types::private::U256,
        pub value: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setMapping(uint256,address)`](setMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setMappingReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingCall> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingCall) -> Self {
                    (value.key, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        key: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMappingCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMappingReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMapping(uint256,address)";
            const SELECTOR: [u8; 4] = [28u8, 19u8, 67u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setMappingStruct(uint256,uint256,uint128,uint128)` and selector `0x8026de31`.
    ```solidity
    function setMappingStruct(uint256 _key, uint256 _field1, uint128 _field2, uint128 _field3) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setMappingStructCall {
        pub _key: alloy::sol_types::private::U256,
        pub _field1: alloy::sol_types::private::U256,
        pub _field2: u128,
        pub _field3: u128,
    }
    ///Container type for the return parameters of the [`setMappingStruct(uint256,uint256,uint128,uint128)`](setMappingStructCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setMappingStructReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::U256,
                alloy::sol_types::private::U256,
                u128,
                u128,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingStructCall> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingStructCall) -> Self {
                    (value._key, value._field1, value._field2, value._field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingStructCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _key: tuple.0,
                        _field1: tuple.1,
                        _field2: tuple.2,
                        _field3: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingStructReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingStructReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingStructReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMappingStructCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMappingStructReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMappingStruct(uint256,uint256,uint128,uint128)";
            const SELECTOR: [u8; 4] = [128u8, 38u8, 222u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._key,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._field1,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self._field2,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self._field3,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setS2(uint256)` and selector `0xf25d54f5`.
    ```solidity
    function setS2(uint256 newS2) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setS2Call {
        pub newS2: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`setS2(uint256)`](setS2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setS2Return {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setS2Call> for UnderlyingRustTuple<'_> {
                fn from(value: setS2Call) -> Self {
                    (value.newS2,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setS2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newS2: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setS2Return> for UnderlyingRustTuple<'_> {
                fn from(value: setS2Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setS2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setS2Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setS2Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setS2(uint256)";
            const SELECTOR: [u8; 4] = [242u8, 93u8, 84u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newS2,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setSimpleStruct(uint256,uint128,uint128)` and selector `0x1417a4f0`.
    ```solidity
    function setSimpleStruct(uint256 _field1, uint128 _field2, uint128 _field3) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setSimpleStructCall {
        pub _field1: alloy::sol_types::private::U256,
        pub _field2: u128,
        pub _field3: u128,
    }
    ///Container type for the return parameters of the [`setSimpleStruct(uint256,uint128,uint128)`](setSimpleStructCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setSimpleStructReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256, u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimpleStructCall> for UnderlyingRustTuple<'_> {
                fn from(value: setSimpleStructCall) -> Self {
                    (value._field1, value._field2, value._field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimpleStructCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _field1: tuple.0,
                        _field2: tuple.1,
                        _field3: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimpleStructReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setSimpleStructReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimpleStructReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSimpleStructCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSimpleStructReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSimpleStruct(uint256,uint128,uint128)";
            const SELECTOR: [u8; 4] = [20u8, 23u8, 164u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._field1,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self._field2,
                    ),
                    <alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self._field3,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setSimples(bool,uint256,string,address)` and selector `0x0200225c`.
    ```solidity
    function setSimples(bool newS1, uint256 newS2, string memory newS3, address newS4) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setSimplesCall {
        pub newS1: bool,
        pub newS2: alloy::sol_types::private::U256,
        pub newS3: alloy::sol_types::private::String,
        pub newS4: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setSimples(bool,uint256,string,address)`](setSimplesCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setSimplesReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                bool,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimplesCall> for UnderlyingRustTuple<'_> {
                fn from(value: setSimplesCall) -> Self {
                    (value.newS1, value.newS2, value.newS3, value.newS4)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimplesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newS1: tuple.0,
                        newS2: tuple.1,
                        newS3: tuple.2,
                        newS4: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimplesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setSimplesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimplesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSimplesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSimplesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSimples(bool,uint256,string,address)";
            const SELECTOR: [u8; 4] = [2u8, 0u8, 34u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.newS1,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newS2,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newS3,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newS4,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `simpleStruct()` and selector `0xead18400`.
    ```solidity
    function simpleStruct() external view returns (uint256 field1, uint128 field2, uint128 field3);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simpleStructCall {}
    ///Container type for the return parameters of the [`simpleStruct()`](simpleStructCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct simpleStructReturn {
        pub field1: alloy::sol_types::private::U256,
        pub field2: u128,
        pub field3: u128,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simpleStructCall> for UnderlyingRustTuple<'_> {
                fn from(value: simpleStructCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for simpleStructCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256, u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<simpleStructReturn> for UnderlyingRustTuple<'_> {
                fn from(value: simpleStructReturn) -> Self {
                    (value.field1, value.field2, value.field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for simpleStructReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        field1: tuple.0,
                        field2: tuple.1,
                        field3: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for simpleStructCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = simpleStructReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "simpleStruct()";
            const SELECTOR: [u8; 4] = [234u8, 209u8, 132u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `structMapping(uint256)` and selector `0x88dfddc6`.
    ```solidity
    function structMapping(uint256) external view returns (uint256 field1, uint128 field2, uint128 field3);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct structMappingCall {
        pub _0: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`structMapping(uint256)`](structMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct structMappingReturn {
        pub field1: alloy::sol_types::private::U256,
        pub field2: u128,
        pub field3: u128,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<structMappingCall> for UnderlyingRustTuple<'_> {
                fn from(value: structMappingCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for structMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256, u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<structMappingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: structMappingReturn) -> Self {
                    (value.field1, value.field2, value.field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for structMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        field1: tuple.0,
                        field2: tuple.1,
                        field3: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for structMappingCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = structMappingReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "structMapping(uint256)";
            const SELECTOR: [u8; 4] = [136u8, 223u8, 221u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`Simple`](self) function calls.
    pub enum SimpleCalls {
        addToArray(addToArrayCall),
        arr1(arr1Call),
        changeMapping(changeMappingCall),
        changeMappingStruct(changeMappingStructCall),
        m1(m1Call),
        mappingOfMappings(mappingOfMappingsCall),
        s1(s1Call),
        s2(s2Call),
        s3(s3Call),
        s4(s4Call),
        setMapping(setMappingCall),
        setMappingStruct(setMappingStructCall),
        setS2(setS2Call),
        setSimpleStruct(setSimpleStructCall),
        setSimples(setSimplesCall),
        simpleStruct(simpleStructCall),
        structMapping(structMappingCall),
    }
    #[automatically_derived]
    impl SimpleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [2u8, 0u8, 34u8, 92u8],
            [10u8, 77u8, 4u8, 247u8],
            [12u8, 22u8, 22u8, 201u8],
            [20u8, 23u8, 164u8, 240u8],
            [28u8, 19u8, 67u8, 21u8],
            [42u8, 228u8, 38u8, 134u8],
            [105u8, 135u8, 177u8, 251u8],
            [108u8, 192u8, 20u8, 222u8],
            [128u8, 38u8, 222u8, 49u8],
            [136u8, 223u8, 221u8, 198u8],
            [163u8, 20u8, 21u8, 15u8],
            [165u8, 214u8, 102u8, 169u8],
            [199u8, 191u8, 77u8, 181u8],
            [200u8, 175u8, 58u8, 166u8],
            [209u8, 94u8, 200u8, 81u8],
            [234u8, 209u8, 132u8, 0u8],
            [242u8, 93u8, 84u8, 245u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SimpleCalls {
        const NAME: &'static str = "SimpleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 17usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addToArray(_) => <addToArrayCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::arr1(_) => <arr1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::changeMapping(_) => <changeMappingCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::changeMappingStruct(_) => {
                    <changeMappingStructCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::m1(_) => <m1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::mappingOfMappings(_) => {
                    <mappingOfMappingsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::s1(_) => <s1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s2(_) => <s2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s3(_) => <s3Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s4(_) => <s4Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::setMapping(_) => <setMappingCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setMappingStruct(_) => {
                    <setMappingStructCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setS2(_) => <setS2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::setSimpleStruct(_) => {
                    <setSimpleStructCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSimples(_) => <setSimplesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::simpleStruct(_) => <simpleStructCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::structMapping(_) => <structMappingCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8], bool) -> alloy_sol_types::Result<SimpleCalls>] = &[
                {
                    fn setSimples(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setSimplesCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::setSimples)
                    }
                    setSimples
                },
                {
                    fn mappingOfMappings(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <mappingOfMappingsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::mappingOfMappings)
                    }
                    mappingOfMappings
                },
                {
                    fn changeMapping(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <changeMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::changeMapping)
                    }
                    changeMapping
                },
                {
                    fn setSimpleStruct(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setSimpleStructCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::setSimpleStruct)
                    }
                    setSimpleStruct
                },
                {
                    fn setMapping(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::setMapping)
                    }
                    setMapping
                },
                {
                    fn m1(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <m1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::m1)
                    }
                    m1
                },
                {
                    fn arr1(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <arr1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::arr1)
                    }
                    arr1
                },
                {
                    fn s1(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s1)
                    }
                    s1
                },
                {
                    fn setMappingStruct(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setMappingStructCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::setMappingStruct)
                    }
                    setMappingStruct
                },
                {
                    fn structMapping(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <structMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::structMapping)
                    }
                    structMapping
                },
                {
                    fn s2(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s2Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s2)
                    }
                    s2
                },
                {
                    fn s3(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s3Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s3)
                    }
                    s3
                },
                {
                    fn changeMappingStruct(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <changeMappingStructCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::changeMappingStruct)
                    }
                    changeMappingStruct
                },
                {
                    fn s4(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s4Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s4)
                    }
                    s4
                },
                {
                    fn addToArray(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <addToArrayCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::addToArray)
                    }
                    addToArray
                },
                {
                    fn simpleStruct(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <simpleStructCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SimpleCalls::simpleStruct)
                    }
                    simpleStruct
                },
                {
                    fn setS2(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <setS2Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::setS2)
                    }
                    setS2
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addToArray(inner) => {
                    <addToArrayCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::arr1(inner) => {
                    <arr1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::changeMapping(inner) => {
                    <changeMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::changeMappingStruct(inner) => {
                    <changeMappingStructCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::m1(inner) => <m1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::mappingOfMappings(inner) => {
                    <mappingOfMappingsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::s1(inner) => <s1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::s2(inner) => <s2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::s3(inner) => <s3Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::s4(inner) => <s4Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::setMapping(inner) => {
                    <setMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setMappingStruct(inner) => {
                    <setMappingStructCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setS2(inner) => {
                    <setS2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setSimpleStruct(inner) => {
                    <setSimpleStructCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setSimples(inner) => {
                    <setSimplesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::simpleStruct(inner) => {
                    <simpleStructCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::structMapping(inner) => {
                    <structMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addToArray(inner) => {
                    <addToArrayCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::arr1(inner) => {
                    <arr1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::changeMapping(inner) => {
                    <changeMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::changeMappingStruct(inner) => {
                    <changeMappingStructCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner, out,
                    )
                }
                Self::m1(inner) => <m1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::mappingOfMappings(inner) => {
                    <mappingOfMappingsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::s1(inner) => <s1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::s2(inner) => <s2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::s3(inner) => <s3Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::s4(inner) => <s4Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::setMapping(inner) => {
                    <setMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setMappingStruct(inner) => {
                    <setMappingStructCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setS2(inner) => {
                    <setS2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setSimpleStruct(inner) => {
                    <setSimpleStructCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setSimples(inner) => {
                    <setSimplesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::simpleStruct(inner) => {
                    <simpleStructCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::structMapping(inner) => {
                    <structMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Simple`](self) contract instance.

    See the [wrapper's documentation](`SimpleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SimpleInstance<T, P, N> {
        SimpleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<SimpleInstance<T, P, N>>> {
        SimpleInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SimpleInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Simple`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`Simple`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SimpleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SimpleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SimpleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SimpleInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`Simple`](self) contract instance.

        See the [wrapper's documentation](`SimpleInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(provider: P) -> alloy_contract::Result<SimpleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SimpleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SimpleInstance<T, P, N> {
            SimpleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SimpleInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addToArray`] function.
        pub fn addToArray(
            &self,
            value: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToArrayCall, N> {
            self.call_builder(&addToArrayCall { value })
        }
        ///Creates a new call builder for the [`arr1`] function.
        pub fn arr1(
            &self,
            _0: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, arr1Call, N> {
            self.call_builder(&arr1Call { _0 })
        }
        ///Creates a new call builder for the [`changeMapping`] function.
        pub fn changeMapping(
            &self,
            changes: alloy::sol_types::private::Vec<
                <MappingChange as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, changeMappingCall, N> {
            self.call_builder(&changeMappingCall { changes })
        }
        ///Creates a new call builder for the [`changeMappingStruct`] function.
        pub fn changeMappingStruct(
            &self,
            changes: alloy::sol_types::private::Vec<
                <MappingStructChange as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, changeMappingStructCall, N> {
            self.call_builder(&changeMappingStructCall { changes })
        }
        ///Creates a new call builder for the [`m1`] function.
        pub fn m1(
            &self,
            _0: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, m1Call, N> {
            self.call_builder(&m1Call { _0 })
        }
        ///Creates a new call builder for the [`mappingOfMappings`] function.
        pub fn mappingOfMappings(
            &self,
            _0: alloy::sol_types::private::U256,
            _1: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, mappingOfMappingsCall, N> {
            self.call_builder(&mappingOfMappingsCall { _0, _1 })
        }
        ///Creates a new call builder for the [`s1`] function.
        pub fn s1(&self) -> alloy_contract::SolCallBuilder<T, &P, s1Call, N> {
            self.call_builder(&s1Call {})
        }
        ///Creates a new call builder for the [`s2`] function.
        pub fn s2(&self) -> alloy_contract::SolCallBuilder<T, &P, s2Call, N> {
            self.call_builder(&s2Call {})
        }
        ///Creates a new call builder for the [`s3`] function.
        pub fn s3(&self) -> alloy_contract::SolCallBuilder<T, &P, s3Call, N> {
            self.call_builder(&s3Call {})
        }
        ///Creates a new call builder for the [`s4`] function.
        pub fn s4(&self) -> alloy_contract::SolCallBuilder<T, &P, s4Call, N> {
            self.call_builder(&s4Call {})
        }
        ///Creates a new call builder for the [`setMapping`] function.
        pub fn setMapping(
            &self,
            key: alloy::sol_types::private::U256,
            value: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMappingCall, N> {
            self.call_builder(&setMappingCall { key, value })
        }
        ///Creates a new call builder for the [`setMappingStruct`] function.
        pub fn setMappingStruct(
            &self,
            _key: alloy::sol_types::private::U256,
            _field1: alloy::sol_types::private::U256,
            _field2: u128,
            _field3: u128,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMappingStructCall, N> {
            self.call_builder(&setMappingStructCall {
                _key,
                _field1,
                _field2,
                _field3,
            })
        }
        ///Creates a new call builder for the [`setS2`] function.
        pub fn setS2(
            &self,
            newS2: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setS2Call, N> {
            self.call_builder(&setS2Call { newS2 })
        }
        ///Creates a new call builder for the [`setSimpleStruct`] function.
        pub fn setSimpleStruct(
            &self,
            _field1: alloy::sol_types::private::U256,
            _field2: u128,
            _field3: u128,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSimpleStructCall, N> {
            self.call_builder(&setSimpleStructCall {
                _field1,
                _field2,
                _field3,
            })
        }
        ///Creates a new call builder for the [`setSimples`] function.
        pub fn setSimples(
            &self,
            newS1: bool,
            newS2: alloy::sol_types::private::U256,
            newS3: alloy::sol_types::private::String,
            newS4: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSimplesCall, N> {
            self.call_builder(&setSimplesCall {
                newS1,
                newS2,
                newS3,
                newS4,
            })
        }
        ///Creates a new call builder for the [`simpleStruct`] function.
        pub fn simpleStruct(&self) -> alloy_contract::SolCallBuilder<T, &P, simpleStructCall, N> {
            self.call_builder(&simpleStructCall {})
        }
        ///Creates a new call builder for the [`structMapping`] function.
        pub fn structMapping(
            &self,
            _0: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, structMappingCall, N> {
            self.call_builder(&structMappingCall { _0 })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SimpleInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
