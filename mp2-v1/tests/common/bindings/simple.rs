/**

Generated by the following Solidity interface...
```solidity
interface Simple {
    function addToArray(uint256 value) external;
    function arr1(uint256) external view returns (uint256);
    function m1(address) external view returns (uint256);
    function s1() external view returns (bool);
    function s2() external view returns (uint256);
    function s3() external view returns (string memory);
    function s4() external view returns (address);
    function setMapping(address key, uint256 value) external;
    function setSimples(bool newS1, uint256 newS2, string memory newS3, address newS4) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "addToArray",
    "inputs": [
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "arr1",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "m1",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s3",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s4",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setMapping",
    "inputs": [
      {
        "name": "key",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSimples",
    "inputs": [
      {
        "name": "newS1",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "newS2",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "newS3",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "newS4",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod Simple {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506105dc8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c80636cc014de116100635780636cc014de14610117578063a314150f14610133578063a5d666a91461013c578063c8af3aa614610151578063d15ec8511461017c575f80fd5b80630200225c146100945780630c7dff02146100a95780635ce968e4146100db5780636987b1fb14610104575b5f80fd5b6100a76100a23660046102dc565b6101be565b005b6100c86100b73660046103b7565b60046020525f908152604090205481565b6040519081526020015b60405180910390f35b6100a76100e93660046103d7565b6001600160a01b039091165f90815260046020526040902055565b6100c86101123660046103ff565b610202565b5f546101239060ff1681565b60405190151581526020016100d2565b6100c860015481565b610144610221565b6040516100d29190610416565b600354610164906001600160a01b031681565b6040516001600160a01b0390911681526020016100d2565b6100a761018a3660046103ff565b600580546001810182555f919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b5f805460ff1916851515179055600183905560026101dc83826104e6565b50600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b60058181548110610211575f80fd5b5f91825260209091200154905081565b6002805461022e90610462565b80601f016020809104026020016040519081016040528092919081815260200182805461025a90610462565b80156102a55780601f1061027c576101008083540402835291602001916102a5565b820191905f5260205f20905b81548152906001019060200180831161028857829003601f168201915b505050505081565b634e487b7160e01b5f52604160045260245ffd5b80356001600160a01b03811681146102d7575f80fd5b919050565b5f805f80608085870312156102ef575f80fd5b843580151581146102fe575f80fd5b935060208501359250604085013567ffffffffffffffff80821115610321575f80fd5b818701915087601f830112610334575f80fd5b813581811115610346576103466102ad565b604051601f8201601f19908116603f0116810190838211818310171561036e5761036e6102ad565b816040528281528a6020848701011115610386575f80fd5b826020860160208301375f6020848301015280965050505050506103ac606086016102c1565b905092959194509250565b5f602082840312156103c7575f80fd5b6103d0826102c1565b9392505050565b5f80604083850312156103e8575f80fd5b6103f1836102c1565b946020939093013593505050565b5f6020828403121561040f575f80fd5b5035919050565b5f602080835283518060208501525f5b8181101561044257858101830151858201604001528201610426565b505f604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061047657607f821691505b60208210810361049457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156104e157805f5260205f20601f840160051c810160208510156104bf5750805b601f840160051c820191505b818110156104de575f81556001016104cb565b50505b505050565b815167ffffffffffffffff811115610500576105006102ad565b6105148161050e8454610462565b8461049a565b602080601f831160018114610547575f84156105305750858301515b5f19600386901b1c1916600185901b17855561059e565b5f85815260208120601f198616915b8281101561057557888601518255948401946001909101908401610556565b508582101561059257878501515f19600388901b60f8161c191681555b505060018460011b0185555b50505050505056fea2646970667358221220697f3465e4d51b4127055b3fd13f787a6af0fff31d62a7a68cfc89fbe520dff564736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[Pa\x05\xDC\x80a\0\x1D_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\x90W_5`\xE0\x1C\x80cl\xC0\x14\xDE\x11a\0cW\x80cl\xC0\x14\xDE\x14a\x01\x17W\x80c\xA3\x14\x15\x0F\x14a\x013W\x80c\xA5\xD6f\xA9\x14a\x01<W\x80c\xC8\xAF:\xA6\x14a\x01QW\x80c\xD1^\xC8Q\x14a\x01|W_\x80\xFD[\x80c\x02\0\"\\\x14a\0\x94W\x80c\x0C}\xFF\x02\x14a\0\xA9W\x80c\\\xE9h\xE4\x14a\0\xDBW\x80ci\x87\xB1\xFB\x14a\x01\x04W[_\x80\xFD[a\0\xA7a\0\xA26`\x04a\x02\xDCV[a\x01\xBEV[\0[a\0\xC8a\0\xB76`\x04a\x03\xB7V[`\x04` R_\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xA7a\0\xE96`\x04a\x03\xD7V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16_\x90\x81R`\x04` R`@\x90 UV[a\0\xC8a\x01\x126`\x04a\x03\xFFV[a\x02\x02V[_Ta\x01#\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\xD2V[a\0\xC8`\x01T\x81V[a\x01Da\x02!V[`@Qa\0\xD2\x91\x90a\x04\x16V[`\x03Ta\x01d\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xD2V[a\0\xA7a\x01\x8A6`\x04a\x03\xFFV[`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[_\x80T`\xFF\x19\x16\x85\x15\x15\x17\x90U`\x01\x83\x90U`\x02a\x01\xDC\x83\x82a\x04\xE6V[P`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPPPV[`\x05\x81\x81T\x81\x10a\x02\x11W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x02\x80Ta\x02.\x90a\x04bV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02Z\x90a\x04bV[\x80\x15a\x02\xA5W\x80`\x1F\x10a\x02|Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xA5V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\x88W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x02\xD7W_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x02\xEFW_\x80\xFD[\x845\x80\x15\x15\x81\x14a\x02\xFEW_\x80\xFD[\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x03!W_\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\x034W_\x80\xFD[\x815\x81\x81\x11\x15a\x03FWa\x03Fa\x02\xADV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x03nWa\x03na\x02\xADV[\x81`@R\x82\x81R\x8A` \x84\x87\x01\x01\x11\x15a\x03\x86W_\x80\xFD[\x82` \x86\x01` \x83\x017_` \x84\x83\x01\x01R\x80\x96PPPPPPa\x03\xAC``\x86\x01a\x02\xC1V[\x90P\x92\x95\x91\x94P\x92PV[_` \x82\x84\x03\x12\x15a\x03\xC7W_\x80\xFD[a\x03\xD0\x82a\x02\xC1V[\x93\x92PPPV[_\x80`@\x83\x85\x03\x12\x15a\x03\xE8W_\x80\xFD[a\x03\xF1\x83a\x02\xC1V[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x04\x0FW_\x80\xFD[P5\x91\x90PV[_` \x80\x83R\x83Q\x80` \x85\x01R_[\x81\x81\x10\x15a\x04BW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x04&V[P_`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x04vW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x04\x94WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x04\xE1W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x04\xBFWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x04\xDEW_\x81U`\x01\x01a\x04\xCBV[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\0Wa\x05\0a\x02\xADV[a\x05\x14\x81a\x05\x0E\x84Ta\x04bV[\x84a\x04\x9AV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x05GW_\x84\x15a\x050WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x05\x9EV[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x05uW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x05VV[P\x85\x82\x10\x15a\x05\x92W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV\xFE\xA2dipfsX\"\x12 i\x7F4e\xE4\xD5\x1BA'\x05[?\xD1?xzj\xF0\xFF\xF3\x1Db\xA7\xA6\x8C\xFC\x89\xFB\xE5 \xDF\xF5dsolcC\0\x08\x18\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610090575f3560e01c80636cc014de116100635780636cc014de14610117578063a314150f14610133578063a5d666a91461013c578063c8af3aa614610151578063d15ec8511461017c575f80fd5b80630200225c146100945780630c7dff02146100a95780635ce968e4146100db5780636987b1fb14610104575b5f80fd5b6100a76100a23660046102dc565b6101be565b005b6100c86100b73660046103b7565b60046020525f908152604090205481565b6040519081526020015b60405180910390f35b6100a76100e93660046103d7565b6001600160a01b039091165f90815260046020526040902055565b6100c86101123660046103ff565b610202565b5f546101239060ff1681565b60405190151581526020016100d2565b6100c860015481565b610144610221565b6040516100d29190610416565b600354610164906001600160a01b031681565b6040516001600160a01b0390911681526020016100d2565b6100a761018a3660046103ff565b600580546001810182555f919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b5f805460ff1916851515179055600183905560026101dc83826104e6565b50600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b60058181548110610211575f80fd5b5f91825260209091200154905081565b6002805461022e90610462565b80601f016020809104026020016040519081016040528092919081815260200182805461025a90610462565b80156102a55780601f1061027c576101008083540402835291602001916102a5565b820191905f5260205f20905b81548152906001019060200180831161028857829003601f168201915b505050505081565b634e487b7160e01b5f52604160045260245ffd5b80356001600160a01b03811681146102d7575f80fd5b919050565b5f805f80608085870312156102ef575f80fd5b843580151581146102fe575f80fd5b935060208501359250604085013567ffffffffffffffff80821115610321575f80fd5b818701915087601f830112610334575f80fd5b813581811115610346576103466102ad565b604051601f8201601f19908116603f0116810190838211818310171561036e5761036e6102ad565b816040528281528a6020848701011115610386575f80fd5b826020860160208301375f6020848301015280965050505050506103ac606086016102c1565b905092959194509250565b5f602082840312156103c7575f80fd5b6103d0826102c1565b9392505050565b5f80604083850312156103e8575f80fd5b6103f1836102c1565b946020939093013593505050565b5f6020828403121561040f575f80fd5b5035919050565b5f602080835283518060208501525f5b8181101561044257858101830151858201604001528201610426565b505f604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061047657607f821691505b60208210810361049457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156104e157805f5260205f20601f840160051c810160208510156104bf5750805b601f840160051c820191505b818110156104de575f81556001016104cb565b50505b505050565b815167ffffffffffffffff811115610500576105006102ad565b6105148161050e8454610462565b8461049a565b602080601f831160018114610547575f84156105305750858301515b5f19600386901b1c1916600185901b17855561059e565b5f85815260208120601f198616915b8281101561057557888601518255948401946001909101908401610556565b508582101561059257878501515f19600388901b60f8161c191681555b505060018460011b0185555b50505050505056fea2646970667358221220697f3465e4d51b4127055b3fd13f787a6af0fff31d62a7a68cfc89fbe520dff564736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\x90W_5`\xE0\x1C\x80cl\xC0\x14\xDE\x11a\0cW\x80cl\xC0\x14\xDE\x14a\x01\x17W\x80c\xA3\x14\x15\x0F\x14a\x013W\x80c\xA5\xD6f\xA9\x14a\x01<W\x80c\xC8\xAF:\xA6\x14a\x01QW\x80c\xD1^\xC8Q\x14a\x01|W_\x80\xFD[\x80c\x02\0\"\\\x14a\0\x94W\x80c\x0C}\xFF\x02\x14a\0\xA9W\x80c\\\xE9h\xE4\x14a\0\xDBW\x80ci\x87\xB1\xFB\x14a\x01\x04W[_\x80\xFD[a\0\xA7a\0\xA26`\x04a\x02\xDCV[a\x01\xBEV[\0[a\0\xC8a\0\xB76`\x04a\x03\xB7V[`\x04` R_\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xA7a\0\xE96`\x04a\x03\xD7V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16_\x90\x81R`\x04` R`@\x90 UV[a\0\xC8a\x01\x126`\x04a\x03\xFFV[a\x02\x02V[_Ta\x01#\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\xD2V[a\0\xC8`\x01T\x81V[a\x01Da\x02!V[`@Qa\0\xD2\x91\x90a\x04\x16V[`\x03Ta\x01d\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xD2V[a\0\xA7a\x01\x8A6`\x04a\x03\xFFV[`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[_\x80T`\xFF\x19\x16\x85\x15\x15\x17\x90U`\x01\x83\x90U`\x02a\x01\xDC\x83\x82a\x04\xE6V[P`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPPPV[`\x05\x81\x81T\x81\x10a\x02\x11W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x02\x80Ta\x02.\x90a\x04bV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02Z\x90a\x04bV[\x80\x15a\x02\xA5W\x80`\x1F\x10a\x02|Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xA5V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\x88W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x02\xD7W_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x02\xEFW_\x80\xFD[\x845\x80\x15\x15\x81\x14a\x02\xFEW_\x80\xFD[\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x03!W_\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\x034W_\x80\xFD[\x815\x81\x81\x11\x15a\x03FWa\x03Fa\x02\xADV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x03nWa\x03na\x02\xADV[\x81`@R\x82\x81R\x8A` \x84\x87\x01\x01\x11\x15a\x03\x86W_\x80\xFD[\x82` \x86\x01` \x83\x017_` \x84\x83\x01\x01R\x80\x96PPPPPPa\x03\xAC``\x86\x01a\x02\xC1V[\x90P\x92\x95\x91\x94P\x92PV[_` \x82\x84\x03\x12\x15a\x03\xC7W_\x80\xFD[a\x03\xD0\x82a\x02\xC1V[\x93\x92PPPV[_\x80`@\x83\x85\x03\x12\x15a\x03\xE8W_\x80\xFD[a\x03\xF1\x83a\x02\xC1V[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x04\x0FW_\x80\xFD[P5\x91\x90PV[_` \x80\x83R\x83Q\x80` \x85\x01R_[\x81\x81\x10\x15a\x04BW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x04&V[P_`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x04vW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x04\x94WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x04\xE1W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x04\xBFWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x04\xDEW_\x81U`\x01\x01a\x04\xCBV[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\0Wa\x05\0a\x02\xADV[a\x05\x14\x81a\x05\x0E\x84Ta\x04bV[\x84a\x04\x9AV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x05GW_\x84\x15a\x050WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x05\x9EV[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x05uW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x05VV[P\x85\x82\x10\x15a\x05\x92W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV\xFE\xA2dipfsX\"\x12 i\x7F4e\xE4\xD5\x1BA'\x05[?\xD1?xzj\xF0\xFF\xF3\x1Db\xA7\xA6\x8C\xFC\x89\xFB\xE5 \xDF\xF5dsolcC\0\x08\x18\x003",
    );
    /**Function with signature `addToArray(uint256)` and selector `0xd15ec851`.
    ```solidity
    function addToArray(uint256 value) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addToArrayCall {
        pub value: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`addToArray(uint256)`](addToArrayCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addToArrayReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToArrayCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToArrayCall) -> Self {
                    (value.value,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToArrayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { value: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToArrayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addToArrayReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToArrayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToArrayCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToArrayReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToArray(uint256)";
            const SELECTOR: [u8; 4] = [209u8, 94u8, 200u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `arr1(uint256)` and selector `0x6987b1fb`.
    ```solidity
    function arr1(uint256) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct arr1Call {
        pub _0: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`arr1(uint256)`](arr1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct arr1Return {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arr1Call> for UnderlyingRustTuple<'_> {
                fn from(value: arr1Call) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arr1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arr1Return> for UnderlyingRustTuple<'_> {
                fn from(value: arr1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arr1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for arr1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = arr1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "arr1(uint256)";
            const SELECTOR: [u8; 4] = [105u8, 135u8, 177u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `m1(address)` and selector `0x0c7dff02`.
    ```solidity
    function m1(address) external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct m1Call {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`m1(address)`](m1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct m1Return {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<m1Call> for UnderlyingRustTuple<'_> {
                fn from(value: m1Call) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for m1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<m1Return> for UnderlyingRustTuple<'_> {
                fn from(value: m1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for m1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for m1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = m1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "m1(address)";
            const SELECTOR: [u8; 4] = [12u8, 125u8, 255u8, 2u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s1()` and selector `0x6cc014de`.
    ```solidity
    function s1() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s1Call {}
    ///Container type for the return parameters of the [`s1()`](s1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s1Return {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s1Call> for UnderlyingRustTuple<'_> {
                fn from(value: s1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s1Return> for UnderlyingRustTuple<'_> {
                fn from(value: s1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s1()";
            const SELECTOR: [u8; 4] = [108u8, 192u8, 20u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s2()` and selector `0xa314150f`.
    ```solidity
    function s2() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s2Call {}
    ///Container type for the return parameters of the [`s2()`](s2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s2Return {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s2Call> for UnderlyingRustTuple<'_> {
                fn from(value: s2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s2Return> for UnderlyingRustTuple<'_> {
                fn from(value: s2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s2()";
            const SELECTOR: [u8; 4] = [163u8, 20u8, 21u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s3()` and selector `0xa5d666a9`.
    ```solidity
    function s3() external view returns (string memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s3Call {}
    ///Container type for the return parameters of the [`s3()`](s3Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s3Return {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s3Call> for UnderlyingRustTuple<'_> {
                fn from(value: s3Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s3Return> for UnderlyingRustTuple<'_> {
                fn from(value: s3Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s3Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s3()";
            const SELECTOR: [u8; 4] = [165u8, 214u8, 102u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `s4()` and selector `0xc8af3aa6`.
    ```solidity
    function s4() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s4Call {}
    ///Container type for the return parameters of the [`s4()`](s4Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s4Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s4Call> for UnderlyingRustTuple<'_> {
                fn from(value: s4Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s4Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s4Return> for UnderlyingRustTuple<'_> {
                fn from(value: s4Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s4Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s4Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = s4Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s4()";
            const SELECTOR: [u8; 4] = [200u8, 175u8, 58u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setMapping(address,uint256)` and selector `0x5ce968e4`.
    ```solidity
    function setMapping(address key, uint256 value) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setMappingCall {
        pub key: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`setMapping(address,uint256)`](setMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setMappingReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingCall> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingCall) -> Self {
                    (value.key, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        key: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMappingCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMappingReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMapping(address,uint256)";
            const SELECTOR: [u8; 4] = [92u8, 233u8, 104u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.key,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setSimples(bool,uint256,string,address)` and selector `0x0200225c`.
    ```solidity
    function setSimples(bool newS1, uint256 newS2, string memory newS3, address newS4) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setSimplesCall {
        pub newS1: bool,
        pub newS2: alloy::sol_types::private::U256,
        pub newS3: alloy::sol_types::private::String,
        pub newS4: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setSimples(bool,uint256,string,address)`](setSimplesCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setSimplesReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                bool,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimplesCall> for UnderlyingRustTuple<'_> {
                fn from(value: setSimplesCall) -> Self {
                    (value.newS1, value.newS2, value.newS3, value.newS4)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimplesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newS1: tuple.0,
                        newS2: tuple.1,
                        newS3: tuple.2,
                        newS4: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimplesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setSimplesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimplesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSimplesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSimplesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSimples(bool,uint256,string,address)";
            const SELECTOR: [u8; 4] = [2u8, 0u8, 34u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.newS1,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.newS2,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newS3,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newS4,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`Simple`](self) function calls.
    pub enum SimpleCalls {
        addToArray(addToArrayCall),
        arr1(arr1Call),
        m1(m1Call),
        s1(s1Call),
        s2(s2Call),
        s3(s3Call),
        s4(s4Call),
        setMapping(setMappingCall),
        setSimples(setSimplesCall),
    }
    #[automatically_derived]
    impl SimpleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [2u8, 0u8, 34u8, 92u8],
            [12u8, 125u8, 255u8, 2u8],
            [92u8, 233u8, 104u8, 228u8],
            [105u8, 135u8, 177u8, 251u8],
            [108u8, 192u8, 20u8, 222u8],
            [163u8, 20u8, 21u8, 15u8],
            [165u8, 214u8, 102u8, 169u8],
            [200u8, 175u8, 58u8, 166u8],
            [209u8, 94u8, 200u8, 81u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SimpleCalls {
        const NAME: &'static str = "SimpleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addToArray(_) => <addToArrayCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::arr1(_) => <arr1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::m1(_) => <m1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s1(_) => <s1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s2(_) => <s2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s3(_) => <s3Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s4(_) => <s4Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::setMapping(_) => <setMappingCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setSimples(_) => <setSimplesCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8], bool) -> alloy_sol_types::Result<SimpleCalls>] = &[
                {
                    fn setSimples(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setSimplesCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::setSimples)
                    }
                    setSimples
                },
                {
                    fn m1(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <m1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::m1)
                    }
                    m1
                },
                {
                    fn setMapping(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::setMapping)
                    }
                    setMapping
                },
                {
                    fn arr1(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <arr1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::arr1)
                    }
                    arr1
                },
                {
                    fn s1(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s1)
                    }
                    s1
                },
                {
                    fn s2(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s2Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s2)
                    }
                    s2
                },
                {
                    fn s3(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s3Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s3)
                    }
                    s3
                },
                {
                    fn s4(data: &[u8], validate: bool) -> alloy_sol_types::Result<SimpleCalls> {
                        <s4Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::s4)
                    }
                    s4
                },
                {
                    fn addToArray(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <addToArrayCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SimpleCalls::addToArray)
                    }
                    addToArray
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addToArray(inner) => {
                    <addToArrayCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::arr1(inner) => {
                    <arr1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::m1(inner) => <m1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::s1(inner) => <s1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::s2(inner) => <s2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::s3(inner) => <s3Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::s4(inner) => <s4Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::setMapping(inner) => {
                    <setMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setSimples(inner) => {
                    <setSimplesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addToArray(inner) => {
                    <addToArrayCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::arr1(inner) => {
                    <arr1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::m1(inner) => <m1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::s1(inner) => <s1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::s2(inner) => <s2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::s3(inner) => <s3Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::s4(inner) => <s4Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::setMapping(inner) => {
                    <setMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setSimples(inner) => {
                    <setSimplesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Simple`](self) contract instance.

    See the [wrapper's documentation](`SimpleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SimpleInstance<T, P, N> {
        SimpleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<SimpleInstance<T, P, N>>> {
        SimpleInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SimpleInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Simple`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`Simple`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SimpleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SimpleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SimpleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SimpleInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`Simple`](self) contract instance.

        See the [wrapper's documentation](`SimpleInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(provider: P) -> alloy_contract::Result<SimpleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SimpleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SimpleInstance<T, P, N> {
            SimpleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SimpleInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addToArray`] function.
        pub fn addToArray(
            &self,
            value: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToArrayCall, N> {
            self.call_builder(&addToArrayCall { value })
        }
        ///Creates a new call builder for the [`arr1`] function.
        pub fn arr1(
            &self,
            _0: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, arr1Call, N> {
            self.call_builder(&arr1Call { _0 })
        }
        ///Creates a new call builder for the [`m1`] function.
        pub fn m1(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, m1Call, N> {
            self.call_builder(&m1Call { _0 })
        }
        ///Creates a new call builder for the [`s1`] function.
        pub fn s1(&self) -> alloy_contract::SolCallBuilder<T, &P, s1Call, N> {
            self.call_builder(&s1Call {})
        }
        ///Creates a new call builder for the [`s2`] function.
        pub fn s2(&self) -> alloy_contract::SolCallBuilder<T, &P, s2Call, N> {
            self.call_builder(&s2Call {})
        }
        ///Creates a new call builder for the [`s3`] function.
        pub fn s3(&self) -> alloy_contract::SolCallBuilder<T, &P, s3Call, N> {
            self.call_builder(&s3Call {})
        }
        ///Creates a new call builder for the [`s4`] function.
        pub fn s4(&self) -> alloy_contract::SolCallBuilder<T, &P, s4Call, N> {
            self.call_builder(&s4Call {})
        }
        ///Creates a new call builder for the [`setMapping`] function.
        pub fn setMapping(
            &self,
            key: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMappingCall, N> {
            self.call_builder(&setMappingCall { key, value })
        }
        ///Creates a new call builder for the [`setSimples`] function.
        pub fn setSimples(
            &self,
            newS1: bool,
            newS2: alloy::sol_types::private::U256,
            newS3: alloy::sol_types::private::String,
            newS4: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSimplesCall, N> {
            self.call_builder(&setSimplesCall {
                newS1,
                newS2,
                newS3,
                newS4,
            })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SimpleInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
