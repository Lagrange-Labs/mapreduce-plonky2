/**

Generated by the following Solidity interface...
```solidity
interface DeploySimple {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod DeploySimple {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015610020575f80fd5b506108f28061002e5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063c040622614610038578063f8ccbf4714610042575b5f80fd5b610040610069565b005b600c546100559062010000900460ff1681565b604051901515815260200160405180910390f35b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156100c3575f80fd5b505af11580156100d5573d5f803e3d5ffd5b505050505f604051806040016040528060068152602001656d70322d763160d01b81525090505f8160405160200161010d9190610248565b6040516020818303038152906040528051906020012090505f6040518060200161013690610219565b6020820181038252601f19601f820116604052509050808360405160200161015e9190610263565b60408051601f198184030181529082905261017c9291602001610295565b60405160208183030381529060405290505f828251602084015ff59050803b6101a3575f80fd5b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156101fd575f80fd5b505af115801561020f573d5f803e3d5ffd5b5050505050505050565b6105f9806102c483390190565b5f5b83811015610240578181015183820152602001610228565b50505f910152565b5f8251610259818460208701610226565b9190910192915050565b602081525f8251806020840152610281816040850160208701610226565b601f01601f19169190910160400192915050565b5f83516102a6818460208801610226565b8351908301906102ba818360208801610226565b0194935050505056fe608060405234801561000f575f80fd5b506105dc8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c80636cc014de116100635780636cc014de14610117578063a314150f14610133578063a5d666a91461013c578063c8af3aa614610151578063d15ec8511461017c575f80fd5b80630200225c146100945780630c7dff02146100a95780635ce968e4146100db5780636987b1fb14610104575b5f80fd5b6100a76100a23660046102dc565b6101be565b005b6100c86100b73660046103b7565b60046020525f908152604090205481565b6040519081526020015b60405180910390f35b6100a76100e93660046103d7565b6001600160a01b039091165f90815260046020526040902055565b6100c86101123660046103ff565b610202565b5f546101239060ff1681565b60405190151581526020016100d2565b6100c860015481565b610144610221565b6040516100d29190610416565b600354610164906001600160a01b031681565b6040516001600160a01b0390911681526020016100d2565b6100a761018a3660046103ff565b600580546001810182555f919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b5f805460ff1916851515179055600183905560026101dc83826104e6565b50600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b60058181548110610211575f80fd5b5f91825260209091200154905081565b6002805461022e90610462565b80601f016020809104026020016040519081016040528092919081815260200182805461025a90610462565b80156102a55780601f1061027c576101008083540402835291602001916102a5565b820191905f5260205f20905b81548152906001019060200180831161028857829003601f168201915b505050505081565b634e487b7160e01b5f52604160045260245ffd5b80356001600160a01b03811681146102d7575f80fd5b919050565b5f805f80608085870312156102ef575f80fd5b843580151581146102fe575f80fd5b935060208501359250604085013567ffffffffffffffff80821115610321575f80fd5b818701915087601f830112610334575f80fd5b813581811115610346576103466102ad565b604051601f8201601f19908116603f0116810190838211818310171561036e5761036e6102ad565b816040528281528a6020848701011115610386575f80fd5b826020860160208301375f6020848301015280965050505050506103ac606086016102c1565b905092959194509250565b5f602082840312156103c7575f80fd5b6103d0826102c1565b9392505050565b5f80604083850312156103e8575f80fd5b6103f1836102c1565b946020939093013593505050565b5f6020828403121561040f575f80fd5b5035919050565b5f602080835283518060208501525f5b8181101561044257858101830151858201604001528201610426565b505f604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061047657607f821691505b60208210810361049457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156104e157805f5260205f20601f840160051c810160208510156104bf5750805b601f840160051c820191505b818110156104de575f81556001016104cb565b50505b505050565b815167ffffffffffffffff811115610500576105006102ad565b6105148161050e8454610462565b8461049a565b602080601f831160018114610547575f84156105305750858301515b5f19600386901b1c1916600185901b17855561059e565b5f85815260208120601f198616915b8281101561057557888601518255948401946001909101908401610556565b508582101561059257878501515f19600388901b60f8161c191681555b505060018460011b0185555b50505050505056fea26469706673582212204cb7cce4b456c611a1b8ed595894c8576fdc550134c8e32bd1b8119bbc878cc164736f6c63430008180033a26469706673582212206263d07d7b5b22ce9e7f433ae5ac432a1913a269954c83453e9d167e20c687f264736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15a\0 W_\x80\xFD[Pa\x08\xF2\x80a\0._9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0BW[_\x80\xFD[a\0@a\0iV[\0[`\x0CTa\0U\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\0\xC3W_\x80\xFD[PZ\xF1\x15\x80\x15a\0\xD5W=_\x80>=_\xFD[PPPP_`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01emp2-v1`\xD0\x1B\x81RP\x90P_\x81`@Q` \x01a\x01\r\x91\x90a\x02HV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P_`@Q\x80` \x01a\x016\x90a\x02\x19V[` \x82\x01\x81\x03\x82R`\x1F\x19`\x1F\x82\x01\x16`@RP\x90P\x80\x83`@Q` \x01a\x01^\x91\x90a\x02cV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x01|\x92\x91` \x01a\x02\x95V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_\x82\x82Q` \x84\x01_\xF5\x90P\x80;a\x01\xA3W_\x80\xFD[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xFDW_\x80\xFD[PZ\xF1\x15\x80\x15a\x02\x0FW=_\x80>=_\xFD[PPPPPPPPV[a\x05\xF9\x80a\x02\xC4\x839\x01\x90V[_[\x83\x81\x10\x15a\x02@W\x81\x81\x01Q\x83\x82\x01R` \x01a\x02(V[PP_\x91\x01RV[_\x82Qa\x02Y\x81\x84` \x87\x01a\x02&V[\x91\x90\x91\x01\x92\x91PPV[` \x81R_\x82Q\x80` \x84\x01Ra\x02\x81\x81`@\x85\x01` \x87\x01a\x02&V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[_\x83Qa\x02\xA6\x81\x84` \x88\x01a\x02&V[\x83Q\x90\x83\x01\x90a\x02\xBA\x81\x83` \x88\x01a\x02&V[\x01\x94\x93PPPPV\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[Pa\x05\xDC\x80a\0\x1D_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\x90W_5`\xE0\x1C\x80cl\xC0\x14\xDE\x11a\0cW\x80cl\xC0\x14\xDE\x14a\x01\x17W\x80c\xA3\x14\x15\x0F\x14a\x013W\x80c\xA5\xD6f\xA9\x14a\x01<W\x80c\xC8\xAF:\xA6\x14a\x01QW\x80c\xD1^\xC8Q\x14a\x01|W_\x80\xFD[\x80c\x02\0\"\\\x14a\0\x94W\x80c\x0C}\xFF\x02\x14a\0\xA9W\x80c\\\xE9h\xE4\x14a\0\xDBW\x80ci\x87\xB1\xFB\x14a\x01\x04W[_\x80\xFD[a\0\xA7a\0\xA26`\x04a\x02\xDCV[a\x01\xBEV[\0[a\0\xC8a\0\xB76`\x04a\x03\xB7V[`\x04` R_\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xA7a\0\xE96`\x04a\x03\xD7V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16_\x90\x81R`\x04` R`@\x90 UV[a\0\xC8a\x01\x126`\x04a\x03\xFFV[a\x02\x02V[_Ta\x01#\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\xD2V[a\0\xC8`\x01T\x81V[a\x01Da\x02!V[`@Qa\0\xD2\x91\x90a\x04\x16V[`\x03Ta\x01d\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xD2V[a\0\xA7a\x01\x8A6`\x04a\x03\xFFV[`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[_\x80T`\xFF\x19\x16\x85\x15\x15\x17\x90U`\x01\x83\x90U`\x02a\x01\xDC\x83\x82a\x04\xE6V[P`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPPPV[`\x05\x81\x81T\x81\x10a\x02\x11W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x02\x80Ta\x02.\x90a\x04bV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02Z\x90a\x04bV[\x80\x15a\x02\xA5W\x80`\x1F\x10a\x02|Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xA5V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\x88W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x02\xD7W_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x02\xEFW_\x80\xFD[\x845\x80\x15\x15\x81\x14a\x02\xFEW_\x80\xFD[\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x03!W_\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\x034W_\x80\xFD[\x815\x81\x81\x11\x15a\x03FWa\x03Fa\x02\xADV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x03nWa\x03na\x02\xADV[\x81`@R\x82\x81R\x8A` \x84\x87\x01\x01\x11\x15a\x03\x86W_\x80\xFD[\x82` \x86\x01` \x83\x017_` \x84\x83\x01\x01R\x80\x96PPPPPPa\x03\xAC``\x86\x01a\x02\xC1V[\x90P\x92\x95\x91\x94P\x92PV[_` \x82\x84\x03\x12\x15a\x03\xC7W_\x80\xFD[a\x03\xD0\x82a\x02\xC1V[\x93\x92PPPV[_\x80`@\x83\x85\x03\x12\x15a\x03\xE8W_\x80\xFD[a\x03\xF1\x83a\x02\xC1V[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x04\x0FW_\x80\xFD[P5\x91\x90PV[_` \x80\x83R\x83Q\x80` \x85\x01R_[\x81\x81\x10\x15a\x04BW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x04&V[P_`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x04vW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x04\x94WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x04\xE1W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x04\xBFWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x04\xDEW_\x81U`\x01\x01a\x04\xCBV[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\0Wa\x05\0a\x02\xADV[a\x05\x14\x81a\x05\x0E\x84Ta\x04bV[\x84a\x04\x9AV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x05GW_\x84\x15a\x050WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x05\x9EV[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x05uW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x05VV[P\x85\x82\x10\x15a\x05\x92W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV\xFE\xA2dipfsX\"\x12 L\xB7\xCC\xE4\xB4V\xC6\x11\xA1\xB8\xEDYX\x94\xC8Wo\xDCU\x014\xC8\xE3+\xD1\xB8\x11\x9B\xBC\x87\x8C\xC1dsolcC\0\x08\x18\x003\xA2dipfsX\"\x12 bc\xD0}{[\"\xCE\x9E\x7FC:\xE5\xACC*\x19\x13\xA2i\x95L\x83E>\x9D\x16~ \xC6\x87\xF2dsolcC\0\x08\x18\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063c040622614610038578063f8ccbf4714610042575b5f80fd5b610040610069565b005b600c546100559062010000900460ff1681565b604051901515815260200160405180910390f35b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156100c3575f80fd5b505af11580156100d5573d5f803e3d5ffd5b505050505f604051806040016040528060068152602001656d70322d763160d01b81525090505f8160405160200161010d9190610248565b6040516020818303038152906040528051906020012090505f6040518060200161013690610219565b6020820181038252601f19601f820116604052509050808360405160200161015e9190610263565b60408051601f198184030181529082905261017c9291602001610295565b60405160208183030381529060405290505f828251602084015ff59050803b6101a3575f80fd5b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156101fd575f80fd5b505af115801561020f573d5f803e3d5ffd5b5050505050505050565b6105f9806102c483390190565b5f5b83811015610240578181015183820152602001610228565b50505f910152565b5f8251610259818460208701610226565b9190910192915050565b602081525f8251806020840152610281816040850160208701610226565b601f01601f19169190910160400192915050565b5f83516102a6818460208801610226565b8351908301906102ba818360208801610226565b0194935050505056fe608060405234801561000f575f80fd5b506105dc8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c80636cc014de116100635780636cc014de14610117578063a314150f14610133578063a5d666a91461013c578063c8af3aa614610151578063d15ec8511461017c575f80fd5b80630200225c146100945780630c7dff02146100a95780635ce968e4146100db5780636987b1fb14610104575b5f80fd5b6100a76100a23660046102dc565b6101be565b005b6100c86100b73660046103b7565b60046020525f908152604090205481565b6040519081526020015b60405180910390f35b6100a76100e93660046103d7565b6001600160a01b039091165f90815260046020526040902055565b6100c86101123660046103ff565b610202565b5f546101239060ff1681565b60405190151581526020016100d2565b6100c860015481565b610144610221565b6040516100d29190610416565b600354610164906001600160a01b031681565b6040516001600160a01b0390911681526020016100d2565b6100a761018a3660046103ff565b600580546001810182555f919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b5f805460ff1916851515179055600183905560026101dc83826104e6565b50600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b60058181548110610211575f80fd5b5f91825260209091200154905081565b6002805461022e90610462565b80601f016020809104026020016040519081016040528092919081815260200182805461025a90610462565b80156102a55780601f1061027c576101008083540402835291602001916102a5565b820191905f5260205f20905b81548152906001019060200180831161028857829003601f168201915b505050505081565b634e487b7160e01b5f52604160045260245ffd5b80356001600160a01b03811681146102d7575f80fd5b919050565b5f805f80608085870312156102ef575f80fd5b843580151581146102fe575f80fd5b935060208501359250604085013567ffffffffffffffff80821115610321575f80fd5b818701915087601f830112610334575f80fd5b813581811115610346576103466102ad565b604051601f8201601f19908116603f0116810190838211818310171561036e5761036e6102ad565b816040528281528a6020848701011115610386575f80fd5b826020860160208301375f6020848301015280965050505050506103ac606086016102c1565b905092959194509250565b5f602082840312156103c7575f80fd5b6103d0826102c1565b9392505050565b5f80604083850312156103e8575f80fd5b6103f1836102c1565b946020939093013593505050565b5f6020828403121561040f575f80fd5b5035919050565b5f602080835283518060208501525f5b8181101561044257858101830151858201604001528201610426565b505f604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061047657607f821691505b60208210810361049457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156104e157805f5260205f20601f840160051c810160208510156104bf5750805b601f840160051c820191505b818110156104de575f81556001016104cb565b50505b505050565b815167ffffffffffffffff811115610500576105006102ad565b6105148161050e8454610462565b8461049a565b602080601f831160018114610547575f84156105305750858301515b5f19600386901b1c1916600185901b17855561059e565b5f85815260208120601f198616915b8281101561057557888601518255948401946001909101908401610556565b508582101561059257878501515f19600388901b60f8161c191681555b505060018460011b0185555b50505050505056fea26469706673582212204cb7cce4b456c611a1b8ed595894c8576fdc550134c8e32bd1b8119bbc878cc164736f6c63430008180033a26469706673582212206263d07d7b5b22ce9e7f433ae5ac432a1913a269954c83453e9d167e20c687f264736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0BW[_\x80\xFD[a\0@a\0iV[\0[`\x0CTa\0U\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\0\xC3W_\x80\xFD[PZ\xF1\x15\x80\x15a\0\xD5W=_\x80>=_\xFD[PPPP_`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01emp2-v1`\xD0\x1B\x81RP\x90P_\x81`@Q` \x01a\x01\r\x91\x90a\x02HV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P_`@Q\x80` \x01a\x016\x90a\x02\x19V[` \x82\x01\x81\x03\x82R`\x1F\x19`\x1F\x82\x01\x16`@RP\x90P\x80\x83`@Q` \x01a\x01^\x91\x90a\x02cV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x01|\x92\x91` \x01a\x02\x95V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_\x82\x82Q` \x84\x01_\xF5\x90P\x80;a\x01\xA3W_\x80\xFD[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xFDW_\x80\xFD[PZ\xF1\x15\x80\x15a\x02\x0FW=_\x80>=_\xFD[PPPPPPPPV[a\x05\xF9\x80a\x02\xC4\x839\x01\x90V[_[\x83\x81\x10\x15a\x02@W\x81\x81\x01Q\x83\x82\x01R` \x01a\x02(V[PP_\x91\x01RV[_\x82Qa\x02Y\x81\x84` \x87\x01a\x02&V[\x91\x90\x91\x01\x92\x91PPV[` \x81R_\x82Q\x80` \x84\x01Ra\x02\x81\x81`@\x85\x01` \x87\x01a\x02&V[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV[_\x83Qa\x02\xA6\x81\x84` \x88\x01a\x02&V[\x83Q\x90\x83\x01\x90a\x02\xBA\x81\x83` \x88\x01a\x02&V[\x01\x94\x93PPPPV\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[Pa\x05\xDC\x80a\0\x1D_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\x90W_5`\xE0\x1C\x80cl\xC0\x14\xDE\x11a\0cW\x80cl\xC0\x14\xDE\x14a\x01\x17W\x80c\xA3\x14\x15\x0F\x14a\x013W\x80c\xA5\xD6f\xA9\x14a\x01<W\x80c\xC8\xAF:\xA6\x14a\x01QW\x80c\xD1^\xC8Q\x14a\x01|W_\x80\xFD[\x80c\x02\0\"\\\x14a\0\x94W\x80c\x0C}\xFF\x02\x14a\0\xA9W\x80c\\\xE9h\xE4\x14a\0\xDBW\x80ci\x87\xB1\xFB\x14a\x01\x04W[_\x80\xFD[a\0\xA7a\0\xA26`\x04a\x02\xDCV[a\x01\xBEV[\0[a\0\xC8a\0\xB76`\x04a\x03\xB7V[`\x04` R_\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xA7a\0\xE96`\x04a\x03\xD7V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16_\x90\x81R`\x04` R`@\x90 UV[a\0\xC8a\x01\x126`\x04a\x03\xFFV[a\x02\x02V[_Ta\x01#\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\xD2V[a\0\xC8`\x01T\x81V[a\x01Da\x02!V[`@Qa\0\xD2\x91\x90a\x04\x16V[`\x03Ta\x01d\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xD2V[a\0\xA7a\x01\x8A6`\x04a\x03\xFFV[`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[_\x80T`\xFF\x19\x16\x85\x15\x15\x17\x90U`\x01\x83\x90U`\x02a\x01\xDC\x83\x82a\x04\xE6V[P`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPPPV[`\x05\x81\x81T\x81\x10a\x02\x11W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x02\x80Ta\x02.\x90a\x04bV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02Z\x90a\x04bV[\x80\x15a\x02\xA5W\x80`\x1F\x10a\x02|Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02\xA5V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\x88W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x02\xD7W_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x02\xEFW_\x80\xFD[\x845\x80\x15\x15\x81\x14a\x02\xFEW_\x80\xFD[\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x03!W_\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\x034W_\x80\xFD[\x815\x81\x81\x11\x15a\x03FWa\x03Fa\x02\xADV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x03nWa\x03na\x02\xADV[\x81`@R\x82\x81R\x8A` \x84\x87\x01\x01\x11\x15a\x03\x86W_\x80\xFD[\x82` \x86\x01` \x83\x017_` \x84\x83\x01\x01R\x80\x96PPPPPPa\x03\xAC``\x86\x01a\x02\xC1V[\x90P\x92\x95\x91\x94P\x92PV[_` \x82\x84\x03\x12\x15a\x03\xC7W_\x80\xFD[a\x03\xD0\x82a\x02\xC1V[\x93\x92PPPV[_\x80`@\x83\x85\x03\x12\x15a\x03\xE8W_\x80\xFD[a\x03\xF1\x83a\x02\xC1V[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x04\x0FW_\x80\xFD[P5\x91\x90PV[_` \x80\x83R\x83Q\x80` \x85\x01R_[\x81\x81\x10\x15a\x04BW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x04&V[P_`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x04vW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x04\x94WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x04\xE1W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x04\xBFWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x04\xDEW_\x81U`\x01\x01a\x04\xCBV[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\0Wa\x05\0a\x02\xADV[a\x05\x14\x81a\x05\x0E\x84Ta\x04bV[\x84a\x04\x9AV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x05GW_\x84\x15a\x050WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x05\x9EV[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x05uW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x05VV[P\x85\x82\x10\x15a\x05\x92W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV\xFE\xA2dipfsX\"\x12 L\xB7\xCC\xE4\xB4V\xC6\x11\xA1\xB8\xEDYX\x94\xC8Wo\xDCU\x014\xC8\xE3+\xD1\xB8\x11\x9B\xBC\x87\x8C\xC1dsolcC\0\x08\x18\x003\xA2dipfsX\"\x12 bc\xD0}{[\"\xCE\x9E\x7FC:\xE5\xACC*\x19\x13\xA2i\x95L\x83E>\x9D\x16~ \xC6\x87\xF2dsolcC\0\x08\x18\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
    ```solidity
    function IS_SCRIPT() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
    ```solidity
    function run() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`DeploySimple`](self) function calls.
    pub enum DeploySimpleCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
    }
    #[automatically_derived]
    impl DeploySimpleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] =
            &[[192u8, 64u8, 98u8, 38u8], [248u8, 204u8, 191u8, 71u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DeploySimpleCalls {
        const NAME: &'static str = "DeploySimpleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<DeploySimpleCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DeploySimpleCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(DeploySimpleCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DeploySimpleCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(DeploySimpleCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DeploySimple`](self) contract instance.

    See the [wrapper's documentation](`DeploySimpleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DeploySimpleInstance<T, P, N> {
        DeploySimpleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<DeploySimpleInstance<T, P, N>>>
    {
        DeploySimpleInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        DeploySimpleInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`DeploySimple`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`DeploySimple`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DeploySimpleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for DeploySimpleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DeploySimpleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > DeploySimpleInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`DeploySimple`](self) contract instance.

        See the [wrapper's documentation](`DeploySimpleInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(provider: P) -> alloy_contract::Result<DeploySimpleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> DeploySimpleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DeploySimpleInstance<T, P, N> {
            DeploySimpleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > DeploySimpleInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > DeploySimpleInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
