/**

Generated by the following Solidity interface...
```solidity
interface Simple {
    type MappingOperation is uint8;
    struct MappingChange {
        uint256 key;
        address value;
        MappingOperation operation;
    }

    function addToArray(uint256 value) external;
    function arr1(uint256) external view returns (uint256);
    function changeMapping(MappingChange[] memory changes) external;
    function m1(uint256) external view returns (address);
    function myStruct() external view returns (uint256 field1, uint128 field2, uint128 field3);
    function s1() external view returns (bool);
    function s2() external view returns (uint256);
    function s3() external view returns (string memory);
    function s4() external view returns (address);
    function setLargeStruct(uint256 field1, uint128 field2, uint128 field3) external;
    function setMapping(uint256 key, address value) external;
    function setS2(uint256 newS2) external;
    function setSimples(bool newS1, uint256 newS2, string memory newS3, address newS4) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "addToArray",
    "inputs": [
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "arr1",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "changeMapping",
    "inputs": [
      {
        "name": "changes",
        "type": "tuple[]",
        "internalType": "struct Simple.MappingChange[]",
        "components": [
          {
            "name": "key",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "value",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "operation",
            "type": "uint8",
            "internalType": "enum Simple.MappingOperation"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "m1",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "myStruct",
    "inputs": [],
    "outputs": [
      {
        "name": "field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s3",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "s4",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setLargeStruct",
    "inputs": [
      {
        "name": "field1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "field2",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "field3",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMapping",
    "inputs": [
      {
        "name": "key",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setS2",
    "inputs": [
      {
        "name": "newS2",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSimples",
    "inputs": [
      {
        "name": "newS1",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "newS2",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "newS3",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "newS4",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod Simple {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506109898061001d5f395ff3fe608060405234801561000f575f80fd5b50600436106100cb575f3560e01c80638bc9fe6c11610088578063be7c036b11610063578063be7c036b146101f1578063c8af3aa61461021e578063d15ec85114610231578063f25d54f514610273575f80fd5b80638bc9fe6c1461018c578063a314150f146101d3578063a5d666a9146101dc575f80fd5b80630200225c146100cf5780630c1616c9146100e45780631c134315146100f75780632ae426861461010a5780636987b1fb1461014f5780636cc014de14610170575b5f80fd5b6100e26100dd36600461056c565b610286565b005b6100e26100f236600461062b565b6102ca565b6100e261010536600461070b565b61040b565b610132610118366004610735565b60046020525f90815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61016261015d366004610735565b610438565b604051908152602001610146565b5f5461017c9060ff1681565b6040519015158152602001610146565b6006546007546101ae91906001600160801b0380821691600160801b90041683565b604080519384526001600160801b039283166020850152911690820152606001610146565b61016260015481565b6101e4610457565b604051610146919061074c565b6100e26101ff3660046107ae565b6006929092556001600160801b03918216600160801b02911617600755565b600354610132906001600160a01b031681565b6100e261023f366004610735565b600580546001810182555f919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b6100e2610281366004610735565b600155565b5f805460ff1916851515179055600183905560026102a4838261086b565b50600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b5f5b8151811015610407575f8282815181106102e8576102e861093f565b60200260200101516040015160028111156103055761030561092b565b0361034c5760045f83838151811061031f5761031f61093f565b6020908102919091018101515182528101919091526040015f2080546001600160a01b03191690556103ff565b60028282815181106103605761036061093f565b602002602001015160400151600281111561037d5761037d61092b565b14806103b7575060018282815181106103985761039861093f565b60200260200101516040015160028111156103b5576103b561092b565b145b156103ff576103ff8282815181106103d1576103d161093f565b60200260200101515f01518383815181106103ee576103ee61093f565b60200260200101516020015161040b565b6001016102cc565b5050565b5f9182526004602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60058181548110610447575f80fd5b5f91825260209091200154905081565b60028054610464906107e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610490906107e7565b80156104db5780601f106104b2576101008083540402835291602001916104db565b820191905f5260205f20905b8154815290600101906020018083116104be57829003601f168201915b505050505081565b634e487b7160e01b5f52604160045260245ffd5b6040516060810167ffffffffffffffff8111828210171561051a5761051a6104e3565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610549576105496104e3565b604052919050565b80356001600160a01b0381168114610567575f80fd5b919050565b5f805f806080858703121561057f575f80fd5b8435801515811461058e575f80fd5b93506020858101359350604086013567ffffffffffffffff808211156105b2575f80fd5b818801915088601f8301126105c5575f80fd5b8135818111156105d7576105d76104e3565b6105e9601f8201601f19168501610520565b915080825289848285010111156105fe575f80fd5b80848401858401375f8482840101525080945050505061062060608601610551565b905092959194509250565b5f602080838503121561063c575f80fd5b823567ffffffffffffffff80821115610653575f80fd5b818501915085601f830112610666575f80fd5b813581811115610678576106786104e3565b610686848260051b01610520565b818152848101925060609182028401850191888311156106a4575f80fd5b938501935b828510156106ff5780858a0312156106bf575f80fd5b6106c76104f7565b853581526106d6878701610551565b87820152604080870135600381106106ec575f80fd5b90820152845293840193928501926106a9565b50979650505050505050565b5f806040838503121561071c575f80fd5b8235915061072c60208401610551565b90509250929050565b5f60208284031215610745575f80fd5b5035919050565b5f602080835283518060208501525f5b818110156107785785810183015185820160400152820161075c565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160801b0381168114610567575f80fd5b5f805f606084860312156107c0575f80fd5b833592506107d060208501610798565b91506107de60408501610798565b90509250925092565b600181811c908216806107fb57607f821691505b60208210810361081957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561086657805f5260205f20601f840160051c810160208510156108445750805b601f840160051c820191505b81811015610863575f8155600101610850565b50505b505050565b815167ffffffffffffffff811115610885576108856104e3565b6108998161089384546107e7565b8461081f565b602080601f8311600181146108cc575f84156108b55750858301515b5f19600386901b1c1916600185901b178555610923565b5f85815260208120601f198616915b828110156108fa578886015182559484019460019091019084016108db565b508582101561091757878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220bf224d7a59f3e4687f26f1db26f6d23c8b19d9296133f9b51586d67026a6b77b64736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[Pa\t\x89\x80a\0\x1D_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\xCBW_5`\xE0\x1C\x80c\x8B\xC9\xFEl\x11a\0\x88W\x80c\xBE|\x03k\x11a\0cW\x80c\xBE|\x03k\x14a\x01\xF1W\x80c\xC8\xAF:\xA6\x14a\x02\x1EW\x80c\xD1^\xC8Q\x14a\x021W\x80c\xF2]T\xF5\x14a\x02sW_\x80\xFD[\x80c\x8B\xC9\xFEl\x14a\x01\x8CW\x80c\xA3\x14\x15\x0F\x14a\x01\xD3W\x80c\xA5\xD6f\xA9\x14a\x01\xDCW_\x80\xFD[\x80c\x02\0\"\\\x14a\0\xCFW\x80c\x0C\x16\x16\xC9\x14a\0\xE4W\x80c\x1C\x13C\x15\x14a\0\xF7W\x80c*\xE4&\x86\x14a\x01\nW\x80ci\x87\xB1\xFB\x14a\x01OW\x80cl\xC0\x14\xDE\x14a\x01pW[_\x80\xFD[a\0\xE2a\0\xDD6`\x04a\x05lV[a\x02\x86V[\0[a\0\xE2a\0\xF26`\x04a\x06+V[a\x02\xCAV[a\0\xE2a\x01\x056`\x04a\x07\x0BV[a\x04\x0BV[a\x012a\x01\x186`\x04a\x075V[`\x04` R_\x90\x81R`@\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01ba\x01]6`\x04a\x075V[a\x048V[`@Q\x90\x81R` \x01a\x01FV[_Ta\x01|\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01FV[`\x06T`\x07Ta\x01\xAE\x91\x90`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[`@\x80Q\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x85\x01R\x91\x16\x90\x82\x01R``\x01a\x01FV[a\x01b`\x01T\x81V[a\x01\xE4a\x04WV[`@Qa\x01F\x91\x90a\x07LV[a\0\xE2a\x01\xFF6`\x04a\x07\xAEV[`\x06\x92\x90\x92U`\x01`\x01`\x80\x1B\x03\x91\x82\x16`\x01`\x80\x1B\x02\x91\x16\x17`\x07UV[`\x03Ta\x012\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\xE2a\x02?6`\x04a\x075V[`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[a\0\xE2a\x02\x816`\x04a\x075V[`\x01UV[_\x80T`\xFF\x19\x16\x85\x15\x15\x17\x90U`\x01\x83\x90U`\x02a\x02\xA4\x83\x82a\x08kV[P`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPPPV[_[\x81Q\x81\x10\x15a\x04\x07W_\x82\x82\x81Q\x81\x10a\x02\xE8Wa\x02\xE8a\t?V[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x03\x05Wa\x03\x05a\t+V[\x03a\x03LW`\x04_\x83\x83\x81Q\x81\x10a\x03\x1FWa\x03\x1Fa\t?V[` \x90\x81\x02\x91\x90\x91\x01\x81\x01QQ\x82R\x81\x01\x91\x90\x91R`@\x01_ \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90Ua\x03\xFFV[`\x02\x82\x82\x81Q\x81\x10a\x03`Wa\x03`a\t?V[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x03}Wa\x03}a\t+V[\x14\x80a\x03\xB7WP`\x01\x82\x82\x81Q\x81\x10a\x03\x98Wa\x03\x98a\t?V[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x03\xB5Wa\x03\xB5a\t+V[\x14[\x15a\x03\xFFWa\x03\xFF\x82\x82\x81Q\x81\x10a\x03\xD1Wa\x03\xD1a\t?V[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x03\xEEWa\x03\xEEa\t?V[` \x02` \x01\x01Q` \x01Qa\x04\x0BV[`\x01\x01a\x02\xCCV[PPV[_\x91\x82R`\x04` R`@\x90\x91 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x05\x81\x81T\x81\x10a\x04GW_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x02\x80Ta\x04d\x90a\x07\xE7V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04\x90\x90a\x07\xE7V[\x80\x15a\x04\xDBW\x80`\x1F\x10a\x04\xB2Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x04\xDBV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x04\xBEW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05\x1AWa\x05\x1Aa\x04\xE3V[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05IWa\x05Ia\x04\xE3V[`@R\x91\x90PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05gW_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x05\x7FW_\x80\xFD[\x845\x80\x15\x15\x81\x14a\x05\x8EW_\x80\xFD[\x93P` \x85\x81\x015\x93P`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x05\xB2W_\x80\xFD[\x81\x88\x01\x91P\x88`\x1F\x83\x01\x12a\x05\xC5W_\x80\xFD[\x815\x81\x81\x11\x15a\x05\xD7Wa\x05\xD7a\x04\xE3V[a\x05\xE9`\x1F\x82\x01`\x1F\x19\x16\x85\x01a\x05 V[\x91P\x80\x82R\x89\x84\x82\x85\x01\x01\x11\x15a\x05\xFEW_\x80\xFD[\x80\x84\x84\x01\x85\x84\x017_\x84\x82\x84\x01\x01RP\x80\x94PPPPa\x06 ``\x86\x01a\x05QV[\x90P\x92\x95\x91\x94P\x92PV[_` \x80\x83\x85\x03\x12\x15a\x06<W_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x06SW_\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x06fW_\x80\xFD[\x815\x81\x81\x11\x15a\x06xWa\x06xa\x04\xE3V[a\x06\x86\x84\x82`\x05\x1B\x01a\x05 V[\x81\x81R\x84\x81\x01\x92P``\x91\x82\x02\x84\x01\x85\x01\x91\x88\x83\x11\x15a\x06\xA4W_\x80\xFD[\x93\x85\x01\x93[\x82\x85\x10\x15a\x06\xFFW\x80\x85\x8A\x03\x12\x15a\x06\xBFW_\x80\xFD[a\x06\xC7a\x04\xF7V[\x855\x81Ra\x06\xD6\x87\x87\x01a\x05QV[\x87\x82\x01R`@\x80\x87\x015`\x03\x81\x10a\x06\xECW_\x80\xFD[\x90\x82\x01R\x84R\x93\x84\x01\x93\x92\x85\x01\x92a\x06\xA9V[P\x97\x96PPPPPPPV[_\x80`@\x83\x85\x03\x12\x15a\x07\x1CW_\x80\xFD[\x825\x91Pa\x07,` \x84\x01a\x05QV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x07EW_\x80\xFD[P5\x91\x90PV[_` \x80\x83R\x83Q\x80` \x85\x01R_[\x81\x81\x10\x15a\x07xW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x07\\V[P_`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[\x805`\x01`\x01`\x80\x1B\x03\x81\x16\x81\x14a\x05gW_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15a\x07\xC0W_\x80\xFD[\x835\x92Pa\x07\xD0` \x85\x01a\x07\x98V[\x91Pa\x07\xDE`@\x85\x01a\x07\x98V[\x90P\x92P\x92P\x92V[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x07\xFBW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x08\x19WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x08fW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x08DWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x08cW_\x81U`\x01\x01a\x08PV[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\x85Wa\x08\x85a\x04\xE3V[a\x08\x99\x81a\x08\x93\x84Ta\x07\xE7V[\x84a\x08\x1FV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x08\xCCW_\x84\x15a\x08\xB5WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\t#V[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x08\xFAW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x08\xDBV[P\x85\x82\x10\x15a\t\x17W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xBF\"MzY\xF3\xE4h\x7F&\xF1\xDB&\xF6\xD2<\x8B\x19\xD9)a3\xF9\xB5\x15\x86\xD6p&\xA6\xB7{dsolcC\0\x08\x18\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50600436106100cb575f3560e01c80638bc9fe6c11610088578063be7c036b11610063578063be7c036b146101f1578063c8af3aa61461021e578063d15ec85114610231578063f25d54f514610273575f80fd5b80638bc9fe6c1461018c578063a314150f146101d3578063a5d666a9146101dc575f80fd5b80630200225c146100cf5780630c1616c9146100e45780631c134315146100f75780632ae426861461010a5780636987b1fb1461014f5780636cc014de14610170575b5f80fd5b6100e26100dd36600461056c565b610286565b005b6100e26100f236600461062b565b6102ca565b6100e261010536600461070b565b61040b565b610132610118366004610735565b60046020525f90815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61016261015d366004610735565b610438565b604051908152602001610146565b5f5461017c9060ff1681565b6040519015158152602001610146565b6006546007546101ae91906001600160801b0380821691600160801b90041683565b604080519384526001600160801b039283166020850152911690820152606001610146565b61016260015481565b6101e4610457565b604051610146919061074c565b6100e26101ff3660046107ae565b6006929092556001600160801b03918216600160801b02911617600755565b600354610132906001600160a01b031681565b6100e261023f366004610735565b600580546001810182555f919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b6100e2610281366004610735565b600155565b5f805460ff1916851515179055600183905560026102a4838261086b565b50600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b5f5b8151811015610407575f8282815181106102e8576102e861093f565b60200260200101516040015160028111156103055761030561092b565b0361034c5760045f83838151811061031f5761031f61093f565b6020908102919091018101515182528101919091526040015f2080546001600160a01b03191690556103ff565b60028282815181106103605761036061093f565b602002602001015160400151600281111561037d5761037d61092b565b14806103b7575060018282815181106103985761039861093f565b60200260200101516040015160028111156103b5576103b561092b565b145b156103ff576103ff8282815181106103d1576103d161093f565b60200260200101515f01518383815181106103ee576103ee61093f565b60200260200101516020015161040b565b6001016102cc565b5050565b5f9182526004602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60058181548110610447575f80fd5b5f91825260209091200154905081565b60028054610464906107e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610490906107e7565b80156104db5780601f106104b2576101008083540402835291602001916104db565b820191905f5260205f20905b8154815290600101906020018083116104be57829003601f168201915b505050505081565b634e487b7160e01b5f52604160045260245ffd5b6040516060810167ffffffffffffffff8111828210171561051a5761051a6104e3565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610549576105496104e3565b604052919050565b80356001600160a01b0381168114610567575f80fd5b919050565b5f805f806080858703121561057f575f80fd5b8435801515811461058e575f80fd5b93506020858101359350604086013567ffffffffffffffff808211156105b2575f80fd5b818801915088601f8301126105c5575f80fd5b8135818111156105d7576105d76104e3565b6105e9601f8201601f19168501610520565b915080825289848285010111156105fe575f80fd5b80848401858401375f8482840101525080945050505061062060608601610551565b905092959194509250565b5f602080838503121561063c575f80fd5b823567ffffffffffffffff80821115610653575f80fd5b818501915085601f830112610666575f80fd5b813581811115610678576106786104e3565b610686848260051b01610520565b818152848101925060609182028401850191888311156106a4575f80fd5b938501935b828510156106ff5780858a0312156106bf575f80fd5b6106c76104f7565b853581526106d6878701610551565b87820152604080870135600381106106ec575f80fd5b90820152845293840193928501926106a9565b50979650505050505050565b5f806040838503121561071c575f80fd5b8235915061072c60208401610551565b90509250929050565b5f60208284031215610745575f80fd5b5035919050565b5f602080835283518060208501525f5b818110156107785785810183015185820160400152820161075c565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160801b0381168114610567575f80fd5b5f805f606084860312156107c0575f80fd5b833592506107d060208501610798565b91506107de60408501610798565b90509250925092565b600181811c908216806107fb57607f821691505b60208210810361081957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561086657805f5260205f20601f840160051c810160208510156108445750805b601f840160051c820191505b81811015610863575f8155600101610850565b50505b505050565b815167ffffffffffffffff811115610885576108856104e3565b6108998161089384546107e7565b8461081f565b602080601f8311600181146108cc575f84156108b55750858301515b5f19600386901b1c1916600185901b178555610923565b5f85815260208120601f198616915b828110156108fa578886015182559484019460019091019084016108db565b508582101561091757878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220bf224d7a59f3e4687f26f1db26f6d23c8b19d9296133f9b51586d67026a6b77b64736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\xCBW_5`\xE0\x1C\x80c\x8B\xC9\xFEl\x11a\0\x88W\x80c\xBE|\x03k\x11a\0cW\x80c\xBE|\x03k\x14a\x01\xF1W\x80c\xC8\xAF:\xA6\x14a\x02\x1EW\x80c\xD1^\xC8Q\x14a\x021W\x80c\xF2]T\xF5\x14a\x02sW_\x80\xFD[\x80c\x8B\xC9\xFEl\x14a\x01\x8CW\x80c\xA3\x14\x15\x0F\x14a\x01\xD3W\x80c\xA5\xD6f\xA9\x14a\x01\xDCW_\x80\xFD[\x80c\x02\0\"\\\x14a\0\xCFW\x80c\x0C\x16\x16\xC9\x14a\0\xE4W\x80c\x1C\x13C\x15\x14a\0\xF7W\x80c*\xE4&\x86\x14a\x01\nW\x80ci\x87\xB1\xFB\x14a\x01OW\x80cl\xC0\x14\xDE\x14a\x01pW[_\x80\xFD[a\0\xE2a\0\xDD6`\x04a\x05lV[a\x02\x86V[\0[a\0\xE2a\0\xF26`\x04a\x06+V[a\x02\xCAV[a\0\xE2a\x01\x056`\x04a\x07\x0BV[a\x04\x0BV[a\x012a\x01\x186`\x04a\x075V[`\x04` R_\x90\x81R`@\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01ba\x01]6`\x04a\x075V[a\x048V[`@Q\x90\x81R` \x01a\x01FV[_Ta\x01|\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01FV[`\x06T`\x07Ta\x01\xAE\x91\x90`\x01`\x01`\x80\x1B\x03\x80\x82\x16\x91`\x01`\x80\x1B\x90\x04\x16\x83V[`@\x80Q\x93\x84R`\x01`\x01`\x80\x1B\x03\x92\x83\x16` \x85\x01R\x91\x16\x90\x82\x01R``\x01a\x01FV[a\x01b`\x01T\x81V[a\x01\xE4a\x04WV[`@Qa\x01F\x91\x90a\x07LV[a\0\xE2a\x01\xFF6`\x04a\x07\xAEV[`\x06\x92\x90\x92U`\x01`\x01`\x80\x1B\x03\x91\x82\x16`\x01`\x80\x1B\x02\x91\x16\x17`\x07UV[`\x03Ta\x012\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\xE2a\x02?6`\x04a\x075V[`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[a\0\xE2a\x02\x816`\x04a\x075V[`\x01UV[_\x80T`\xFF\x19\x16\x85\x15\x15\x17\x90U`\x01\x83\x90U`\x02a\x02\xA4\x83\x82a\x08kV[P`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPPPV[_[\x81Q\x81\x10\x15a\x04\x07W_\x82\x82\x81Q\x81\x10a\x02\xE8Wa\x02\xE8a\t?V[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x03\x05Wa\x03\x05a\t+V[\x03a\x03LW`\x04_\x83\x83\x81Q\x81\x10a\x03\x1FWa\x03\x1Fa\t?V[` \x90\x81\x02\x91\x90\x91\x01\x81\x01QQ\x82R\x81\x01\x91\x90\x91R`@\x01_ \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90Ua\x03\xFFV[`\x02\x82\x82\x81Q\x81\x10a\x03`Wa\x03`a\t?V[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x03}Wa\x03}a\t+V[\x14\x80a\x03\xB7WP`\x01\x82\x82\x81Q\x81\x10a\x03\x98Wa\x03\x98a\t?V[` \x02` \x01\x01Q`@\x01Q`\x02\x81\x11\x15a\x03\xB5Wa\x03\xB5a\t+V[\x14[\x15a\x03\xFFWa\x03\xFF\x82\x82\x81Q\x81\x10a\x03\xD1Wa\x03\xD1a\t?V[` \x02` \x01\x01Q_\x01Q\x83\x83\x81Q\x81\x10a\x03\xEEWa\x03\xEEa\t?V[` \x02` \x01\x01Q` \x01Qa\x04\x0BV[`\x01\x01a\x02\xCCV[PPV[_\x91\x82R`\x04` R`@\x90\x91 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x05\x81\x81T\x81\x10a\x04GW_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x02\x80Ta\x04d\x90a\x07\xE7V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04\x90\x90a\x07\xE7V[\x80\x15a\x04\xDBW\x80`\x1F\x10a\x04\xB2Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x04\xDBV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x04\xBEW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05\x1AWa\x05\x1Aa\x04\xE3V[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05IWa\x05Ia\x04\xE3V[`@R\x91\x90PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05gW_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x05\x7FW_\x80\xFD[\x845\x80\x15\x15\x81\x14a\x05\x8EW_\x80\xFD[\x93P` \x85\x81\x015\x93P`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x05\xB2W_\x80\xFD[\x81\x88\x01\x91P\x88`\x1F\x83\x01\x12a\x05\xC5W_\x80\xFD[\x815\x81\x81\x11\x15a\x05\xD7Wa\x05\xD7a\x04\xE3V[a\x05\xE9`\x1F\x82\x01`\x1F\x19\x16\x85\x01a\x05 V[\x91P\x80\x82R\x89\x84\x82\x85\x01\x01\x11\x15a\x05\xFEW_\x80\xFD[\x80\x84\x84\x01\x85\x84\x017_\x84\x82\x84\x01\x01RP\x80\x94PPPPa\x06 ``\x86\x01a\x05QV[\x90P\x92\x95\x91\x94P\x92PV[_` \x80\x83\x85\x03\x12\x15a\x06<W_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x06SW_\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x06fW_\x80\xFD[\x815\x81\x81\x11\x15a\x06xWa\x06xa\x04\xE3V[a\x06\x86\x84\x82`\x05\x1B\x01a\x05 V[\x81\x81R\x84\x81\x01\x92P``\x91\x82\x02\x84\x01\x85\x01\x91\x88\x83\x11\x15a\x06\xA4W_\x80\xFD[\x93\x85\x01\x93[\x82\x85\x10\x15a\x06\xFFW\x80\x85\x8A\x03\x12\x15a\x06\xBFW_\x80\xFD[a\x06\xC7a\x04\xF7V[\x855\x81Ra\x06\xD6\x87\x87\x01a\x05QV[\x87\x82\x01R`@\x80\x87\x015`\x03\x81\x10a\x06\xECW_\x80\xFD[\x90\x82\x01R\x84R\x93\x84\x01\x93\x92\x85\x01\x92a\x06\xA9V[P\x97\x96PPPPPPPV[_\x80`@\x83\x85\x03\x12\x15a\x07\x1CW_\x80\xFD[\x825\x91Pa\x07,` \x84\x01a\x05QV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x07EW_\x80\xFD[P5\x91\x90PV[_` \x80\x83R\x83Q\x80` \x85\x01R_[\x81\x81\x10\x15a\x07xW\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\x07\\V[P_`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[\x805`\x01`\x01`\x80\x1B\x03\x81\x16\x81\x14a\x05gW_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15a\x07\xC0W_\x80\xFD[\x835\x92Pa\x07\xD0` \x85\x01a\x07\x98V[\x91Pa\x07\xDE`@\x85\x01a\x07\x98V[\x90P\x92P\x92P\x92V[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x07\xFBW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x08\x19WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x08fW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x08DWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x08cW_\x81U`\x01\x01a\x08PV[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\x85Wa\x08\x85a\x04\xE3V[a\x08\x99\x81a\x08\x93\x84Ta\x07\xE7V[\x84a\x08\x1FV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x08\xCCW_\x84\x15a\x08\xB5WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\t#V[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x08\xFAW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x08\xDBV[P\x85\x82\x10\x15a\t\x17W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xBF\"MzY\xF3\xE4h\x7F&\xF1\xDB&\xF6\xD2<\x8B\x19\xD9)a3\xF9\xB5\x15\x86\xD6p&\xA6\xB7{dsolcC\0\x08\x18\x003",
    );
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MappingOperation(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MappingOperation> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MappingOperation {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MappingOperation {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MappingOperation {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct MappingChange { uint256 key; address value; MappingOperation operation; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MappingChange {
        pub key: alloy::sol_types::private::U256,
        pub value: alloy::sol_types::private::Address,
        pub operation: <MappingOperation as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            MappingOperation,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::U256,
            alloy::sol_types::private::Address,
            <MappingOperation as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MappingChange> for UnderlyingRustTuple<'_> {
            fn from(value: MappingChange) -> Self {
                (value.key, value.value, value.operation)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MappingChange {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    key: tuple.0,
                    value: tuple.1,
                    operation: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MappingChange {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MappingChange {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.key),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                    <MappingOperation as alloy_sol_types::SolType>::tokenize(
                        &self.operation,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MappingChange {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MappingChange {
            const NAME: &'static str = "MappingChange";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MappingChange(uint256 key,address value,uint8 operation)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.key)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.value,
                        )
                        .0,
                    <MappingOperation as alloy_sol_types::SolType>::eip712_data_word(
                            &self.operation,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MappingChange {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.key)
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.value,
                    )
                    + <MappingOperation as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.operation,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.key, out);
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.value,
                    out,
                );
                <MappingOperation as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.operation,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `addToArray(uint256)` and selector `0xd15ec851`.
```solidity
function addToArray(uint256 value) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addToArrayCall {
        pub value: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`addToArray(uint256)`](addToArrayCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct addToArrayReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToArrayCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToArrayCall) -> Self {
                    (value.value,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToArrayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { value: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToArrayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addToArrayReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToArrayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToArrayCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToArrayReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToArray(uint256)";
            const SELECTOR: [u8; 4] = [209u8, 94u8, 200u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `arr1(uint256)` and selector `0x6987b1fb`.
```solidity
function arr1(uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct arr1Call {
        pub _0: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`arr1(uint256)`](arr1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct arr1Return {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arr1Call> for UnderlyingRustTuple<'_> {
                fn from(value: arr1Call) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arr1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arr1Return> for UnderlyingRustTuple<'_> {
                fn from(value: arr1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arr1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for arr1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = arr1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "arr1(uint256)";
            const SELECTOR: [u8; 4] = [105u8, 135u8, 177u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `changeMapping((uint256,address,uint8)[])` and selector `0x0c1616c9`.
```solidity
function changeMapping(MappingChange[] memory changes) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct changeMappingCall {
        pub changes: alloy::sol_types::private::Vec<
            <MappingChange as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`changeMapping((uint256,address,uint8)[])`](changeMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct changeMappingReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<MappingChange>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <MappingChange as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMappingCall> for UnderlyingRustTuple<'_> {
                fn from(value: changeMappingCall) -> Self {
                    (value.changes,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { changes: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<changeMappingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: changeMappingReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for changeMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for changeMappingCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<MappingChange>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = changeMappingReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "changeMapping((uint256,address,uint8)[])";
            const SELECTOR: [u8; 4] = [12u8, 22u8, 22u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        MappingChange,
                    > as alloy_sol_types::SolType>::tokenize(&self.changes),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `m1(uint256)` and selector `0x2ae42686`.
```solidity
function m1(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct m1Call {
        pub _0: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`m1(uint256)`](m1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct m1Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<m1Call> for UnderlyingRustTuple<'_> {
                fn from(value: m1Call) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for m1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<m1Return> for UnderlyingRustTuple<'_> {
                fn from(value: m1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for m1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for m1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = m1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "m1(uint256)";
            const SELECTOR: [u8; 4] = [42u8, 228u8, 38u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `myStruct()` and selector `0x8bc9fe6c`.
```solidity
function myStruct() external view returns (uint256 field1, uint128 field2, uint128 field3);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct myStructCall {}
    ///Container type for the return parameters of the [`myStruct()`](myStructCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct myStructReturn {
        pub field1: alloy::sol_types::private::U256,
        pub field2: u128,
        pub field3: u128,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<myStructCall> for UnderlyingRustTuple<'_> {
                fn from(value: myStructCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for myStructCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256, u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<myStructReturn> for UnderlyingRustTuple<'_> {
                fn from(value: myStructReturn) -> Self {
                    (value.field1, value.field2, value.field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for myStructReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        field1: tuple.0,
                        field2: tuple.1,
                        field3: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for myStructCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = myStructReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "myStruct()";
            const SELECTOR: [u8; 4] = [139u8, 201u8, 254u8, 108u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `s1()` and selector `0x6cc014de`.
```solidity
function s1() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s1Call {}
    ///Container type for the return parameters of the [`s1()`](s1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s1Return {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s1Call> for UnderlyingRustTuple<'_> {
                fn from(value: s1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s1Return> for UnderlyingRustTuple<'_> {
                fn from(value: s1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = s1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s1()";
            const SELECTOR: [u8; 4] = [108u8, 192u8, 20u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `s2()` and selector `0xa314150f`.
```solidity
function s2() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s2Call {}
    ///Container type for the return parameters of the [`s2()`](s2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s2Return {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s2Call> for UnderlyingRustTuple<'_> {
                fn from(value: s2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s2Return> for UnderlyingRustTuple<'_> {
                fn from(value: s2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = s2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s2()";
            const SELECTOR: [u8; 4] = [163u8, 20u8, 21u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `s3()` and selector `0xa5d666a9`.
```solidity
function s3() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s3Call {}
    ///Container type for the return parameters of the [`s3()`](s3Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s3Return {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s3Call> for UnderlyingRustTuple<'_> {
                fn from(value: s3Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s3Return> for UnderlyingRustTuple<'_> {
                fn from(value: s3Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s3Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = s3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s3()";
            const SELECTOR: [u8; 4] = [165u8, 214u8, 102u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `s4()` and selector `0xc8af3aa6`.
```solidity
function s4() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s4Call {}
    ///Container type for the return parameters of the [`s4()`](s4Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct s4Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s4Call> for UnderlyingRustTuple<'_> {
                fn from(value: s4Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s4Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<s4Return> for UnderlyingRustTuple<'_> {
                fn from(value: s4Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for s4Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for s4Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = s4Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "s4()";
            const SELECTOR: [u8; 4] = [200u8, 175u8, 58u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setLargeStruct(uint256,uint128,uint128)` and selector `0xbe7c036b`.
```solidity
function setLargeStruct(uint256 field1, uint128 field2, uint128 field3) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setLargeStructCall {
        pub field1: alloy::sol_types::private::U256,
        pub field2: u128,
        pub field3: u128,
    }
    ///Container type for the return parameters of the [`setLargeStruct(uint256,uint128,uint128)`](setLargeStructCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setLargeStructReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256, u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLargeStructCall> for UnderlyingRustTuple<'_> {
                fn from(value: setLargeStructCall) -> Self {
                    (value.field1, value.field2, value.field3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setLargeStructCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        field1: tuple.0,
                        field2: tuple.1,
                        field3: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLargeStructReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setLargeStructReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setLargeStructReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setLargeStructCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setLargeStructReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setLargeStruct(uint256,uint128,uint128)";
            const SELECTOR: [u8; 4] = [190u8, 124u8, 3u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.field1),
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::tokenize(&self.field2),
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::tokenize(&self.field3),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMapping(uint256,address)` and selector `0x1c134315`.
```solidity
function setMapping(uint256 key, address value) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setMappingCall {
        pub key: alloy::sol_types::private::U256,
        pub value: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setMapping(uint256,address)`](setMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setMappingReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingCall> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingCall) -> Self {
                    (value.key, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        key: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMappingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setMappingReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMappingCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMappingReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMapping(uint256,address)";
            const SELECTOR: [u8; 4] = [28u8, 19u8, 67u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.key),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setS2(uint256)` and selector `0xf25d54f5`.
```solidity
function setS2(uint256 newS2) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setS2Call {
        pub newS2: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`setS2(uint256)`](setS2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setS2Return {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setS2Call> for UnderlyingRustTuple<'_> {
                fn from(value: setS2Call) -> Self {
                    (value.newS2,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setS2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newS2: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setS2Return> for UnderlyingRustTuple<'_> {
                fn from(value: setS2Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setS2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setS2Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setS2Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setS2(uint256)";
            const SELECTOR: [u8; 4] = [242u8, 93u8, 84u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newS2),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setSimples(bool,uint256,string,address)` and selector `0x0200225c`.
```solidity
function setSimples(bool newS1, uint256 newS2, string memory newS3, address newS4) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setSimplesCall {
        pub newS1: bool,
        pub newS2: alloy::sol_types::private::U256,
        pub newS3: alloy::sol_types::private::String,
        pub newS4: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setSimples(bool,uint256,string,address)`](setSimplesCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setSimplesReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                bool,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimplesCall> for UnderlyingRustTuple<'_> {
                fn from(value: setSimplesCall) -> Self {
                    (value.newS1, value.newS2, value.newS3, value.newS4)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimplesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newS1: tuple.0,
                        newS2: tuple.1,
                        newS3: tuple.2,
                        newS4: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSimplesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setSimplesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSimplesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSimplesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSimplesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSimples(bool,uint256,string,address)";
            const SELECTOR: [u8; 4] = [2u8, 0u8, 34u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.newS1,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newS2),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newS3,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newS4,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Simple`](self) function calls.
    pub enum SimpleCalls {
        addToArray(addToArrayCall),
        arr1(arr1Call),
        changeMapping(changeMappingCall),
        m1(m1Call),
        myStruct(myStructCall),
        s1(s1Call),
        s2(s2Call),
        s3(s3Call),
        s4(s4Call),
        setLargeStruct(setLargeStructCall),
        setMapping(setMappingCall),
        setS2(setS2Call),
        setSimples(setSimplesCall),
    }
    #[automatically_derived]
    impl SimpleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [2u8, 0u8, 34u8, 92u8],
            [12u8, 22u8, 22u8, 201u8],
            [28u8, 19u8, 67u8, 21u8],
            [42u8, 228u8, 38u8, 134u8],
            [105u8, 135u8, 177u8, 251u8],
            [108u8, 192u8, 20u8, 222u8],
            [139u8, 201u8, 254u8, 108u8],
            [163u8, 20u8, 21u8, 15u8],
            [165u8, 214u8, 102u8, 169u8],
            [190u8, 124u8, 3u8, 107u8],
            [200u8, 175u8, 58u8, 166u8],
            [209u8, 94u8, 200u8, 81u8],
            [242u8, 93u8, 84u8, 245u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SimpleCalls {
        const NAME: &'static str = "SimpleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addToArray(_) => {
                    <addToArrayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::arr1(_) => <arr1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::changeMapping(_) => {
                    <changeMappingCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::m1(_) => <m1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::myStruct(_) => <myStructCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::s1(_) => <s1Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s2(_) => <s2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s3(_) => <s3Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::s4(_) => <s4Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::setLargeStruct(_) => {
                    <setLargeStructCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMapping(_) => {
                    <setMappingCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setS2(_) => <setS2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::setSimples(_) => {
                    <setSimplesCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SimpleCalls>] = &[
                {
                    fn setSimples(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setSimplesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::setSimples)
                    }
                    setSimples
                },
                {
                    fn changeMapping(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <changeMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::changeMapping)
                    }
                    changeMapping
                },
                {
                    fn setMapping(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::setMapping)
                    }
                    setMapping
                },
                {
                    fn m1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <m1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::m1)
                    }
                    m1
                },
                {
                    fn arr1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <arr1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::arr1)
                    }
                    arr1
                },
                {
                    fn s1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <s1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::s1)
                    }
                    s1
                },
                {
                    fn myStruct(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <myStructCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::myStruct)
                    }
                    myStruct
                },
                {
                    fn s2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <s2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::s2)
                    }
                    s2
                },
                {
                    fn s3(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <s3Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::s3)
                    }
                    s3
                },
                {
                    fn setLargeStruct(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setLargeStructCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::setLargeStruct)
                    }
                    setLargeStruct
                },
                {
                    fn s4(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <s4Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::s4)
                    }
                    s4
                },
                {
                    fn addToArray(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <addToArrayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::addToArray)
                    }
                    addToArray
                },
                {
                    fn setS2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SimpleCalls> {
                        <setS2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SimpleCalls::setS2)
                    }
                    setS2
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addToArray(inner) => {
                    <addToArrayCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::arr1(inner) => {
                    <arr1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::changeMapping(inner) => {
                    <changeMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::m1(inner) => {
                    <m1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::myStruct(inner) => {
                    <myStructCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::s1(inner) => {
                    <s1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::s2(inner) => {
                    <s2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::s3(inner) => {
                    <s3Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::s4(inner) => {
                    <s4Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setLargeStruct(inner) => {
                    <setLargeStructCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMapping(inner) => {
                    <setMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setS2(inner) => {
                    <setS2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setSimples(inner) => {
                    <setSimplesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addToArray(inner) => {
                    <addToArrayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::arr1(inner) => {
                    <arr1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::changeMapping(inner) => {
                    <changeMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::m1(inner) => {
                    <m1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::myStruct(inner) => {
                    <myStructCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::s1(inner) => {
                    <s1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::s2(inner) => {
                    <s2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::s3(inner) => {
                    <s3Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::s4(inner) => {
                    <s4Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setLargeStruct(inner) => {
                    <setLargeStructCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMapping(inner) => {
                    <setMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setS2(inner) => {
                    <setS2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setSimples(inner) => {
                    <setSimplesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Simple`](self) contract instance.

See the [wrapper's documentation](`SimpleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SimpleInstance<T, P, N> {
        SimpleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SimpleInstance<T, P, N>>,
    > {
        SimpleInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        SimpleInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Simple`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Simple`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SimpleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SimpleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SimpleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SimpleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Simple`](self) contract instance.

See the [wrapper's documentation](`SimpleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SimpleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SimpleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SimpleInstance<T, P, N> {
            SimpleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SimpleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addToArray`] function.
        pub fn addToArray(
            &self,
            value: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToArrayCall, N> {
            self.call_builder(&addToArrayCall { value })
        }
        ///Creates a new call builder for the [`arr1`] function.
        pub fn arr1(
            &self,
            _0: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, arr1Call, N> {
            self.call_builder(&arr1Call { _0 })
        }
        ///Creates a new call builder for the [`changeMapping`] function.
        pub fn changeMapping(
            &self,
            changes: alloy::sol_types::private::Vec<
                <MappingChange as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, changeMappingCall, N> {
            self.call_builder(&changeMappingCall { changes })
        }
        ///Creates a new call builder for the [`m1`] function.
        pub fn m1(
            &self,
            _0: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, m1Call, N> {
            self.call_builder(&m1Call { _0 })
        }
        ///Creates a new call builder for the [`myStruct`] function.
        pub fn myStruct(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, myStructCall, N> {
            self.call_builder(&myStructCall {})
        }
        ///Creates a new call builder for the [`s1`] function.
        pub fn s1(&self) -> alloy_contract::SolCallBuilder<T, &P, s1Call, N> {
            self.call_builder(&s1Call {})
        }
        ///Creates a new call builder for the [`s2`] function.
        pub fn s2(&self) -> alloy_contract::SolCallBuilder<T, &P, s2Call, N> {
            self.call_builder(&s2Call {})
        }
        ///Creates a new call builder for the [`s3`] function.
        pub fn s3(&self) -> alloy_contract::SolCallBuilder<T, &P, s3Call, N> {
            self.call_builder(&s3Call {})
        }
        ///Creates a new call builder for the [`s4`] function.
        pub fn s4(&self) -> alloy_contract::SolCallBuilder<T, &P, s4Call, N> {
            self.call_builder(&s4Call {})
        }
        ///Creates a new call builder for the [`setLargeStruct`] function.
        pub fn setLargeStruct(
            &self,
            field1: alloy::sol_types::private::U256,
            field2: u128,
            field3: u128,
        ) -> alloy_contract::SolCallBuilder<T, &P, setLargeStructCall, N> {
            self.call_builder(
                &setLargeStructCall {
                    field1,
                    field2,
                    field3,
                },
            )
        }
        ///Creates a new call builder for the [`setMapping`] function.
        pub fn setMapping(
            &self,
            key: alloy::sol_types::private::U256,
            value: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMappingCall, N> {
            self.call_builder(&setMappingCall { key, value })
        }
        ///Creates a new call builder for the [`setS2`] function.
        pub fn setS2(
            &self,
            newS2: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setS2Call, N> {
            self.call_builder(&setS2Call { newS2 })
        }
        ///Creates a new call builder for the [`setSimples`] function.
        pub fn setSimples(
            &self,
            newS1: bool,
            newS2: alloy::sol_types::private::U256,
            newS3: alloy::sol_types::private::String,
            newS4: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSimplesCall, N> {
            self.call_builder(
                &setSimplesCall {
                    newS1,
                    newS2,
                    newS3,
                    newS4,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SimpleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
