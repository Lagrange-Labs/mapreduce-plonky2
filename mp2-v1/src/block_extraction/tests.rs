use ethers::utils::keccak256;
use mp2_common::{
    types::{CBuilder, GFp},
    utils::{Endianness, Packer},
    D,
};
use mp2_test::circuit::{prove_circuit, setup_circuit, UserCircuit};
use plonky2::{
    field::types::Field, iop::witness::PartialWitness, plonk::config::PoseidonGoldilocksConfig,
};

use super::{
    public_inputs::PublicInputs,
    {BlockCircuit, BlockWires},
};

pub type SepoliaBlockCircuit = BlockCircuit;

#[tokio::test]
async fn prove_and_verify_block_extraction_circuit() -> Result<()> {
    let url = "https://ethereum-sepolia-rpc.publicnode.com";
    let provider = Provider::<Http>::try_from(url).unwrap();
    let block_number = 6139788;
    let block = provider.get_block(block_number).await.unwrap().unwrap();
    
    let prev_block_hash = block.parent_hash.0.to_vec();
    let block_hash = block.block_hash();
    let block_number = block.number.unwrap().0[0];
    let state_root = block.state_root.0.to_vec();
    let rlp_headers = block.rlp();
    let setup = setup_circuit::<_, D, PoseidonGoldilocksConfig, SepoliaBlockCircuit>();
    let block = SepoliaBlockHeader::block_6139788();
    let circuit = SepoliaBlockCircuit::new(&block.rlp_headers).unwrap();
    let proof = prove_circuit(&setup, &circuit);
    let pi = PublicInputs::<GFp>::from_slice(&proof.public_inputs);

    assert_eq!(pi.prev_block_hash_raw(), &block.prev_block_hash);
    assert_eq!(pi.block_hash_raw(), &block.block_hash);
    assert_eq!(pi.state_root_raw(), &block.state_root);
    //assert_eq!(pi.block_number_raw(), &block.block_number);
    Ok(())
}

impl UserCircuit<GFp, D> for BlockCircuit {
    type Wires = BlockWires;

    fn build(cb: &mut CBuilder) -> Self::Wires {
        Self::build(cb)
    }

    fn prove(&self, pw: &mut PartialWitness<GFp>, wires: &Self::Wires) {
        self.assign(pw, wires);
    }
}

/// Extracted block header from ETH Sepolia
#[derive(Clone, Debug, PartialEq, Eq)]
pub struct SepoliaBlockHeader {
    pub prev_block_hash: Vec<GFp>,
    pub block_hash: Vec<GFp>,
    pub block_number: GFp,
    pub state_root: Vec<GFp>,
    pub rlp_headers: Vec<u8>,
}

impl SepoliaBlockHeader {
    /// Returns the block header data for the block 6139788 (random arbitrary block).
    ///
    /// Extracted via:
    /// ```ignore
    /// use ethers::providers::{Http, Middleware, Provider};
    /// use mp2_common::eth::BlockUtil;
    ///

    /// ```
    pub fn block_6139788() -> Self {
        let block_number = GFp::from_canonical_u64(6139788);
        let prev_block_hash = vec![
            0x27, 0xdd, 0x43, 0xf2, 0xe4, 0x11, 0x9a, 0x92, 0x08, 0xac, 0x25, 0xe0, 0xbd, 0xf9,
            0x31, 0x20, 0x84, 0x79, 0xb2, 0x15, 0x5d, 0x68, 0x24, 0x87, 0xc7, 0xde, 0x87, 0x3a,
            0x0d, 0xd7, 0x78, 0xa6,
        ];
        let block_hash = vec![
            0xfd, 0x7c, 0x2e, 0xc7, 0x70, 0xf5, 0x2b, 0xf0, 0xd5, 0x61, 0xff, 0x0e, 0xd8, 0x4f,
            0xa9, 0x5d, 0xe1, 0xe2, 0xd5, 0x6b, 0x70, 0xe7, 0x29, 0xc1, 0x3c, 0xfd, 0xe0, 0xd4,
            0xb1, 0x30, 0xbe, 0xdd,
        ];
        let state_root = vec![
            0x35, 0x7a, 0xa9, 0xa3, 0x2e, 0xae, 0x79, 0x65, 0x70, 0x6a, 0xc7, 0x19, 0x95, 0x1a,
            0xe1, 0x4b, 0xab, 0x92, 0x17, 0x13, 0x88, 0x8e, 0x79, 0xf8, 0xaf, 0x72, 0x46, 0x1b,
            0x05, 0x75, 0x2f, 0x2e,
        ];
        let rlp_headers = vec![
            0xf9, 0x02, 0x64, 0xa0, 0x27, 0xdd, 0x43, 0xf2, 0xe4, 0x11, 0x9a, 0x92, 0x08, 0xac,
            0x25, 0xe0, 0xbd, 0xf9, 0x31, 0x20, 0x84, 0x79, 0xb2, 0x15, 0x5d, 0x68, 0x24, 0x87,
            0xc7, 0xde, 0x87, 0x3a, 0x0d, 0xd7, 0x78, 0xa6, 0xa0, 0x1d, 0xcc, 0x4d, 0xe8, 0xde,
            0xc7, 0x5d, 0x7a, 0xab, 0x85, 0xb5, 0x67, 0xb6, 0xcc, 0xd4, 0x1a, 0xd3, 0x12, 0x45,
            0x1b, 0x94, 0x8a, 0x74, 0x13, 0xf0, 0xa1, 0x42, 0xfd, 0x40, 0xd4, 0x93, 0x47, 0x94,
            0xf2, 0x9f, 0xf9, 0x6a, 0xae, 0xa6, 0xc9, 0xa1, 0xfb, 0xa8, 0x51, 0xf7, 0x47, 0x37,
            0xf3, 0xc0, 0x69, 0xd4, 0xf1, 0xa9, 0xa0, 0x35, 0x7a, 0xa9, 0xa3, 0x2e, 0xae, 0x79,
            0x65, 0x70, 0x6a, 0xc7, 0x19, 0x95, 0x1a, 0xe1, 0x4b, 0xab, 0x92, 0x17, 0x13, 0x88,
            0x8e, 0x79, 0xf8, 0xaf, 0x72, 0x46, 0x1b, 0x05, 0x75, 0x2f, 0x2e, 0xa0, 0xa0, 0xe1,
            0xcf, 0x40, 0xe7, 0xfb, 0x74, 0x7b, 0x13, 0xb1, 0xe2, 0xbd, 0x1f, 0x28, 0x5a, 0x3f,
            0x06, 0x20, 0xba, 0xb9, 0x71, 0xef, 0x3e, 0x32, 0xca, 0xe8, 0x9d, 0x42, 0x3e, 0xaf,
            0xe1, 0x5b, 0xa0, 0x66, 0xd3, 0x72, 0x47, 0xdb, 0x4a, 0xb4, 0x95, 0x63, 0xb4, 0xbc,
            0x19, 0xbd, 0x4d, 0xd3, 0x29, 0x30, 0x4c, 0xed, 0x34, 0x3c, 0xe7, 0xaa, 0x3e, 0x2e,
            0x29, 0xb6, 0xa2, 0x85, 0x56, 0x77, 0x02, 0xb9, 0x01, 0x00, 0x6b, 0x75, 0x60, 0x2f,
            0xdb, 0x13, 0x78, 0x32, 0xcd, 0x7a, 0x40, 0xae, 0xd0, 0x11, 0x4d, 0x63, 0x22, 0xd5,
            0x40, 0xcc, 0x33, 0x26, 0xd0, 0xd2, 0x40, 0x80, 0x74, 0x7c, 0xfc, 0x09, 0x4a, 0x3a,
            0x30, 0x5f, 0xa5, 0x53, 0x18, 0xa4, 0xa0, 0xa7, 0xd4, 0xba, 0x95, 0x67, 0x05, 0x75,
            0x51, 0x9c, 0x91, 0x16, 0xdd, 0x4b, 0xae, 0xa3, 0x38, 0x94, 0x36, 0x34, 0x3a, 0x5c,
            0x41, 0xaf, 0xb3, 0x09, 0x40, 0xa3, 0xeb, 0x53, 0xe8, 0xa7, 0xb8, 0x09, 0x55, 0x67,
            0x01, 0x5a, 0x3f, 0x2d, 0xa9, 0xce, 0x36, 0xd5, 0x1f, 0xf4, 0xb4, 0xae, 0x48, 0x47,
            0x60, 0xbb, 0x02, 0x90, 0x0c, 0xa2, 0x7a, 0xd1, 0x8c, 0xa0, 0x64, 0xcd, 0xda, 0x0d,
            0x15, 0xe5, 0xa2, 0x13, 0x01, 0x0e, 0x13, 0x26, 0x0d, 0x55, 0x4d, 0x2c, 0x15, 0xaf,
            0x0f, 0x55, 0x8e, 0x79, 0x12, 0x58, 0xc3, 0x31, 0xa0, 0xcb, 0x30, 0xde, 0xc6, 0x18,
            0xcc, 0xcc, 0x11, 0x5d, 0x30, 0x36, 0xac, 0x74, 0x93, 0x79, 0x64, 0xdc, 0x82, 0x23,
            0xc6, 0x8b, 0x80, 0x26, 0xb2, 0x3c, 0x8a, 0xa4, 0x44, 0x85, 0xd2, 0xba, 0xfd, 0x88,
            0xd0, 0x08, 0x32, 0x28, 0xbb, 0xab, 0xb4, 0xad, 0x83, 0x2d, 0x61, 0xe3, 0x83, 0xf3,
            0xc2, 0x23, 0xc7, 0x0d, 0x8f, 0x42, 0xda, 0xa0, 0x38, 0x00, 0xa3, 0x22, 0x89, 0xe3,
            0x27, 0x98, 0x2e, 0xd3, 0x62, 0xb0, 0x09, 0x37, 0xb9, 0xa2, 0x77, 0x28, 0x2b, 0x42,
            0x98, 0xa3, 0x54, 0xd5, 0x5b, 0x97, 0xc6, 0x17, 0x0c, 0xd1, 0xcf, 0xbc, 0x01, 0x19,
            0x58, 0x2f, 0x62, 0x01, 0xbd, 0xea, 0x28, 0x45, 0x62, 0x8d, 0xe4, 0x75, 0x74, 0x28,
            0x7f, 0x5f, 0x41, 0x9c, 0x99, 0x69, 0x59, 0x9a, 0xa4, 0xb0, 0x9a, 0x6a, 0x32, 0xcb,
            0x68, 0x00, 0xc8, 0x69, 0x03, 0x0d, 0x18, 0x05, 0xf5, 0xae, 0x9b, 0x4f, 0xc2, 0xd2,
            0x80, 0x83, 0x5d, 0xaf, 0x8c, 0x84, 0x01, 0xc9, 0xc3, 0x80, 0x84, 0x01, 0x49, 0x31,
            0xce, 0x84, 0x66, 0x72, 0xae, 0x90, 0x99, 0xd8, 0x83, 0x01, 0x0e, 0x05, 0x84, 0x67,
            0x65, 0x74, 0x68, 0x88, 0x67, 0x6f, 0x31, 0x2e, 0x32, 0x32, 0x2e, 0x34, 0x85, 0x6c,
            0x69, 0x6e, 0x75, 0x78, 0xa0, 0xf0, 0x57, 0x49, 0xf2, 0x00, 0x81, 0xf2, 0xe6, 0x6e,
            0xe1, 0xbb, 0x08, 0x33, 0xc5, 0xa7, 0xfc, 0x8e, 0x26, 0x4a, 0x51, 0xfd, 0x0c, 0x9b,
            0xed, 0x0c, 0x23, 0xe4, 0xcb, 0xd1, 0x0a, 0xf9, 0x3f, 0x88, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x84, 0x19, 0xa8, 0xc8, 0x41, 0xa0, 0xbb, 0x90, 0xdd, 0x11,
            0x18, 0x45, 0xce, 0x42, 0x6c, 0x55, 0xa4, 0xcd, 0xe4, 0x5e, 0x54, 0x5c, 0xa9, 0x0a,
            0x88, 0x8a, 0x7b, 0x41, 0xfb, 0x1e, 0xeb, 0x34, 0x84, 0x7f, 0xc7, 0x7a, 0xff, 0xc7,
            0x83, 0x06, 0x00, 0x00, 0x83, 0x06, 0x00, 0x00, 0xa0, 0xf2, 0x1e, 0x82, 0x2e, 0xa9,
            0xa3, 0x10, 0xef, 0xf3, 0xa5, 0x84, 0x2b, 0x47, 0x61, 0x1b, 0x35, 0xe3, 0x6a, 0x62,
            0x6b, 0x30, 0x17, 0x7a, 0x0f, 0x12, 0x83, 0x0b, 0xee, 0x00, 0x61, 0xba, 0x85,
        ];

        let prev_block_hash = prev_block_hash
            .pack(Endianness::Little)
            .into_iter()
            .map(GFp::from_canonical_u32)
            .collect();

        let block_hash = block_hash
            .pack(Endianness::Little)
            .into_iter()
            .map(GFp::from_canonical_u32)
            .collect();

        let state_root = state_root
            .pack(Endianness::Little)
            .into_iter()
            .map(GFp::from_canonical_u32)
            .collect();

        Self {
            prev_block_hash,
            block_hash,
            block_number,
            state_root,
            rlp_headers,
        }
    }
}
