// #![warn(missing_docs)]
#![feature(generic_const_exprs)]

//! This crate provides a framework to build circuits that needs to recursively verify proofs
//! employing a universal verifier, which is a verifier capable of verifying proofs of distinct circuits with the
//! same circuit implementation. The only constraint is that the circuits whose proofs need to be verified must
//! share the same structure of their public inputs. This capability enables to recusively combine proofs of different
//! circuits in an arbitrary way, employing the same verifier at the end independently from how the proofs were
//! recursively combined together. However, it is necessary to still ensure to the verifier that the proofs being
//! recursively combined employing the universal verifier were generated for a circuit belonging to a given set
//! of circuits, as otherwise the prover could generate public inputs in an arbitrary fashion, which is usually
//! undesired. Therefore, the universal verifier provided by this framework also checks that each proof being
//! verified is generated for a circuit belonging to a given set of circuits, represented by a digest which is
//! exposed as an additional public input by every proof generated by a circuit employing by the universal verifier.
//! The data structures provided by this framework will automatically handle most of the details necessary to make
//! the circuits verifiable by the universal verifier, so that the user should mostly have to specify the additional
//! logic to be enforced in the circuit besides verifying proofs.
//! For an example of how to use the framework, take a look at the integration tests, located in `tests/integration.rs`

/// This module contains data structures useful to instantiate circuits that either employ the universal verifier
/// or whose proofs needs to be verified by a circuit employing the universal verifier
pub mod circuit_builder;
/// This module contains data structures that allow to generate proofs for a set of circuits that
/// either employ the universal verifier or whose proofs needs to be verified by a circuit employing
/// the universal verifier
pub mod framework;
/// This module contains a variant of the framework that simplifies testing and benchmakring the circuits based on
/// the universal verifier and written employing the data structures and interfaces provided in the `framework`
/// module
pub mod framework_testing;
/// Internal module that contains the core data structures and gadgets for the universal verifier
pub(crate) mod universal_verifier_gadget;

/// This module contains data strcutures and traits employed to serialize the data strcutures found in the
/// crate
pub mod serialization;
