use alloy::primitives::U256;
use anyhow::Result;
use mp2_common::{default_config, proof::ProofWithVK, C, D, F};
use plonky2::{field::types::Field, hash::hash_types::HashOut};
use recursion_framework::{
    circuit_builder::{CircuitWithUniversalVerifier, CircuitWithUniversalVerifierBuilder},
    framework::{prepare_recursive_circuit_for_circuit_set as p, RecursiveCircuits},
};
use serde::{Deserialize, Serialize};

use crate::cells_tree::Cell;

use super::{
    full_node::{self, FullNodeCircuit},
    leaf::{self, LeafCircuit},
    partial_node::{self, PartialNodeCircuit},
    PublicInputs,
};

/// Parameters holding the circuits for the row tree creation
#[derive(Serialize, Deserialize)]
pub struct PublicParameters {
    leaf: CircuitWithUniversalVerifier<F, C, D, 0, leaf::RecursiveLeafWires>,
    full: CircuitWithUniversalVerifier<
        F,
        C,
        D,
        { full_node::NUM_CHILDREN },
        full_node::RecursiveFullWires,
    >,
    partial: CircuitWithUniversalVerifier<
        F,
        C,
        D,
        { partial_node::NUM_CHILDREN },
        partial_node::RecursivePartialWires,
    >,
    row_set: RecursiveCircuits<F, C, D>,
}

const ROW_IO_LEN: usize = super::public_inputs::TOTAL_LEN;

impl PublicParameters {
    pub fn build(cells_set: &RecursiveCircuits<F, C, D>) -> Self {
        const ROW_CIRCUIT_SET_SIZE: usize = 3;
        let builder = CircuitWithUniversalVerifierBuilder::<F, D, ROW_IO_LEN>::new::<C>(
            default_config(),
            ROW_CIRCUIT_SET_SIZE,
        );

        let leaf_circuit = builder.build_circuit(cells_set.clone());
        let full_circuit = builder.build_circuit(cells_set.clone());
        let partial_circuit = builder.build_circuit(cells_set.clone());

        let circuits = vec![p(&leaf_circuit), p(&full_circuit), p(&partial_circuit)];
        let circuit_set = RecursiveCircuits::<F, C, D>::new(circuits);
        Self {
            leaf: leaf_circuit,
            full: full_circuit,
            partial: partial_circuit,
            row_set: circuit_set,
        }
    }

    /// returns the set of circuits vk that are generated by this circuit set parameter
    pub fn set_vk(&self) -> &RecursiveCircuits<F, C, D> {
        &self.row_set
    }

    pub fn generate_proof(
        &self,
        input: CircuitInput,
        cells_vk: RecursiveCircuits<F, C, D>,
    ) -> Result<Vec<u8>> {
        match input {
            CircuitInput::Leaf {
                witness,
                cells_proof,
            } => self.generate_leaf_proof(witness, (cells_proof, cells_vk)),
            CircuitInput::Full {
                witness,
                left_proof,
                right_proof,
                cells_proof,
            } => {
                self.generate_full_proof(witness, left_proof, right_proof, (cells_proof, cells_vk))
            }
            CircuitInput::Partial {
                witness,
                child_proof,
                cells_proof,
            } => self.generate_partial_proof(witness, child_proof, (cells_proof, cells_vk)),
        }
    }

    fn generate_leaf_proof(
        &self,
        witness: LeafCircuit,
        cells_proof: CellsProof,
    ) -> Result<Vec<u8>> {
        let (p, cells_set) = cells_proof;
        let cells_proof = ProofWithVK::deserialize(&p)?;
        let leaf = leaf::RecursiveLeafInput {
            witness,
            cells_proof,
            cells_set,
        };
        let proof = self.row_set.generate_proof(&self.leaf, [], [], leaf)?;
        ProofWithVK::new(proof, self.leaf.circuit_data().verifier_only.clone()).serialize()
    }

    fn generate_full_proof(
        &self,
        witness: FullNodeCircuit,
        left_proof: Vec<u8>,
        right_proof: Vec<u8>,
        cells_proof: CellsProof,
    ) -> Result<Vec<u8>> {
        let (p, cells_set) = cells_proof;
        let cells_proof = ProofWithVK::deserialize(&p)?;
        let full = full_node::RecursiveFullInput {
            witness,
            cells_proof,
            cells_set,
        };
        let (left_proof, left_vd) = ProofWithVK::deserialize(&left_proof)?.into();
        let (right_proof, right_vd) = ProofWithVK::deserialize(&right_proof)?.into();
        let proof = self.row_set.generate_proof(
            &self.full,
            [left_proof, right_proof],
            [&left_vd, &right_vd],
            full,
        )?;
        ProofWithVK::new(proof, self.full.circuit_data().verifier_only.clone()).serialize()
    }

    fn generate_partial_proof(
        &self,
        witness: PartialNodeCircuit,
        child_proof: Vec<u8>,
        cells_proof: CellsProof,
    ) -> Result<Vec<u8>> {
        let (p, cells_set) = cells_proof;
        let cells_proof = ProofWithVK::deserialize(&p)?;
        let partial = partial_node::RecursivePartialInput {
            witness,
            cells_proof,
            cells_set,
        };
        let (child_proof, child_vd) = ProofWithVK::deserialize(&child_proof)?.into();
        let proof =
            self.row_set
                .generate_proof(&self.partial, [child_proof], [&child_vd], partial)?;
        ProofWithVK::new(proof, self.partial.circuit_data().verifier_only.clone()).serialize()
    }
}

///  A wrapper type around the information needed for all three cases
///  of the  rows circuits
type CellsProof = (Vec<u8>, RecursiveCircuits<F, C, D>);

/// Enum holding all the inputs necessary to generate
/// rows tree related proofs
pub enum CircuitInput {
    Leaf {
        witness: leaf::LeafCircuit,
        cells_proof: Vec<u8>,
    },
    Full {
        witness: full_node::FullNodeCircuit,
        left_proof: Vec<u8>,
        right_proof: Vec<u8>,
        cells_proof: Vec<u8>,
    },
    Partial {
        witness: partial_node::PartialNodeCircuit,
        child_proof: Vec<u8>,
        cells_proof: Vec<u8>,
    },
}

impl CircuitInput {
    pub fn leaf(
        identifier: u64,
        value: U256,
        is_multiplier: bool,
        cells_proof: Vec<u8>,
    ) -> Result<Self> {
        let circuit = Cell::new(F::from_canonical_u64(identifier), value, is_multiplier);
        Ok(CircuitInput::Leaf {
            witness: circuit.into(),
            cells_proof,
        })
    }

    pub fn full(
        identifier: u64,
        value: U256,
        is_multiplier: bool,
        left_proof: Vec<u8>,
        right_proof: Vec<u8>,
        cells_proof: Vec<u8>,
    ) -> Result<Self> {
        let circuit = Cell::new(F::from_canonical_u64(identifier), value, is_multiplier);
        Ok(CircuitInput::Full {
            witness: circuit.into(),
            left_proof,
            right_proof,
            cells_proof,
        })
    }
    pub fn partial(
        identifier: u64,
        value: U256,
        is_multiplier: bool,
        is_child_left: bool,
        child_proof: Vec<u8>,
        cells_proof: Vec<u8>,
    ) -> Result<Self> {
        let tuple = Cell::new(F::from_canonical_u64(identifier), value, is_multiplier);
        let witness = PartialNodeCircuit::new(tuple, is_child_left);
        Ok(CircuitInput::Partial {
            witness,
            child_proof,
            cells_proof,
        })
    }
}

pub fn extract_hash_from_proof(proof: &[u8]) -> Result<HashOut<F>> {
    let p = ProofWithVK::deserialize(proof)?;
    Ok(PublicInputs::from_slice(&p.proof.public_inputs).root_hash_hashout())
}

#[cfg(test)]
mod test {
    use crate::{cells_tree, row_tree::public_inputs::PublicInputs};

    use super::*;
    use mp2_common::{
        group_hashing::{cond_field_hashed_scalar_mul, map_to_curve_point},
        poseidon::{empty_poseidon_hash, H},
        utils::ToFields,
        F,
    };
    use mp2_test::{log::init_logging, utils::weierstrass_to_point};
    use partial_node::test::partial_safety_check;
    use plonky2::{
        field::types::{PrimeField64, Sample},
        hash::hash_types::HashOut,
        plonk::{
            circuit_data::VerifierOnlyCircuitData, config::Hasher, proof::ProofWithPublicInputs,
        },
    };
    use plonky2_ecgfp5::curve::curve::Point;
    use recursion_framework::framework_testing::TestingRecursiveCircuits;

    const CELL_IO_LEN: usize = cells_tree::PublicInputs::<F>::TOTAL_LEN;

    struct TestParams {
        cells_test: TestingRecursiveCircuits<F, C, D, CELL_IO_LEN>,
        params: PublicParameters,
        // always using the same cells_proof at each  row node
        // to save on test time
        cells_proof: ProofWithPublicInputs<F, C, D>,
        cells_vk: VerifierOnlyCircuitData<C, D>,
        leaf1: Cell,
        leaf2: Cell,
        full: Cell,
        partial: Cell,
    }

    impl TestParams {
        fn build() -> Result<Self> {
            let cells_test = TestingRecursiveCircuits::<F, C, D, CELL_IO_LEN>::default();
            let params = PublicParameters::build(cells_test.get_recursive_circuit_set());
            let cells_pi = Self::rand_cells_pi();
            let cells_proof =
                cells_test.generate_input_proofs::<1>([cells_pi.clone().try_into().unwrap()])?;
            let cells_vk = cells_test.verifier_data_for_input_proofs::<1>()[0].clone();
            //  leaf1 - leaf2  =>  full_node => partial_node
            let identifier = F::rand();
            //let v1 = U256::from(rng.gen::<[u8; 32]>());
            let v1 = U256::from(10);
            let v_full = v1 + U256::from(10);
            let v2 = v_full + U256::from(10);
            let v_partial = v2 + U256::from(10); // full is left child of partial

            //           40  (partial)
            //          /
            //        20 (full)
            //      /   \
            //  10        30  (leaves)
            Ok(TestParams {
                cells_test,
                params,
                cells_proof: cells_proof[0].clone(),
                cells_vk,
                leaf1: Cell::new(identifier, v1, false),
                leaf2: Cell::new(identifier, v2, false),
                full: Cell::new(identifier, v_full, false),
                partial: Cell::new(identifier, v_partial, false),
            })
        }

        fn cells_pi(&self) -> cells_tree::PublicInputs<F> {
            cells_tree::PublicInputs::from_slice(&self.cells_proof.public_inputs)
        }
        fn cells_proof_vk(&self) -> ProofWithVK {
            ProofWithVK::new(self.cells_proof.clone(), self.cells_vk.clone())
        }

        fn rand_cells_pi() -> Vec<F> {
            // generate cells tree input and fake proof
            let cells_hash = HashOut::rand().to_fields();
            let cells_digest = Point::rand().to_weierstrass().to_fields();
            let cells_pi = cells_tree::PublicInputs::new(
                &cells_hash,
                &cells_digest,
                &Point::NEUTRAL.to_fields(),
            )
            .to_vec();
            cells_pi
        }
    }

    #[test]
    fn test_rows_tree_api() -> Result<()> {
        init_logging();
        log::info!("Generating parameters");
        let params = TestParams::build()?;
        log::info!("Generating leaf proof 1");
        let leaf1 = generate_leaf_proof(&params, &params.leaf1)?;
        log::info!("Generating leaf proof 2");
        let leaf2 = generate_leaf_proof(&params, &params.leaf2)?;
        let children_proof = [leaf1.clone(), leaf2.clone()];
        log::info!("Generating full proof (from leaf 1 and leaf 2)");
        let full_proof = generate_full_proof(&params, children_proof)?;
        log::info!("Generating partial proof (from full proof)");
        let _ = generate_partial_proof(&params, params.partial.clone(), true, full_proof)?;
        log::info!("Test done");
        Ok(())
    }

    fn generate_partial_proof(
        p: &TestParams,
        tuple: Cell,
        is_left: bool,
        child_proof_buff: Vec<u8>,
    ) -> Result<Vec<u8>> {
        let child_proof = ProofWithVK::deserialize(&child_proof_buff)?;
        let child_pi = PublicInputs::from_slice(&child_proof.proof.public_inputs);
        let child_min = child_pi.min_value_u256();
        let child_max = child_pi.max_value_u256();

        partial_safety_check(child_min, child_max, tuple.value, is_left);

        let input = CircuitInput::partial(
            tuple.identifier.to_canonical_u64(),
            tuple.value,
            false,
            is_left,
            child_proof_buff.clone(),
            p.cells_proof_vk().serialize()?,
        )?;
        let proof = p
            .params
            .generate_proof(input, p.cells_test.get_recursive_circuit_set().clone())?;
        let pi = ProofWithVK::deserialize(&proof)?.proof.public_inputs;
        let pi = PublicInputs::from_slice(&pi);
        {
            // node_min = left ? child_proof.min : index_value
            // node_max = left ? index_value : child_proof.max
            let (node_min, node_max) = match is_left {
                true => (pi.min_value_u256(), tuple.value),
                false => (tuple.value, pi.max_value_u256()),
            };

            let child_hash = child_pi.root_hash_hashout();
            let empty_hash = empty_poseidon_hash();
            let input_hash = match is_left {
                true => [child_hash.to_fields(), empty_hash.to_fields()].concat(),
                false => [empty_hash.to_fields(), child_hash.to_fields()].concat(),
            };
            let inputs = input_hash
                .iter()
                .chain(node_min.to_fields().iter())
                .chain(node_max.to_fields().iter())
                .chain(tuple.to_fields().iter())
                .chain(p.cells_pi().h_raw().iter())
                .cloned()
                .collect::<Vec<_>>();
            let hash = H::hash_no_pad(&inputs);
            assert_eq!(hash, pi.root_hash_hashout());

            // final_digest = HashToInt(mul_digest) * D(ind_digest) + row_proof.digest()
            let split_digest = tuple.split_and_accumulate_digest(p.cells_pi().split_digest_point());
            let res = split_digest.cond_combine_to_row_digest();
            // then adding with the rest of the rows digest, the other nodes
            let res = res + weierstrass_to_point(&child_pi.rows_digest_field());
            assert_eq!(res.to_weierstrass(), pi.rows_digest_field());
        }
        Ok(vec![])
    }

    fn generate_full_proof(p: &TestParams, child_proof: [Vec<u8>; 2]) -> Result<Vec<u8>> {
        let tuple = p.full.clone();
        let input = CircuitInput::full(
            tuple.identifier.to_canonical_u64(),
            tuple.value,
            false,
            child_proof[0].to_vec(),
            child_proof[1].to_vec(),
            p.cells_proof_vk().serialize()?,
        )?;
        let left_proof = ProofWithVK::deserialize(&child_proof[0])?;
        let left_pi = PublicInputs::from_slice(&left_proof.proof.public_inputs);
        let right_proof = ProofWithVK::deserialize(&child_proof[1])?;
        let right_pi = PublicInputs::from_slice(&right_proof.proof.public_inputs);
        assert!(left_pi.max_value_u256() < tuple.value);
        assert!(tuple.value < right_pi.min_value_u256());
        let proof = p
            .params
            .generate_proof(input, p.cells_test.get_recursive_circuit_set().clone())?;
        let pi = ProofWithVK::deserialize(&proof)?.proof.public_inputs;
        let pi = PublicInputs::from_slice(&pi);
        {
            // H(left_child_hash,right_child_hash,min,max,index_identifier,index_value,cells_tree_hash)
            // min coming from left
            // max coming from right
            let inputs: Vec<_> = left_pi
                .root_hash_hashout()
                .to_fields()
                .iter()
                .chain(right_pi.root_hash_hashout().to_fields().iter())
                .chain(left_pi.min_value_u256().to_fields().iter())
                .chain(right_pi.max_value_u256().to_fields().iter())
                .chain(tuple.to_fields().iter())
                .chain(p.cells_pi().h_raw().iter())
                .cloned()
                .collect();
            let exp_hash = H::hash_no_pad(&inputs);
            assert_eq!(pi.root_hash_hashout(), exp_hash);

            {
                // final_digest = HashToInt(mul_digest) * D(ind_digest) + p1.digest() + p2.digest()
                let split_digest =
                    tuple.split_and_accumulate_digest(p.cells_pi().split_digest_point());
                let row_digest = split_digest.cond_combine_to_row_digest();

                let p1dr = weierstrass_to_point(&left_pi.rows_digest_field());
                let p2dr = weierstrass_to_point(&right_pi.rows_digest_field());
                let result_digest = p1dr + p2dr + row_digest;
                assert_eq!(result_digest.to_weierstrass(), pi.rows_digest_field());
            }
        }
        Ok(proof)
    }

    fn generate_leaf_proof(p: &TestParams, tuple: &Cell) -> Result<Vec<u8>> {
        let cells_pi = p.cells_pi();
        //  generate row leaf proof
        let input = CircuitInput::leaf(
            tuple.identifier.to_canonical_u64(),
            tuple.value,
            false,
            p.cells_proof_vk().serialize()?,
        )?;

        let proof = p
            .params
            .generate_proof(input, p.cells_test.get_recursive_circuit_set().clone())?;
        let pi = ProofWithVK::deserialize(&proof)
            .unwrap()
            .proof
            .public_inputs;
        let pi = PublicInputs::from_slice(&pi);
        let tuple = tuple.clone();
        {
            let empty_hash = empty_poseidon_hash();
            // H(left_child_hash,right_child_hash,min,max,index_identifier,index_value,cells_tree_hash)
            let inputs: Vec<_> = empty_hash
                .to_fields()
                .iter()
                .chain(empty_hash.to_fields().iter())
                .chain(tuple.value.to_fields().iter())
                .chain(tuple.value.to_fields().iter())
                .chain(tuple.to_fields().iter())
                .chain(cells_pi.h_raw().iter())
                .cloned()
                .collect();
            let exp_hash = H::hash_no_pad(&inputs);
            assert_eq!(pi.root_hash_hashout(), exp_hash);
        }
        {
            // final_digest = HashToInt(mul_digest) * D(ind_digest)
            let split_digest = tuple.split_and_accumulate_digest(cells_pi.split_digest_point());
            let result = split_digest.cond_combine_to_row_digest();
            assert_eq!(result.to_weierstrass(), pi.rows_digest_field());
        }
        Ok(proof)
    }
}
